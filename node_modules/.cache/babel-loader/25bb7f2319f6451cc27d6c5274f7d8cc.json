{"remainingRequest":"/home/dc/Documents/BP/vue-bp-web/node_modules/babel-loader/lib/index.js!/home/dc/Documents/BP/vue-bp-web/node_modules/eslint-loader/index.js??ref--14-0!/home/dc/Documents/BP/vue-bp-web/src/myfiles/taskHandler.js","dependencies":[{"path":"/home/dc/Documents/BP/vue-bp-web/src/myfiles/taskHandler.js","mtime":1646998588921},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/cache-loader/dist/cjs.js","mtime":1642114936856},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/babel-loader/lib/index.js","mtime":1642114938312},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/eslint-loader/index.js","mtime":1642114937120}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8gY29uc3QgdGV4ID0gcmVxdWlyZSgndGV4LW1hdGgtcGFyc2VyJyk7Ci8vIGltcG9ydCB7IHBhcnNlVGV4LCBldmFsdWF0ZVRleCB9IGZyb20gIC8vIEVTNiBtb2R1bGUKaW1wb3J0IHsgU1RBUlQsIFRFWFQsIFZBUklBQkxFLCBBTlNXRVIsIHRva2VuaXplLCBUb2tlbiB9IGZyb20gIi4vdG9rZW5pemVyIjsKZXhwb3J0IGNvbnN0IEZJTEVOQU1FMSA9ICJ0ZXN0LnR4dCI7CmV4cG9ydCBjb25zdCBGSUxFTkFNRTIgPSAidGVzdDQudHh0IjsgLy9jb25zb2xlLmRpcih0b2tlbml6ZShGSUxFTkFNRTEpLCB7J21heEFycmF5TGVuZ3RoJzogbnVsbH0pOwoKZXhwb3J0IGNvbnN0IFFVRVNUSU9OID0gMiwKICAgICAgREVGSU5JVElPTlMgPSAzLAogICAgICBSQU5HRVMgPSA0LAogICAgICBTRVRfUkFOR0UgPSA2LAogICAgICBDT1JSRUNUID0gNywKICAgICAgSU5DT1JSRUNUID0gODsKZXhwb3J0IGNsYXNzIFJhbmdlIHsKICBjb25zdHJ1Y3RvcigpIHsKICAgIHRoaXMuc3RhcnQgPSAiIjsKICAgIHRoaXMuZW5kID0gIiI7CiAgICB0aGlzLnN0ZXAgPSAiIjsKCiAgICB0aGlzLmZ1bGxSYW5nZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgaWYgKHRoaXMuc3RhcnQudHJpbSgpID09ICIiIHx8IHRoaXMuZW5kLnRyaW0oKSA9PSAiIiB8fCB0aGlzLnN0ZXAudHJpbSgpID09ICIiKSB7CiAgICAgICAgcmV0dXJuICIiOwogICAgICB9CgogICAgICByZXR1cm4gIigiICsgdGhpcy5zdGFydCArICIsIiArIHRoaXMuZW5kICsgIiwiICsgdGhpcy5zdGVwICsgIikiOwogICAgfTsKICB9CgogIHNldEZ1bGxSYW5nZShyYW5nZSkgewogICAgbGV0IFtzLCBlLCBwXSA9IHJhbmdlLnNwbGl0KCIsIiwgMyk7CiAgICBzID0gcy5zdWJzdHJpbmcoMSk7CiAgICBwID0gcC5zbGljZSgwLCAtMSk7CiAgICB0aGlzLnN0YXJ0ID0gczsKICAgIHRoaXMuZW5kID0gZTsKICAgIHRoaXMuc3RlcCA9IHA7CiAgfQoKICB1cGRhdGVSYW5nZSgpIHsKICAgIHRoaXMuZnVsbFJhbmdlID0gIigiICsgdGhpcy5zdGFydCArICIsIiArIHRoaXMuZW5kICsgIiwiICsgdGhpcy5zdGVwICsgIikiOwogIH0KCn0gLy8gQ2xhc3MgdGhhdCByZXByZXNlbnRzIHRoZQovLyB2YXJpYWJsZSB0eXBlIHZhcmlhYmxlIGZvciB0YXNrcwoKZXhwb3J0IGNsYXNzIHZhcmlhYmxlSW5mbyB7CiAgY29uc3RydWN0b3IobmFtZSkgewogICAgdGhpcy5uYW1lID0gbmFtZTsKICAgIHRoaXMuZGVmaW5pdGlvbiA9ICIiOwogICAgdGhpcy5yYW5nZSA9ICIiOwogICAgdGhpcy52YWx1ZSA9IDA7IC8vIHZhbHVlCgogICAgdGhpcy50ZXN0UmFuZ2UgPSBuZXcgUmFuZ2UoKTsKICAgIHRoaXMudmlzaWJsZSA9IHRydWU7CiAgfQoKfSAvLyBDbGFzcyB0aGF0IHJlcHJlc2VudHMgdGhlCi8vIGFuc3dlciB0eXBlIHZhcmlhYmxlIGZvciB0YXNrcwoKZXhwb3J0IGNsYXNzIGFuc3dlckluZm8gewogIGNvbnN0cnVjdG9yKG5hbWUpIHsKICAgIHRoaXMubmFtZSA9IG5hbWU7CiAgICB0aGlzLmNvcnJlY3QgPSBbXTsKICAgIHRoaXMuaW5jb3JyZWN0ID0gW107IC8vIHZhbHVlcwoKICAgIHRoaXMuY29ycmVjdF92YWx1ZXMgPSBbXTsKICAgIHRoaXMuaW5jb3JyZWN0X3ZhbHVlcyA9IFtdOwogICAgdGhpcy52aXNpYmxlID0gdHJ1ZTsKICB9Cgp9IC8vIENsYXNzIHRoYXQgcmVwcmVzZW50cyB0aGUKLy8gcXVlc3Rpb25zIGZvciBhIHRhc2sKCmV4cG9ydCBjbGFzcyB0YXNrUXVlc3Rpb24gewogIGNvbnN0cnVjdG9yKCkgewogICAgdGhpcy50ZXh0ID0gIiI7CiAgICB0aGlzLmFuc3dlcnMgPSBuZXcgTWFwKCk7CiAgfQoKfQovKgovLyBQYXJzZXMgdGhlIG1hcmt1cCBsYW5ndWFnZQpleHBvcnQgZnVuY3Rpb24gcGFyc2VNYXRoTWFya3VwKGZpbGVfbmFtZSkgewogIC8vIEZpcnN0LCB0b2tlbml6ZSB0aGUgaW5wdXQgZmlsZQogIGxldCB0b2tlbnMgPSB0b2tlbml6ZShmaWxlX25hbWUpOwoKICAvLyBDcmVhdGUgdmFyaWFibGUgd2hlcmUgdGhlIG5ldyB0YXNrCiAgLy8gd2lsbCBiZSBzYXZlZAogIC8vbGV0IGN1cnJlbnRfdGFzayA9IG5ldyBUYXNrKCk7CgogIGxldCB2YXJpYWJsZXMgPSBuZXcgTWFwKCk7CiAgdmFyaWFibGVzLnNldCgidGFzay10ZXh0IiwgIiIpOwogIGxldCBjX25hbWUgPSAiIjsKICBsZXQgcV9udW0gPSAwOwoKICB2YXIgUEFSVCA9IFNUQVJUOwoKICBmb3IgKGxldCBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykgewogICAgbGV0IHRva2VuID0gdG9rZW5zW2ldOwogICAgbGV0IHRva2VuMiA9IGkgKyAxID09IHRva2Vucy5sZW5ndGggPyB0b2tlbnNbaV0gOiB0b2tlbnNbaSArIDFdOwoKICAgIHN3aXRjaCAoUEFSVCkgewogICAgICBjYXNlIFNUQVJUOiB7CiAgICAgICAgaWYgKHRva2VuLnR5cGUgPT0gImtleXdvcmQiICYmIHRva2VuLnZhbHVlID09ICIjdGV4dCIpIHsKICAgICAgICAgIFBBUlQgPSBURVhUOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQoKICAgICAgICBpZiAodG9rZW4udHlwZSA9PSAia2V5d29yZCIgJiYgdG9rZW4udmFsdWUgPT0gIiNxdWVzdGlvbiIpIHsKICAgICAgICAgIFBBUlQgPSBRVUVTVElPTjsKICAgICAgICAgIHFfbnVtKys7CiAgICAgICAgICB2YXJpYWJsZXMuc2V0KCJxIiArIHFfbnVtLnRvU3RyaW5nKCksIG5ldyB0YXNrUXVlc3Rpb24oKSk7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CgogICAgICAgIGlmICh0b2tlbi50eXBlID09ICJrZXl3b3JkIiAmJiB0b2tlbi52YWx1ZSA9PSAiI2RlZmluaXRpb25zIikgewogICAgICAgICAgUEFSVCA9IERFRklOSVRJT05TOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQoKICAgICAgICBpZiAodG9rZW4udHlwZSA9PSAia2V5d29yZCIgJiYgdG9rZW4udmFsdWUgPT0gIiNyYW5nZXMiKSB7CiAgICAgICAgICBQQVJUID0gUkFOR0VTOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQoKICAgICAgICBpZiAodG9rZW4udHlwZSA9PSAibmV3bGluZSIpIGJyZWFrOwoKICAgICAgICBicmVhazsKICAgICAgfQoKICAgICAgY2FzZSBURVhUOiB7CiAgICAgICAgaWYgKHRva2VuLnR5cGUgIT0gIm5ld2xpbmUiKSB7CiAgICAgICAgICBsZXQgdHh0ID0gdmFyaWFibGVzLmdldCgidGFzay10ZXh0Iik7CiAgICAgICAgICB0eHQgKz0gdG9rZW4udmFsdWUgKyAiICI7CiAgICAgICAgICB2YXJpYWJsZXMuc2V0KCJ0YXNrLXRleHQiLCB0eHQpOwogICAgICAgIH0KCiAgICAgICAgaWYgKHRva2VuMi50eXBlID09ICJrZXl3b3JkIikgewogICAgICAgICAgUEFSVCA9IFNUQVJUOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICAgIGJyZWFrOwogICAgICB9CgogICAgICBjYXNlIFFVRVNUSU9OOiB7CiAgICAgICAgLy8gYWRkIHRva2VuIHRvIHF1ZXN0aW9uIHRleHQKICAgICAgICBsZXQgcSA9IHZhcmlhYmxlcy5nZXQoInEiICsgcV9udW0udG9TdHJpbmcoKSk7CiAgICAgICAgaWYgKHRva2VuLnR5cGUgIT0gIm5ld2xpbmUiKSB7CiAgICAgICAgICBxLnRleHQgKz0gdG9rZW4udmFsdWUgKyAiICI7CiAgICAgICAgfQogICAgICAgIHZhcmlhYmxlcy5zZXQoInEiICsgcV9udW0udG9TdHJpbmcoKSwgcSk7CgogICAgICAgIGlmICh0b2tlbjIudHlwZSA9PSAia2V5d29yZCIpIHsKICAgICAgICAgIFBBUlQgPSBTVEFSVDsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KCiAgICAgICAgYnJlYWs7CiAgICAgIH0KCiAgICAgIGNhc2UgREVGSU5JVElPTlM6IHsKICAgICAgICBpZiAodG9rZW4udHlwZSA9PSAidmFyIiAmJiB0b2tlbjIudHlwZSA9PSAiZXEiKSB7CiAgICAgICAgICB2YXJpYWJsZXMuc2V0KHRva2VuLnZhbHVlLCBuZXcgdmFyaWFibGVJbmZvKHRva2VuLnZhbHVlKSk7CiAgICAgICAgICBjX25hbWUgPSB0b2tlbi52YWx1ZTsKICAgICAgICAgIFBBUlQgPSBWQVJJQUJMRTsKICAgICAgICAgIGkgPSBpICsgMTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KCiAgICAgICAgaWYgKHRva2VuLnR5cGUgPT0gInZhciIgJiYgdG9rZW4yLnR5cGUgPT0gIm5ld2xpbmUiKSB7CiAgICAgICAgICB2YXJpYWJsZXMuc2V0KHRva2VuLnZhbHVlLCBuZXcgdmFyaWFibGVJbmZvKHRva2VuLnZhbHVlKSk7CiAgICAgICAgICBpID0gaSArIDE7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CgogICAgICAgIGlmICh0b2tlbi50eXBlID09ICJhbnN3ZXIiKSB7CiAgICAgICAgICBsZXQgcSA9IHZhcmlhYmxlcy5nZXQoInEiICsgcV9udW0udG9TdHJpbmcoKSk7CiAgICAgICAgICBjX25hbWUgPSB0b2tlbi52YWx1ZTsKCiAgICAgICAgICBpZiAocS5hbnN3ZXJzLmdldCh0b2tlbi52YWx1ZSkgPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIHEuYW5zd2Vycy5zZXQodG9rZW4udmFsdWUsIG5ldyBhbnN3ZXJJbmZvKHRva2VuLnZhbHVlKSk7CiAgICAgICAgICB9CgogICAgICAgICAgdmFyaWFibGVzLnNldCgicSIgKyBxX251bS50b1N0cmluZygpLCBxKTsKICAgICAgICAgIGNfbmFtZSA9IHRva2VuLnZhbHVlOwogICAgICAgICAgUEFSVCA9IEFOU1dFUjsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KCiAgICAgICAgaWYgKHRva2VuMi50eXBlID09ICJrZXl3b3JkIikgewogICAgICAgICAgUEFSVCA9IFNUQVJUOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQoKICAgICAgICBicmVhazsKICAgICAgfQoKICAgICAgY2FzZSBWQVJJQUJMRTogewogICAgICAgIGxldCBpbmZvID0gdmFyaWFibGVzLmdldChjX25hbWUpOwogICAgICAgIGluZm8uZGVmaW5pdGlvbiArPSB0b2tlbi52YWx1ZTsKICAgICAgICB2YXJpYWJsZXMuc2V0KGNfbmFtZSwgaW5mbyk7CgogICAgICAgIGlmICh0b2tlbjIudHlwZSA9PSAibmV3bGluZSIpIHsKICAgICAgICAgIFBBUlQgPSBERUZJTklUSU9OUzsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KCiAgICAgICAgYnJlYWs7CiAgICAgIH0KCiAgICAgIGNhc2UgQU5TV0VSOiB7CiAgICAgICAgaWYgKHRva2VuMi50eXBlID09ICJuZXdsaW5lIikgewogICAgICAgICAgUEFSVCA9IERFRklOSVRJT05TOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQoKICAgICAgICBpZiAodG9rZW4udHlwZSA9PSAiYWNjZXNzb3IiICYmIHRva2VuLnZhbHVlID09ICIuY29ycmVjdCIpIHsKICAgICAgICAgIFBBUlQgPSBDT1JSRUNUOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfSBlbHNlIGlmICh0b2tlbi50eXBlID09ICJhY2Nlc3NvciIgJiYgdG9rZW4udmFsdWUgPT0gIi5pbmNvcnJlY3QiKSB7CiAgICAgICAgICBQQVJUID0gSU5DT1JSRUNUOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQoKICAgICAgICBicmVhazsKICAgICAgfQoKICAgICAgY2FzZSBDT1JSRUNUOiB7CiAgICAgICAgaWYgKHRva2VuMi50eXBlID09ICJyLWJyYWNrZXQiKSB7CiAgICAgICAgICBQQVJUID0gREVGSU5JVElPTlM7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CgogICAgICAgIGlmICh0b2tlbi50eXBlID09ICJlcSIgfHwgdG9rZW4udHlwZSA9PSAibmV3bGluZSIpIGJyZWFrOwoKICAgICAgICBsZXQgcSA9IHZhcmlhYmxlcy5nZXQoInEiICsgcV9udW0udG9TdHJpbmcoKSk7CiAgICAgICAgbGV0IGFucyA9IHEuYW5zd2Vycy5nZXQoY19uYW1lKTsKCiAgICAgICAgaWYgKHRva2VuLnR5cGUgPT0gImwtYnJhY2tldCIgfHwgdG9rZW4udHlwZSA9PSAiY29tbWEiKSB7CiAgICAgICAgICBhbnMuY29ycmVjdC5wdXNoKCIiKTsKICAgICAgICAgIHEuYW5zd2Vycy5zZXQoY19uYW1lLCBhbnMpOwogICAgICAgICAgdmFyaWFibGVzLnNldCgicSIgKyBxX251bS50b1N0cmluZygpLCBxKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KCiAgICAgICAgbGV0IHZhbCA9IGFucy5jb3JyZWN0LmF0KC0xKTsKICAgICAgICB2YWwgKz0gdG9rZW4udmFsdWU7CiAgICAgICAgYW5zLmNvcnJlY3RbYW5zLmNvcnJlY3QubGVuZ3RoIC0gMV0gPSB2YWw7CgogICAgICAgIHEuYW5zd2Vycy5zZXQoY19uYW1lLCBhbnMpOwogICAgICAgIHZhcmlhYmxlcy5zZXQoInEiICsgcV9udW0udG9TdHJpbmcoKSwgcSk7CgogICAgICAgIGlmICh0b2tlbjIudHlwZSA9PSAici1icmFja2V0IikgewogICAgICAgICAgUEFSVCA9IERFRklOSVRJT05TOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQoKICAgICAgICBicmVhazsKICAgICAgfQoKICAgICAgY2FzZSBJTkNPUlJFQ1Q6IHsKICAgICAgICBpZiAodG9rZW4yLnZhbHVlID09ICJdIikgewogICAgICAgICAgUEFSVCA9IERFRklOSVRJT05TOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQoKICAgICAgICBpZiAodG9rZW4udHlwZSA9PSAiZXEiIHx8IHRva2VuLnR5cGUgPT0gIm5ld2xpbmUiKSB7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CgogICAgICAgIGxldCBxID0gdmFyaWFibGVzLmdldCgicSIgKyBxX251bS50b1N0cmluZygpKTsKICAgICAgICBsZXQgYW5zID0gcS5hbnN3ZXJzLmdldChjX25hbWUpOwoKICAgICAgICBpZiAodG9rZW4udHlwZSA9PSAibC1icmFja2V0IiB8fCB0b2tlbi50eXBlID09ICJjb21tYSIpIHsKICAgICAgICAgIGFucy5pbmNvcnJlY3QucHVzaCgiIik7CiAgICAgICAgICBxLmFuc3dlcnMuc2V0KGNfbmFtZSwgYW5zKTsKICAgICAgICAgIHZhcmlhYmxlcy5zZXQoInEiICsgcV9udW0udG9TdHJpbmcoKSwgcSk7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CgogICAgICAgIGxldCB2YWwgPSBhbnMuaW5jb3JyZWN0LmF0KC0xKTsKICAgICAgICB2YWwgKz0gdG9rZW4udmFsdWU7CgogICAgICAgIGFucy5pbmNvcnJlY3RbYW5zLmluY29ycmVjdC5sZW5ndGggLSAxXSA9IHZhbDsKCiAgICAgICAgcS5hbnN3ZXJzLnNldChjX25hbWUsIGFucyk7CiAgICAgICAgdmFyaWFibGVzLnNldCgicSIgKyBxX251bS50b1N0cmluZygpLCBxKTsKCiAgICAgICAgYnJlYWs7CiAgICAgIH0KCiAgICAgIGNhc2UgUkFOR0VTOiB7CiAgICAgICAgaWYgKHRva2VuLnR5cGUgPT0gInZhciIpIHsKICAgICAgICAgIGNfbmFtZSA9IHRva2VuLnZhbHVlOwogICAgICAgICAgUEFSVCA9IFNFVF9SQU5HRTsKICAgICAgICAgIGkgPSBpICsgMjsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KCiAgICAgICAgaWYgKHRva2VuMi50eXBlID09ICJuZXdsaW5lIikgewogICAgICAgICAgUEFSVCA9IFNUQVJUOwogICAgICAgIH0KICAgICAgICBicmVhazsKICAgICAgfQoKICAgICAgY2FzZSBTRVRfUkFOR0U6IHsKICAgICAgICBsZXQgaW5mbyA9IHZhcmlhYmxlcy5nZXQoY19uYW1lKTsKICAgICAgICBpbmZvLnJhbmdlICs9IHRva2VuLnZhbHVlOwogICAgICAgIHZhcmlhYmxlcy5zZXQoY19uYW1lLCBpbmZvKTsKCiAgICAgICAgaWYgKHRva2VuMi50eXBlID09ICJuZXdsaW5lIikgewogICAgICAgICAgUEFSVCA9IFJBTkdFUzsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KCiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH0KICB9CgogIHJldHVybiB2YXJpYWJsZXM7Cn0KCiovCgovKiogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovCi8vIENsYXNzIHRoYXQgcmVwcmVzZW50cyB0aGUgcXVlc3Rpb25zCi8vIG9mIHRoZSBnaXZlbiB0YXNrCgpleHBvcnQgY2xhc3MgUXVlc3Rpb24gewogIGNvbnN0cnVjdG9yKCkgewogICAgdGhpcy50ZXh0ID0gIiI7CiAgfQoKfQpleHBvcnQgY2xhc3MgQW5zd2VyIHsKICBjb25zdHJ1Y3RvcihfbmFtZSkgewogICAgdGhpcy5uYW1lID0gX25hbWU7CiAgICB0aGlzLmNvcnJlY3QgPSBbXTsKICAgIHRoaXMuaW5jb3JyZWN0ID0gW107CiAgICB0aGlzLnZpc2libGUgPSB0cnVlOwogIH0KCn0KZXhwb3J0IGNsYXNzIFZhcmlhYmxlIHsKICBjb25zdHJ1Y3RvcihfbmFtZSkgewogICAgdGhpcy5uYW1lID0gX25hbWU7CiAgICB0aGlzLmRlZmluaXRpb24gPSAiIjsKICAgIHRoaXMucmFuZ2UgPSBuZXcgUmFuZ2UyKCk7CiAgICB0aGlzLnZpc2libGUgPSB0cnVlOwogIH0KCn0KZXhwb3J0IGNsYXNzIFJhbmdlMiB7CiAgY29uc3RydWN0b3IoKSB7CiAgICB0aGlzLnN0YXJ0ID0gIiI7CiAgICB0aGlzLmVuZCA9ICIiOwogICAgdGhpcy5zdGVwID0gIiI7CgogICAgdGhpcy5mdWxsUmFuZ2UgPSBmdW5jdGlvbiAoKSB7CiAgICAgIGlmICh0aGlzLnN0YXJ0LnRyaW0oKSA9PSAiIiB8fCB0aGlzLmVuZC50cmltKCkgPT0gIiIgfHwgdGhpcy5zdGVwLnRyaW0oKSA9PSAiIikgewogICAgICAgIHJldHVybiAiIjsKICAgICAgfQoKICAgICAgcmV0dXJuICIoIiArIHRoaXMuc3RhcnQgKyAiLCIgKyB0aGlzLmVuZCArICIsIiArIHRoaXMuc3RlcCArICIpIjsKICAgIH07CiAgfQoKfSAvLyBDbGFzcyB0aGF0IHJlcHJlc2VudHMgdGhlIHRhc2sKLy8gdGhpcyB3aWxsIGJlIHNhdmVkIGluIHRoZSBkYXRhYmFzZQoKZXhwb3J0IGNsYXNzIFRhc2sgewogIGNvbnN0cnVjdG9yKCkgewogICAgLy8gQ29udGVudAogICAgdGhpcy50ZXh0ID0gIiI7CiAgICB0aGlzLnFJbmRleCA9IC0xOwogICAgdGhpcy5xdWVzdGlvbnMgPSBbXTsKICAgIHRoaXMudkluZGV4ID0gLTE7CiAgICB0aGlzLnZhcmlhYmxlcyA9IFtdOwogICAgdGhpcy5hbnN3ZXJzID0gW107CiAgfSAvLyBBZGRpbmcgdGV4dCB0byB0YXNrCgoKICBhZGRUYXNrVGV4dChfdGV4dCkgewogICAgdGhpcy50ZXh0ICs9ICIgIiArIF90ZXh0LnRvU3RyaW5nKCk7CiAgfSAvLyBRdWVzdGlvbiBtZXRob2RzCgoKICBhZGROZXdRdWVzdGlvbigpIHsKICAgIHRoaXMucXVlc3Rpb25zLnB1c2gobmV3IFF1ZXN0aW9uKCkpOwogICAgdGhpcy5xSW5kZXgrKzsKICB9CgogIGFkZFF1ZXN0aW9uVGV4dChfdGV4dCkgewogICAgdGhpcy5xdWVzdGlvbnNbdGhpcy5xSW5kZXhdLnRleHQgKz0gIiAiICsgX3RleHQ7CiAgfQoKICBmaW5kQW5zd2VyKF9uYW1lKSB7CiAgICByZXR1cm4gdGhpcy5hbnN3ZXJzLmZpbmQoYSA9PiBhLm5hbWUgPT0gX25hbWUpOwogIH0KCiAgYWRkTmV3QW5zd2VyKF9uYW1lKSB7CiAgICB0aGlzLmFuc3dlcnMucHVzaChuZXcgQW5zd2VyKF9uYW1lKSk7CiAgfSAvLyBWYXJpYWJsZSBtZXRob2RzCgoKICBhZGROZXdWYXJpYWJsZShfbmFtZSkgewogICAgdGhpcy52YXJpYWJsZXMucHVzaChuZXcgVmFyaWFibGUoX25hbWUpKTsKICAgIHRoaXMudkluZGV4Kys7CiAgfQoKICBhZGRWYXJpYWJsZURlZmluaXRpb24oX2RlZmluaXRpb24pIHsKICAgIHRoaXMudmFyaWFibGVzW3RoaXMudkluZGV4XS5kZWZpbml0aW9uID0gX2RlZmluaXRpb247CiAgfQoKICBmaW5kVmFyaWFibGUoX25hbWUpIHsKICAgIHJldHVybiB0aGlzLnZhcmlhYmxlcy5maW5kKHYgPT4gdi5uYW1lID09IF9uYW1lKTsKICB9Cgp9IC8vIFBhcnNlcyB0aGUgbWFya3VwIGxhbmd1YWdlCgpleHBvcnQgZnVuY3Rpb24gcGFyc2VNYXRoTGFuZyh0ZXh0KSB7CiAgY29uc29sZS5sb2codGV4dCk7IC8vIExvZ2dpbmcKICAvLyBGaXJzdCwgdG9rZW5pemUgdGhlIGlucHV0IGZpbGUKCiAgbGV0IHRva2VucyA9IHRva2VuaXplKHRleHQpOwogIGxldCBsaW5lTnVtYmVyID0gMDsKICBsZXQgaSA9IDA7CiAgY29uc29sZS5sb2codG9rZW5zKTsgLy8gTG9nZ2luZwogIC8vIENyZWF0ZSB0YXNrIG9iamVjdCB3aGVyZSB0aGUgbmV3IHRhc2sgd2lsbCBiZSBzYXZlZAoKICBsZXQgdGFzayA9IG5ldyBUYXNrKCk7IC8vIEVycm9yIGNoZWNraW5nCgogIGlmIChjaGVja0VuZE9mSW5wdXQoKSkgcmV0dXJuIHRhc2s7CiAgcGFyc2VUZXh0KCk7CiAgaWYgKHRhc2suZXJyb3IpIHJldHVybiB0YXNrOwogIHBhcnNlUXVlc3Rpb25zKCk7CiAgaWYgKHRhc2suZXJyb3IpIHJldHVybiB0YXNrOwogIHBhcnNlRGVmaW5pdGlvbnMoKTsKICBpZiAodGFzay5lcnJvcikgcmV0dXJuIHRhc2s7CiAgcGFyc2VSYW5nZXMoKTsKICBjb25zb2xlLmxvZyh0YXNrKTsKICByZXR1cm4gdGFzazsKICAvKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi8KICAvLyBDaGVjayBlbmQgb2YgaW5wdXQgZXJyb3IKCiAgZnVuY3Rpb24gY2hlY2tFbmRPZklucHV0KCkgewogICAgaWYgKGkgPT0gdG9rZW5zLmxlbmd0aCkgewogICAgICB0YXNrLmVycm9yID0gdHJ1ZTsKICAgICAgdGFzay5lcnJNc2cgPSAiUGFyc2VyIGVycm9yOiBVbmV4cGVjdGVkIGVuZCBvZiBpbnB1dC4iOwogICAgfQoKICAgIHJldHVybiB0YXNrLmVycm9yOwogIH0gLy8gUGFyc2UgdGhlICN0ZXh0IHBhcnQgb2YgdGhlIGdpdmVuIHRleHQKCgogIGZ1bmN0aW9uIHBhcnNlVGV4dCgpIHsKICAgIC8vIFRleHQgc2VjdGlvbiBzdGFydHMgd2l0aCAnI3RleHQnCiAgICBpZiAoIWNoZWNrVG9rZW5UeXBlKFRva2VuLnR5cGVzLmtleXdvcmQpKSB0b2tlblR5cGVFcnJvcigiRXhwZWN0ZWQga2V5d29yZCwgc3RhcnRpbmcgd2l0aCAjIik7CiAgICBpZiAoIWNoZWNrVG9rZW5WYWx1ZSgiI3RleHQiKSkgdG9rZW5WYWx1ZUVycm9yKCJFeHBlY3RlZCAjdGV4dCBrZXl3b3JkIik7CiAgICBpKys7IC8vIE1vdmUgdG8gbmV4dCB0b2tlbgogICAgLy8gQXBwZW5kIHRleHQgdW50aWwgdGhlIG5leHQga2V5d29yZAoKICAgIHdoaWxlICghY2hlY2tFbmRPZklucHV0KCkgJiYgIWNoZWNrVG9rZW5UeXBlKFRva2VuLnR5cGVzLmtleXdvcmQpKSB7CiAgICAgIHRhc2suYWRkVGFza1RleHQodG9rZW5zW2ldLnZhbHVlKTsKICAgICAgaSsrOyAvLyBNb3ZlIHRvIG5leHQgdG9rZW4KICAgIH0KICB9IC8vIFBhcnNlIHRoZSBpbmRpdmlkdWFsICNxdWVzdGlvbiBwYXJ0cwoKCiAgZnVuY3Rpb24gcGFyc2VRdWVzdGlvbnMoKSB7CiAgICAvLyBGb3IgZWFjaCBxdWVzdGlvbiBpbiB0aGUgdGV4dAogICAgZG8gewogICAgICAvLyBDaGVjayBrZXl3b3JkIHZhbGlkaXR5CiAgICAgIGlmICghY2hlY2tUb2tlblR5cGUoVG9rZW4udHlwZXMua2V5d29yZCkpIHRva2VuVHlwZUVycm9yKCJFeHBlY3RlZCBrZXl3b3JkLCBzdGFydGluZyB3aXRoICMiKTsKICAgICAgaWYgKCFjaGVja1Rva2VuVmFsdWUoIiNxdWVzdGlvbiIpKSB0b2tlblZhbHVlRXJyb3IoIkV4cGVjdGVkICcjcXVlc3Rpb24nIGtleXdvcmQiKTsKICAgICAgdGFzay5hZGROZXdRdWVzdGlvbigpOwogICAgICBpKys7IC8vIE1vdmUgdG8gbmV4dCB0b2tlbgogICAgICAvLyBBZGQgcXVlc3Rpb24gY29udGVudAoKICAgICAgd2hpbGUgKCFjaGVja1Rva2VuVHlwZShUb2tlbi50eXBlcy5rZXl3b3JkKSkgewogICAgICAgIGlmIChjaGVja1Rva2VuVHlwZShUb2tlbi50eXBlcy5hbnN3ZXIpKSB7CiAgICAgICAgICB0YXNrLmFkZE5ld0Fuc3dlcih0b2tlbnNbaV0udmFsdWUpOwogICAgICAgIH0KCiAgICAgICAgdGFzay5hZGRRdWVzdGlvblRleHQodG9rZW5zW2ldLnZhbHVlKTsKICAgICAgICBpKys7IC8vIE1vdmUgdG8gbmV4dCB0b2tlbgogICAgICB9CiAgICB9IHdoaWxlIChjaGVja1Rva2VuVHlwZShUb2tlbi50eXBlcy5rZXl3b3JkKSAmJiBjaGVja1Rva2VuVmFsdWUoIiNxdWVzdGlvbiIpKTsKICB9IC8vIFBhcnNlIGVhY2ggdmFyaWFibGUgYW5kIGFuc3dlciBkZWZpbml0aW9uCgoKICBmdW5jdGlvbiBwYXJzZURlZmluaXRpb25zKCkgewogICAgaWYgKCFjaGVja1Rva2VuVHlwZShUb2tlbi50eXBlcy5rZXl3b3JkKSkgdG9rZW5UeXBlRXJyb3IoIkV4cGVjdGVkIGtleXdvcmQsIHN0YXJ0aW5nIHdpdGggIyIpOwogICAgaWYgKCFjaGVja1Rva2VuVmFsdWUoIiNkZWZpbml0aW9ucyIpKSB0b2tlblZhbHVlRXJyb3IoIkV4cGVjdGVkICcjZGVmaW5pdGlvbnMnIGtleXdvcmQiKTsKICAgIGkrKzsgLy8gTW92ZSB0byBuZXh0IHRva2VuCiAgICAvLyBVbnRpbCB0aGUgbmV4dCBrZXl3b3JkCgogICAgd2hpbGUgKCFjaGVja1Rva2VuVHlwZShUb2tlbi50eXBlcy5rZXl3b3JkKSkgewogICAgICAvLyBIYW5kbGUgdmFyaWFibGUgZGVmaW5pdGlvbiBvciBkZWNsYXJhdGlvbgogICAgICBpZiAoY2hlY2tUb2tlblR5cGUoVG9rZW4udHlwZXMudmFyaWFibGUpKSB7CiAgICAgICAgLy8gQWRkIG5ldyB2YXJpYWJsZQogICAgICAgIHRhc2suYWRkTmV3VmFyaWFibGUodG9rZW5zW2ldLnZhbHVlKTsKICAgICAgICBpKys7IC8vIE1vdmUgdG8gbmV4dCB0b2tlbgogICAgICAgIC8vIFZhcmlhYmxlIGRlZmluaXRpb24KCiAgICAgICAgaWYgKGNoZWNrVG9rZW5UeXBlKFRva2VuLnR5cGVzLm9wZXJhdG9yLmVxKSkgewogICAgICAgICAgaSsrOyAvLyBNb3ZlIHRvIG5leHQgdG9rZW4KCiAgICAgICAgICBsZXQgdGVtcF9kZWYgPSAiIjsKCiAgICAgICAgICB3aGlsZSAoIWNoZWNrVG9rZW5UeXBlKFRva2VuLnR5cGVzLndoaXRlc3BhY2UubmV3bGluZSkpIHsKICAgICAgICAgICAgLy8gQ29sbGVjdCB2YXJpYWJsZSBkZWZpbml0aW9uCiAgICAgICAgICAgIHRlbXBfZGVmICs9ICIgIiArIHRva2Vuc1tpXS52YWx1ZTsKICAgICAgICAgICAgaSsrOyAvLyBNb3ZlIHRvIG5leHQgdG9rZW4KICAgICAgICAgIH0KCiAgICAgICAgICB0YXNrLmFkZFZhcmlhYmxlRGVmaW5pdGlvbih0ZW1wX2RlZi50cmltKCkpOwogICAgICAgICAgaSsrOyAvLyBNb3ZlIHRvIG5leHQgdG9rZW4KICAgICAgICB9IC8vIFZhcmlhYmxlIGRlY2xhcmF0aW9uCiAgICAgICAgZWxzZSBpZiAoIWNoZWNrVG9rZW5UeXBlKFRva2VuLnR5cGVzLndoaXRlc3BhY2UubmV3bGluZSkpIHsKICAgICAgICAgIHRva2VuVHlwZUVycm9yKCJFeHBlY3RlZCBhIG5ld2xpbmUgY2hhcmFjdGVyICdcXG4nIik7CiAgICAgICAgfQogICAgICB9IC8vIEFuc3dlciBhc3NpZ25tZW50CgoKICAgICAgaWYgKGNoZWNrVG9rZW5UeXBlKFRva2VuLnR5cGVzLmFuc3dlcikpIHsKICAgICAgICAvLyBGaW5kIGFuc3dlciBpbiBxdWVzdGlvbnMgYW5zd2VyCiAgICAgICAgbGV0IGFuc3dlciA9IHRhc2suZmluZEFuc3dlcih0b2tlbnNbaV0udmFsdWUpOwogICAgICAgIGlmIChhbnN3ZXIgPT0gdW5kZWZpbmVkKSBzZW1hbnRpY0Vycm9yKCJBbnN3ZXIgIiArIHRva2Vuc1tpXS52YWx1ZSArICIgaXMgdW5kZWZpbmVkLiIpOwogICAgICAgIGNvbnNvbGUubG9nKCJBTlNXIiwgYW5zd2VyLm5hbWUpOwogICAgICAgIGkrKzsgLy8gTW92ZSB0byBuZXh0IHRva2VuCiAgICAgICAgLy8gTG9vayBmb3IgJy5jb3JyZWN0JyBvciAnLmluY29ycmVjdCcKCiAgICAgICAgaWYgKCFjaGVja1Rva2VuVHlwZShUb2tlbi50eXBlcy5zcGVjaWFsLmFjY2Vzc29yKSkgdG9rZW5UeXBlRXJyb3IoIkV4cGVjdGVkIGFjY2Vzc29yIC5jb3JyZWN0IG9yIC5pbmNvcnJlY3QiKTsgLy8gU2F2ZSBhbnN3ZXIgYWNjZXNzb3IgdHlwZQoKICAgICAgICBsZXQgYW5zd2VyVHlwZSA9IHRva2Vuc1tpXS52YWx1ZTsKICAgICAgICBpKys7IC8vIE1vdmUgdG8gbmV4dCB0b2tlbgogICAgICAgIC8vIExvb2sgZm9yID0KCiAgICAgICAgaWYgKCFjaGVja1Rva2VuVHlwZShUb2tlbi50eXBlcy5vcGVyYXRvci5lcSkpIHRva2VuVHlwZUVycm9yKCJFeHBlY3RlZCBhbiBlcXVhbCBzaWduID0iKTsKICAgICAgICBpKys7IC8vIE1vdmUgdG8gbmV4dCB0b2tlbgogICAgICAgIC8vIExvb2sgZm9yIFsKCiAgICAgICAgaWYgKCFjaGVja1Rva2VuVHlwZShUb2tlbi50eXBlcy5zcGVjaWFsLmxCcmFja2V0KSkgdG9rZW5UeXBlRXJyb3IoIkV4cGVjdGVkIGFuIG9wZW5pbmcgYnJhY2tldCBbIik7CiAgICAgICAgaSsrOyAvLyBNb3ZlIHRvIG5leHQgdG9rZW4KICAgICAgICAvLyBMb29rIGZvciBuZXdsaW5lCgogICAgICAgIGlmICghY2hlY2tUb2tlblR5cGUoVG9rZW4udHlwZXMud2hpdGVzcGFjZS5uZXdsaW5lKSkgdG9rZW5UeXBlRXJyb3IoIkV4cGVjdGVkIGEgbmV3bGluZSBjaGFyYWN0ZXIgJ1xcbiciKTsKICAgICAgICBpKys7IC8vIE1vdmUgdG8gbmV4dCB0b2tlbgogICAgICAgIC8vIEV4Y2x1ZGUgXQoKICAgICAgICBpZiAoY2hlY2tUb2tlblR5cGUoVG9rZW4udHlwZXMuc3BlY2lhbC5yQnJhY2tldCkpIHRva2VuVHlwZUVycm9yKCJFeHBlY3RlZCBhIHZhbHVlIGJldHdlZW4gWyBdIGJyYWNrZXRzIik7CiAgICAgICAgY29uc29sZS5sb2coYW5zd2VyVHlwZSk7IC8vIEZvciBlYWNoIGFuc3dlciBkZWZpbml0aW9uCgogICAgICAgIHdoaWxlICghY2hlY2tUb2tlblR5cGUoVG9rZW4udHlwZXMuc3BlY2lhbC5yQnJhY2tldCkpIHsKICAgICAgICAgIC8vIENvbGxlY3QgZGVmaW5pdGlvbgogICAgICAgICAgbGV0IGFuc3dlckRlZmluaXRpb24gPSAiIjsKCiAgICAgICAgICB3aGlsZSAoIWNoZWNrVG9rZW5UeXBlKFRva2VuLnR5cGVzLnNwZWNpYWwuY29tbWEpICYmICFjaGVja1Rva2VuVHlwZShUb2tlbi50eXBlcy53aGl0ZXNwYWNlLm5ld2xpbmUpKSB7CiAgICAgICAgICAgIGFuc3dlckRlZmluaXRpb24gKz0gdG9rZW5zW2ldLnZhbHVlOwogICAgICAgICAgICBpKys7IC8vIE1vdmUgdG8gbmV4dCB0b2tlbgogICAgICAgICAgfQoKICAgICAgICAgIGlmIChjaGVja1Rva2VuVHlwZShUb2tlbi50eXBlcy5zcGVjaWFsLmNvbW1hKSkgaSsrOyAvLyBNb3ZlIHRvIG5leHQgdG9rZW4KICAgICAgICAgIC8vIFNhdmUgZGVmaW5pdGlvbiBiYXNlZCBvbiBhY2Nlc3NvciB0eXBlCgogICAgICAgICAgaWYgKGFuc3dlclR5cGUgPT0gIi5jb3JyZWN0IikgewogICAgICAgICAgICBhbnN3ZXIuY29ycmVjdC5wdXNoKGFuc3dlckRlZmluaXRpb24pOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChhbnN3ZXJUeXBlID09ICIuaW5jb3JyZWN0IikgewogICAgICAgICAgICBhbnN3ZXIuaW5jb3JyZWN0LnB1c2goYW5zd2VyRGVmaW5pdGlvbik7CiAgICAgICAgICB9CgogICAgICAgICAgaSsrOyAvLyBNb3ZlIHRvIG5leHQgdG9rZW4KICAgICAgICB9CiAgICAgIH0KCiAgICAgIGkrKzsgLy8gTW92ZSB0byBuZXh0IHRva2VuCgogICAgICBjb25zb2xlLmxvZyghY2hlY2tUb2tlblR5cGUoVG9rZW4udHlwZXMua2V5d29yZCkpOwogICAgfQogIH0KCiAgZnVuY3Rpb24gcGFyc2VSYW5nZXMoKSB7CiAgICBpZiAoIWNoZWNrVG9rZW5UeXBlKFRva2VuLnR5cGVzLmtleXdvcmQpKSB0b2tlblR5cGVFcnJvcigiRXhwZWN0ZWQga2V5d29yZCwgc3RhcnRpbmcgd2l0aCAjIik7CiAgICBpZiAoIWNoZWNrVG9rZW5WYWx1ZSgiI3JhbmdlcyIpKSB0b2tlblZhbHVlRXJyb3IoIkV4cGVjdGVkICcjcmFuZ2VzJyBrZXl3b3JkIik7CiAgICBpKys7IC8vIE1vdmUgdG8gbmV4dCB0b2tlbgoKICAgIHNraXBOZXdMaW5lcygpOwoKICAgIHdoaWxlIChpIDwgdG9rZW5zLmxlbmd0aCkgewogICAgICBpZiAoIWNoZWNrVG9rZW5UeXBlKFRva2VuLnR5cGVzLnZhcmlhYmxlKSkgdG9rZW5UeXBlRXJyb3IoIkV4cHRlY3RlZCB2YXJpYWJsZSIpOyAvLyBMb2FkIHZhcmlhYmxlCgogICAgICBsZXQgdmFyaWFibGUgPSB0YXNrLmZpbmRWYXJpYWJsZSh0b2tlbnNbaV0udmFsdWUpOwogICAgICBpZiAodmFyaWFibGUgPT0gdW5kZWZpbmVkKSBzZW1hbnRpY0Vycm9yKCJWYXJpYWJsZSAiICsgdG9rZW5zW2ldLnZhbHVlICsgIiBpcyB1bmRlZmluZWQuIik7CiAgICAgIGkrKzsgLy8gTW92ZSB0byBuZXh0IHRva2VuCgogICAgICBpZiAoIWNoZWNrVG9rZW5UeXBlKFRva2VuLnR5cGVzLm9wZXJhdG9yLmVxKSkgdG9rZW5UeXBlRXJyb3IoIkV4cGVjdGVkIG9wZWF0b3IgPSIpOwogICAgICBpKys7IC8vIE1vdmUgdG8gbmV4dCB0b2tlbgoKICAgICAgaWYgKCFjaGVja1Rva2VuVHlwZShUb2tlbi50eXBlcy50ZXh0KSkgdG9rZW5UeXBlRXJyb3IoIkV4cGVjdGVkIHRleHQgdHlwZSIpOwogICAgICBpZiAoIWNoZWNrVG9rZW5WYWx1ZSgicmFuZ2UiKSkgdG9rZW5WYWx1ZUVycm9yKCJFeHBlY3RlZCAncmFuZ2UnIHRleHQiKTsKICAgICAgaSsrOyAvLyBNb3ZlIHRvIG5leHQgdG9rZW4KICAgICAgLy8gKAoKICAgICAgaWYgKCFjaGVja1Rva2VuVHlwZShUb2tlbi50eXBlcy5zcGVjaWFsLmxQYXJlbnRoKSkgdG9rZW5UeXBlRXJyb3IoIkV4cGVjdGVkIGxlZnQgcGFyZW50aGVzaXMgKCIpOwogICAgICBpKys7IC8vIE1vdmUgdG8gbmV4dCB0b2tlbgogICAgICAvLyBzdGFydAoKICAgICAgaWYgKCFjaGVja1Rva2VuVHlwZShUb2tlbi50eXBlcy5udW1iZXIpKSB0b2tlblR5cGVFcnJvcigiRXhwZWN0ZWQgYSBudW1iZXIiKTsKICAgICAgdmFyaWFibGUucmFuZ2Uuc3RhcnQgPSB0b2tlbnNbaV0udmFsdWU7CiAgICAgIGkrKzsgLy8gTW92ZSB0byBuZXh0IHRva2VuCgogICAgICBpZiAoIWNoZWNrVG9rZW5UeXBlKFRva2VuLnR5cGVzLnNwZWNpYWwuY29tbWEpKSB0b2tlblR5cGVFcnJvcigiRXhwZWN0ZWQgY29tbWEgc2VwYXJhdG9yICwiKTsKICAgICAgaSsrOyAvLyBNb3ZlIHRvIG5leHQgdG9rZW4KICAgICAgLy8gZW5kCgogICAgICBpZiAoIWNoZWNrVG9rZW5UeXBlKFRva2VuLnR5cGVzLm51bWJlcikpIHRva2VuVHlwZUVycm9yKCJFeHBlY3RlZCBhIG51bWJlciIpOwogICAgICB2YXJpYWJsZS5yYW5nZS5lbmQgPSB0b2tlbnNbaV0udmFsdWU7CiAgICAgIGkrKzsgLy8gTW92ZSB0byBuZXh0IHRva2VuCgogICAgICBpZiAoIWNoZWNrVG9rZW5UeXBlKFRva2VuLnR5cGVzLnNwZWNpYWwuY29tbWEpKSB0b2tlblR5cGVFcnJvcigiRXhwZWN0ZWQgY29tbWEgc2VwYXJhdG9yICwiKTsKICAgICAgaSsrOyAvLyBNb3ZlIHRvIG5leHQgdG9rZW4KICAgICAgLy8gc3RlcAoKICAgICAgaWYgKCFjaGVja1Rva2VuVHlwZShUb2tlbi50eXBlcy5udW1iZXIpKSB0b2tlblR5cGVFcnJvcigiRXhwZWN0ZWQgYSBudW1iZXIiKTsKICAgICAgdmFyaWFibGUucmFuZ2Uuc3RlcCA9IHRva2Vuc1tpXS52YWx1ZTsKICAgICAgaSsrOyAvLyBNb3ZlIHRvIG5leHQgdG9rZW4KICAgICAgLy8gKQoKICAgICAgaWYgKCFjaGVja1Rva2VuVHlwZShUb2tlbi50eXBlcy5zcGVjaWFsLnJQYXJlbnRoKSkgdG9rZW5UeXBlRXJyb3IoIkV4cGVjdGVkIGNsb3NpbmcgcmlnaHQgcGFyZW50aGVzaXMgKSIpOwogICAgICBpKys7IC8vIE1vdmUgdG8gbmV4dCB0b2tlbgoKICAgICAgc2tpcE5ld0xpbmVzKCk7CiAgICB9CiAgfQoKICBmdW5jdGlvbiBza2lwTmV3TGluZXMoKSB7CiAgICB3aGlsZSAoaSA8IHRva2Vucy5sZW5ndGggJiYgY2hlY2tUb2tlblR5cGUoVG9rZW4udHlwZXMud2hpdGVzcGFjZS5uZXdsaW5lKSkgewogICAgICBpKys7CiAgICB9CiAgfQogIC8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi8KICAvLyBDaGVja2VycwoKCiAgZnVuY3Rpb24gY2hlY2tUb2tlblR5cGUodHlwZSkgewogICAgaWYgKGkgPj0gdG9rZW5zLmxlbmd0aCkgcmV0dXJuIGZhbHNlOwogICAgcmV0dXJuIHRva2Vuc1tpXS50eXBlID09IHR5cGUgPyB0cnVlIDogZmFsc2U7CiAgfQoKICBmdW5jdGlvbiBjaGVja1Rva2VuVmFsdWUodmFsdWUpIHsKICAgIGlmIChpID49IHRva2Vucy5sZW5ndGgpIHJldHVybiBmYWxzZTsKICAgIHJldHVybiB0b2tlbnNbaV0udmFsdWUgPT0gdmFsdWUgPyB0cnVlIDogZmFsc2U7CiAgfSAvLyBFcnJvcnMKCgogIGZ1bmN0aW9uIHRva2VuVHlwZUVycm9yKF9lcnJNc2cgPSAiVHlwZSBlcnJvciBtZXNzYWdlLi4uIikgewogICAgdGhyb3cgewogICAgICB0eXBlOiAiVG9rZW4gVHlwZSBFcnJvciIsCiAgICAgIG1lc3NhZ2U6IF9lcnJNc2cKICAgIH07CiAgfQoKICBmdW5jdGlvbiB0b2tlblZhbHVlRXJyb3IoX2Vyck1zZyA9ICJWYWx1ZSBlcnJvciBtZXNzYWdlLi4uIikgewogICAgdGhyb3cgewogICAgICB0eXBlOiAiVG9rZW4gVmFsdWUgRXJyb3IiLAogICAgICBtZXNzYWdlOiBfZXJyTXNnCiAgICB9OwogIH0KCiAgZnVuY3Rpb24gc2VtYW50aWNFcnJvcihfZXJyTXNnKSB7CiAgICB0aHJvdyB7CiAgICAgIHR5cGU6ICJTZW1hbnRpYyBFcnJvciIsCiAgICAgIG1lc3NhZ2U6IF9lcnJNc2cKICAgIH07CiAgfQp9Ci8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqLwoKaW1wb3J0IG1hdGggZnJvbSAibWF0aGpzIjsKZXhwb3J0IGNsYXNzIENvbmNyZXRlVGFzayB7CiAgY29uc3RydWN0b3IoKSB7CiAgICB0aGlzLnRleHQgPSAiIjsKICAgIHRoaXMucXVlc3Rpb25zID0gW107CiAgICB0aGlzLmFuc3dlcnMgPSBbXTsKICAgIHRoaXMudmFyaWFibGVzID0gW107CiAgfQoKfQpleHBvcnQgY2xhc3MgR2VuZXJhdG9yIHsKICBjb25zdHJ1Y3RvcigpIHt9CgogIHN0YXRpYyBnZW5lcmF0ZSh0YXNrLCBvcHRpb25zKSB7CiAgICAvLyBIYW5kbGUgZ2VuZXJhdGlvbgogICAgbGV0IHJlc3VsdCA9IENvbmNyZXRlVGFzaygpOyAvLyBDb3B5IHRleHQgYW5kIGFycmF5cwoKICAgIHJlc3VsdC50ZXh0ID0gdGFzay50ZXh0OwogICAgcmVzdWx0LnF1ZXN0aW9ucyA9IFsuLi50YXNrLnF1ZXN0aW9uc107CiAgICByZXN1bHQuYW5zd2VycyA9IFsuLi50YXNrLmFuc3dlcnNdOwogICAgcmVzdWx0LnZhcmlhYmxlcyA9IFsuLi50YXNrLnZhcmlhYmxlc107IC8vCgogICAgcmV0dXJuIHJlc3VsdDsKICAgIC8qID09PT09PT09PT09PT09ICovCiAgICAvLwoKICAgIGZ1bmN0aW9uIGNoZWNrUmVmZmVyZW5jZXModmFyaWFibGUpIHt9IC8vCgoKICAgIGZ1bmN0aW9uIGdldFJhbmRvbU51bWJlcihzdGFydCwgZW5kLCBzdGVwKSB7fSAvLwoKCiAgICBmdW5jdGlvbiBlcnJvcihfZXJyTXNnKSB7CiAgICAgIHRocm93IHsKICAgICAgICBtZXNzYWdlOiBfZXJyTXNnCiAgICAgIH07CiAgICB9CiAgfQoKfQ=="},{"version":3,"sources":["/home/dc/Documents/BP/vue-bp-web/src/myfiles/taskHandler.js"],"names":["START","TEXT","VARIABLE","ANSWER","tokenize","Token","FILENAME1","FILENAME2","QUESTION","DEFINITIONS","RANGES","SET_RANGE","CORRECT","INCORRECT","Range","constructor","start","end","step","fullRange","trim","setFullRange","range","s","e","p","split","substring","slice","updateRange","variableInfo","name","definition","value","testRange","visible","answerInfo","correct","incorrect","correct_values","incorrect_values","taskQuestion","text","answers","Map","Question","Answer","_name","Variable","Range2","Task","qIndex","questions","vIndex","variables","addTaskText","_text","toString","addNewQuestion","push","addQuestionText","findAnswer","find","a","addNewAnswer","addNewVariable","addVariableDefinition","_definition","findVariable","v","parseMathLang","console","log","tokens","lineNumber","i","task","checkEndOfInput","parseText","error","parseQuestions","parseDefinitions","parseRanges","length","errMsg","checkTokenType","types","keyword","tokenTypeError","checkTokenValue","tokenValueError","answer","variable","operator","eq","temp_def","whitespace","newline","undefined","semanticError","special","accessor","answerType","lBracket","rBracket","answerDefinition","comma","skipNewLines","lParenth","number","rParenth","type","_errMsg","message","math","ConcreteTask","Generator","generate","options","result","checkRefferences","getRandomNumber"],"mappings":"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","sourcesContent":["// const tex = require('tex-math-parser');\n// import { parseTex, evaluateTex } from  // ES6 module\n\nimport { START, TEXT, VARIABLE, ANSWER, tokenize, Token } from \"./tokenizer\";\n\nexport const FILENAME1 = \"test.txt\";\nexport const FILENAME2 = \"test4.txt\";\n\n//console.dir(tokenize(FILENAME1), {'maxArrayLength': null});\n\nexport const QUESTION = 2,\n  DEFINITIONS = 3,\n  RANGES = 4,\n  SET_RANGE = 6,\n  CORRECT = 7,\n  INCORRECT = 8;\n\nexport class Range {\n  constructor() {\n    this.start = \"\";\n    this.end = \"\";\n    this.step = \"\";\n    this.fullRange = function () {\n      if (\n        this.start.trim() == \"\" ||\n        this.end.trim() == \"\" ||\n        this.step.trim() == \"\"\n      ) {\n        return \"\";\n      }\n\n      return \"(\" + this.start + \",\" + this.end + \",\" + this.step + \")\";\n    };\n  }\n\n  setFullRange(range) {\n    let [s, e, p] = range.split(\",\", 3);\n    s = s.substring(1);\n    p = p.slice(0, -1);\n\n    this.start = s;\n    this.end = e;\n    this.step = p;\n  }\n\n  updateRange() {\n    this.fullRange = \"(\" + this.start + \",\" + this.end + \",\" + this.step + \")\";\n  }\n}\n\n// Class that represents the\n// variable type variable for tasks\nexport class variableInfo {\n  constructor(name) {\n    this.name = name;\n    this.definition = \"\";\n    this.range = \"\";\n\n    this.value = 0; // value\n\n    this.testRange = new Range();\n    this.visible = true;\n  }\n}\n\n// Class that represents the\n// answer type variable for tasks\nexport class answerInfo {\n  constructor(name) {\n    this.name = name;\n    this.correct = [];\n    this.incorrect = [];\n\n    // values\n    this.correct_values = [];\n    this.incorrect_values = [];\n\n    this.visible = true;\n  }\n}\n\n// Class that represents the\n// questions for a task\nexport class taskQuestion {\n  constructor() {\n    this.text = \"\";\n    this.answers = new Map();\n  }\n}\n\n/*\n// Parses the markup language\nexport function parseMathMarkup(file_name) {\n  // First, tokenize the input file\n  let tokens = tokenize(file_name);\n\n  // Create variable where the new task\n  // will be saved\n  //let current_task = new Task();\n\n  let variables = new Map();\n  variables.set(\"task-text\", \"\");\n  let c_name = \"\";\n  let q_num = 0;\n\n  var PART = START;\n\n  for (let i = 0; i < tokens.length; i++) {\n    let token = tokens[i];\n    let token2 = i + 1 == tokens.length ? tokens[i] : tokens[i + 1];\n\n    switch (PART) {\n      case START: {\n        if (token.type == \"keyword\" && token.value == \"#text\") {\n          PART = TEXT;\n          break;\n        }\n\n        if (token.type == \"keyword\" && token.value == \"#question\") {\n          PART = QUESTION;\n          q_num++;\n          variables.set(\"q\" + q_num.toString(), new taskQuestion());\n          break;\n        }\n\n        if (token.type == \"keyword\" && token.value == \"#definitions\") {\n          PART = DEFINITIONS;\n          break;\n        }\n\n        if (token.type == \"keyword\" && token.value == \"#ranges\") {\n          PART = RANGES;\n          break;\n        }\n\n        if (token.type == \"newline\") break;\n\n        break;\n      }\n\n      case TEXT: {\n        if (token.type != \"newline\") {\n          let txt = variables.get(\"task-text\");\n          txt += token.value + \" \";\n          variables.set(\"task-text\", txt);\n        }\n\n        if (token2.type == \"keyword\") {\n          PART = START;\n          break;\n        }\n        break;\n      }\n\n      case QUESTION: {\n        // add token to question text\n        let q = variables.get(\"q\" + q_num.toString());\n        if (token.type != \"newline\") {\n          q.text += token.value + \" \";\n        }\n        variables.set(\"q\" + q_num.toString(), q);\n\n        if (token2.type == \"keyword\") {\n          PART = START;\n          break;\n        }\n\n        break;\n      }\n\n      case DEFINITIONS: {\n        if (token.type == \"var\" && token2.type == \"eq\") {\n          variables.set(token.value, new variableInfo(token.value));\n          c_name = token.value;\n          PART = VARIABLE;\n          i = i + 1;\n          break;\n        }\n\n        if (token.type == \"var\" && token2.type == \"newline\") {\n          variables.set(token.value, new variableInfo(token.value));\n          i = i + 1;\n          break;\n        }\n\n        if (token.type == \"answer\") {\n          let q = variables.get(\"q\" + q_num.toString());\n          c_name = token.value;\n\n          if (q.answers.get(token.value) == undefined) {\n            q.answers.set(token.value, new answerInfo(token.value));\n          }\n\n          variables.set(\"q\" + q_num.toString(), q);\n          c_name = token.value;\n          PART = ANSWER;\n          break;\n        }\n\n        if (token2.type == \"keyword\") {\n          PART = START;\n          break;\n        }\n\n        break;\n      }\n\n      case VARIABLE: {\n        let info = variables.get(c_name);\n        info.definition += token.value;\n        variables.set(c_name, info);\n\n        if (token2.type == \"newline\") {\n          PART = DEFINITIONS;\n          break;\n        }\n\n        break;\n      }\n\n      case ANSWER: {\n        if (token2.type == \"newline\") {\n          PART = DEFINITIONS;\n          break;\n        }\n\n        if (token.type == \"accessor\" && token.value == \".correct\") {\n          PART = CORRECT;\n          break;\n        } else if (token.type == \"accessor\" && token.value == \".incorrect\") {\n          PART = INCORRECT;\n          break;\n        }\n\n        break;\n      }\n\n      case CORRECT: {\n        if (token2.type == \"r-bracket\") {\n          PART = DEFINITIONS;\n          break;\n        }\n\n        if (token.type == \"eq\" || token.type == \"newline\") break;\n\n        let q = variables.get(\"q\" + q_num.toString());\n        let ans = q.answers.get(c_name);\n\n        if (token.type == \"l-bracket\" || token.type == \"comma\") {\n          ans.correct.push(\"\");\n          q.answers.set(c_name, ans);\n          variables.set(\"q\" + q_num.toString(), q);\n          break;\n        }\n\n        let val = ans.correct.at(-1);\n        val += token.value;\n        ans.correct[ans.correct.length - 1] = val;\n\n        q.answers.set(c_name, ans);\n        variables.set(\"q\" + q_num.toString(), q);\n\n        if (token2.type == \"r-bracket\") {\n          PART = DEFINITIONS;\n          break;\n        }\n\n        break;\n      }\n\n      case INCORRECT: {\n        if (token2.value == \"]\") {\n          PART = DEFINITIONS;\n          break;\n        }\n\n        if (token.type == \"eq\" || token.type == \"newline\") {\n          break;\n        }\n\n        let q = variables.get(\"q\" + q_num.toString());\n        let ans = q.answers.get(c_name);\n\n        if (token.type == \"l-bracket\" || token.type == \"comma\") {\n          ans.incorrect.push(\"\");\n          q.answers.set(c_name, ans);\n          variables.set(\"q\" + q_num.toString(), q);\n          break;\n        }\n\n        let val = ans.incorrect.at(-1);\n        val += token.value;\n\n        ans.incorrect[ans.incorrect.length - 1] = val;\n\n        q.answers.set(c_name, ans);\n        variables.set(\"q\" + q_num.toString(), q);\n\n        break;\n      }\n\n      case RANGES: {\n        if (token.type == \"var\") {\n          c_name = token.value;\n          PART = SET_RANGE;\n          i = i + 2;\n          break;\n        }\n\n        if (token2.type == \"newline\") {\n          PART = START;\n        }\n        break;\n      }\n\n      case SET_RANGE: {\n        let info = variables.get(c_name);\n        info.range += token.value;\n        variables.set(c_name, info);\n\n        if (token2.type == \"newline\") {\n          PART = RANGES;\n          break;\n        }\n\n        break;\n      }\n    }\n  }\n\n  return variables;\n}\n\n*/\n\n/** --------------------------------------- */\n\n// Class that represents the questions\n// of the given task\nexport class Question {\n  constructor() {\n    this.text = \"\";\n  }\n}\n\nexport class Answer {\n  constructor(_name) {\n    this.name = _name;\n    this.correct = [];\n    this.incorrect = [];\n    this.visible = true;\n  }\n}\n\nexport class Variable {\n  constructor(_name) {\n    this.name = _name;\n    this.definition = \"\";\n    this.range = new Range2();\n    this.visible = true;\n  }\n}\n\nexport class Range2 {\n  constructor() {\n    this.start = \"\";\n    this.end = \"\";\n    this.step = \"\";\n\n    this.fullRange = function () {\n      if (\n        this.start.trim() == \"\" ||\n        this.end.trim() == \"\" ||\n        this.step.trim() == \"\"\n      ) {\n        return \"\";\n      }\n\n      return \"(\" + this.start + \",\" + this.end + \",\" + this.step + \")\";\n    };\n  }\n}\n\n// Class that represents the task\n// this will be saved in the database\nexport class Task {\n  constructor() {\n    // Content\n    this.text = \"\";\n\n    this.qIndex = -1;\n    this.questions = [];\n\n    this.vIndex = -1;\n    this.variables = [];\n\n    this.answers = [];\n  }\n\n  // Adding text to task\n  addTaskText(_text) {\n    this.text += \" \" + _text.toString();\n  }\n\n  // Question methods\n  addNewQuestion() {\n    this.questions.push(new Question());\n    this.qIndex++;\n  }\n\n  addQuestionText(_text) {\n    this.questions[this.qIndex].text += \" \" + _text;\n  }\n\n  findAnswer(_name) {\n    return this.answers.find((a) => a.name == _name);\n  }\n\n  addNewAnswer(_name) {\n    this.answers.push(new Answer(_name));\n  }\n\n  // Variable methods\n  addNewVariable(_name) {\n    this.variables.push(new Variable(_name));\n    this.vIndex++;\n  }\n\n  addVariableDefinition(_definition) {\n    this.variables[this.vIndex].definition = _definition;\n  }\n\n  findVariable(_name) {\n    return this.variables.find((v) => v.name == _name);\n  }\n}\n\n// Parses the markup language\nexport function parseMathLang(text) {\n  console.log(text); // Logging\n\n  // First, tokenize the input file\n  let tokens = tokenize(text);\n  let lineNumber = 0;\n  let i = 0;\n\n  console.log(tokens); // Logging\n\n  // Create task object where the new task will be saved\n  let task = new Task();\n\n  // Error checking\n  if (checkEndOfInput()) return task;\n\n  parseText();\n  if (task.error) return task;\n  parseQuestions();\n  if (task.error) return task;\n  parseDefinitions();\n  if (task.error) return task;\n  parseRanges();\n\n  console.log(task);\n\n  return task;\n\n  /* ------------------------------ */\n\n  // Check end of input error\n  function checkEndOfInput() {\n    if (i == tokens.length) {\n      task.error = true;\n      task.errMsg = \"Parser error: Unexpected end of input.\";\n    }\n\n    return task.error;\n  }\n\n  // Parse the #text part of the given text\n  function parseText() {\n    // Text section starts with '#text'\n    if (!checkTokenType(Token.types.keyword))\n      tokenTypeError(\"Expected keyword, starting with #\");\n    if (!checkTokenValue(\"#text\")) tokenValueError(\"Expected #text keyword\");\n\n    i++; // Move to next token\n\n    // Append text until the next keyword\n    while (!checkEndOfInput() && !checkTokenType(Token.types.keyword)) {\n      task.addTaskText(tokens[i].value);\n\n      i++; // Move to next token\n    }\n  }\n\n  // Parse the individual #question parts\n  function parseQuestions() {\n    // For each question in the text\n    do {\n      // Check keyword validity\n      if (!checkTokenType(Token.types.keyword))\n        tokenTypeError(\"Expected keyword, starting with #\");\n      if (!checkTokenValue(\"#question\"))\n        tokenValueError(\"Expected '#question' keyword\");\n\n      task.addNewQuestion();\n\n      i++; // Move to next token\n\n      // Add question content\n      while (!checkTokenType(Token.types.keyword)) {\n        if (checkTokenType(Token.types.answer)) {\n          task.addNewAnswer(tokens[i].value);\n        }\n\n        task.addQuestionText(tokens[i].value);\n\n        i++; // Move to next token\n      }\n    } while (\n      checkTokenType(Token.types.keyword) &&\n      checkTokenValue(\"#question\")\n    );\n  }\n\n  // Parse each variable and answer definition\n  function parseDefinitions() {\n    if (!checkTokenType(Token.types.keyword))\n      tokenTypeError(\"Expected keyword, starting with #\");\n    if (!checkTokenValue(\"#definitions\"))\n      tokenValueError(\"Expected '#definitions' keyword\");\n\n    i++; // Move to next token\n\n    // Until the next keyword\n    while (!checkTokenType(Token.types.keyword)) {\n      // Handle variable definition or declaration\n      if (checkTokenType(Token.types.variable)) {\n        // Add new variable\n        task.addNewVariable(tokens[i].value);\n        i++; // Move to next token\n\n        // Variable definition\n        if (checkTokenType(Token.types.operator.eq)) {\n          i++; // Move to next token\n\n          let temp_def = \"\";\n          while (!checkTokenType(Token.types.whitespace.newline)) {\n            // Collect variable definition\n            temp_def += \" \" + tokens[i].value;\n            i++; // Move to next token\n          }\n\n          task.addVariableDefinition(temp_def.trim());\n          i++; // Move to next token\n        }\n        // Variable declaration\n        else if (!checkTokenType(Token.types.whitespace.newline)) {\n          tokenTypeError(\"Expected a newline character '\\\\n'\");\n        }\n      }\n\n      // Answer assignment\n      if (checkTokenType(Token.types.answer)) {\n        // Find answer in questions answer\n        let answer = task.findAnswer(tokens[i].value);\n        if (answer == undefined)\n          semanticError(\"Answer \" + tokens[i].value + \" is undefined.\");\n\n        console.log(\"ANSW\", answer.name);\n        i++; // Move to next token\n\n        // Look for '.correct' or '.incorrect'\n        if (!checkTokenType(Token.types.special.accessor))\n          tokenTypeError(\"Expected accessor .correct or .incorrect\");\n\n        // Save answer accessor type\n        let answerType = tokens[i].value;\n        i++; // Move to next token\n\n        // Look for =\n        if (!checkTokenType(Token.types.operator.eq))\n          tokenTypeError(\"Expected an equal sign =\");\n\n        i++; // Move to next token\n\n        // Look for [\n        if (!checkTokenType(Token.types.special.lBracket))\n          tokenTypeError(\"Expected an opening bracket [\");\n\n        i++; // Move to next token\n\n        // Look for newline\n        if (!checkTokenType(Token.types.whitespace.newline))\n          tokenTypeError(\"Expected a newline character '\\\\n'\");\n\n        i++; // Move to next token\n\n        // Exclude ]\n        if (checkTokenType(Token.types.special.rBracket))\n          tokenTypeError(\"Expected a value between [ ] brackets\");\n\n        console.log(answerType);\n\n        // For each answer definition\n        while (!checkTokenType(Token.types.special.rBracket)) {\n          // Collect definition\n          let answerDefinition = \"\";\n\n          while (\n            !checkTokenType(Token.types.special.comma) &&\n            !checkTokenType(Token.types.whitespace.newline)\n          ) {\n            answerDefinition += tokens[i].value;\n            i++; // Move to next token\n          }\n\n          if (checkTokenType(Token.types.special.comma)) i++; // Move to next token\n\n          // Save definition based on accessor type\n          if (answerType == \".correct\") {\n            answer.correct.push(answerDefinition);\n          }\n          if (answerType == \".incorrect\") {\n            answer.incorrect.push(answerDefinition);\n          }\n\n          i++; // Move to next token\n        }\n      }\n\n      i++; // Move to next token\n\n      console.log(!checkTokenType(Token.types.keyword));\n    }\n  }\n\n  function parseRanges() {\n    if (!checkTokenType(Token.types.keyword))\n      tokenTypeError(\"Expected keyword, starting with #\");\n    if (!checkTokenValue(\"#ranges\"))\n      tokenValueError(\"Expected '#ranges' keyword\");\n\n    i++; // Move to next token\n    skipNewLines();\n\n    while (i < tokens.length) {\n      if (!checkTokenType(Token.types.variable))\n        tokenTypeError(\"Exptected variable\");\n\n      // Load variable\n      let variable = task.findVariable(tokens[i].value);\n      if (variable == undefined)\n        semanticError(\"Variable \" + tokens[i].value + \" is undefined.\");\n      i++; // Move to next token\n\n      if (!checkTokenType(Token.types.operator.eq))\n        tokenTypeError(\"Expected opeator =\");\n      i++; // Move to next token\n\n      if (!checkTokenType(Token.types.text))\n        tokenTypeError(\"Expected text type\");\n      if (!checkTokenValue(\"range\")) tokenValueError(\"Expected 'range' text\");\n      i++; // Move to next token\n\n      // (\n      if (!checkTokenType(Token.types.special.lParenth))\n        tokenTypeError(\"Expected left parenthesis (\");\n      i++; // Move to next token\n\n      // start\n      if (!checkTokenType(Token.types.number))\n        tokenTypeError(\"Expected a number\");\n      variable.range.start = tokens[i].value;\n      i++; // Move to next token\n\n      if (!checkTokenType(Token.types.special.comma))\n        tokenTypeError(\"Expected comma separator ,\");\n      i++; // Move to next token\n\n      // end\n      if (!checkTokenType(Token.types.number))\n        tokenTypeError(\"Expected a number\");\n      variable.range.end = tokens[i].value;\n      i++; // Move to next token\n\n      if (!checkTokenType(Token.types.special.comma))\n        tokenTypeError(\"Expected comma separator ,\");\n      i++; // Move to next token\n\n      // step\n      if (!checkTokenType(Token.types.number))\n        tokenTypeError(\"Expected a number\");\n      variable.range.step = tokens[i].value;\n      i++; // Move to next token\n\n      // )\n      if (!checkTokenType(Token.types.special.rParenth))\n        tokenTypeError(\"Expected closing right parenthesis )\");\n      i++; // Move to next token\n\n      skipNewLines();\n    }\n  }\n\n  function skipNewLines() {\n    while (\n      i < tokens.length &&\n      checkTokenType(Token.types.whitespace.newline)\n    ) {\n      i++;\n    }\n  }\n\n  /* ------------------------------------------------- */\n  // Checkers\n  function checkTokenType(type) {\n    if (i >= tokens.length) return false;\n    return tokens[i].type == type ? true : false;\n  }\n\n  function checkTokenValue(value) {\n    if (i >= tokens.length) return false;\n    return tokens[i].value == value ? true : false;\n  }\n\n  // Errors\n  function tokenTypeError(_errMsg = \"Type error message...\") {\n    throw { type: \"Token Type Error\", message: _errMsg };\n  }\n  function tokenValueError(_errMsg = \"Value error message...\") {\n    throw { type: \"Token Value Error\", message: _errMsg };\n  }\n\n  function semanticError(_errMsg) {\n    throw { type: \"Semantic Error\", message: _errMsg };\n  }\n}\n\n/* --------------------------------- */\n\nimport math from \"mathjs\";\n\nexport class ConcreteTask {\n  constructor() {\n    this.text = \"\";\n    this.questions = [];\n    this.answers = [];\n    this.variables = [];\n  }\n}\n\nexport class Generator {\n  constructor() {}\n\n  static generate(task, options) {\n    // Handle generation\n    let result = ConcreteTask();\n\n    // Copy text and arrays\n    result.text = task.text;\n    result.questions = [...task.questions];\n    result.answers = [...task.answers];\n    result.variables = [...task.variables];\n\n    //\n\n    return result;\n\n    /* ============== */\n\n    //\n    function checkRefferences(variable) {}\n\n    //\n    function getRandomNumber(start, end, step) {}\n\n    //\n    function error(_errMsg) {\n      throw { message: _errMsg };\n    }\n  }\n}\n"]}]}