{"remainingRequest":"/home/dc/Documents/BP/vue-bp-web/node_modules/babel-loader/lib/index.js!/home/dc/Documents/BP/vue-bp-web/node_modules/eslint-loader/index.js??ref--14-0!/home/dc/Documents/BP/vue-bp-web/src/myfiles/tokenizer.js","dependencies":[{"path":"/home/dc/Documents/BP/vue-bp-web/src/myfiles/tokenizer.js","mtime":1645047526213},{"path":"/home/dc/Documents/BP/vue-bp-web/babel.config.js","mtime":1642185636988},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/cache-loader/dist/cjs.js","mtime":1642114936856},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/babel-loader/lib/index.js","mtime":1642114938312},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/eslint-loader/index.js","mtime":1642114937120}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/dc/Documents/BP/vue-bp-web/src/myfiles/tokenizer.js"],"names":["Token","type","value","START","VARIABLE","KEYWORD","ANSWER","TEXT","tokenize","data","buffer","tokens","STATE","i","length","character","push","test","isNaN"],"mappings":"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","sourcesContent":["//const fs = require('fs');       // import fs module\n//const math = require('mathjs'); // import math.js module\n\n// Simple token class\nexport class Token\n{\n    constructor(type, value) \n    {\n        this.type = type;\n        this.value = value;\n    }\n}\n\n// Automata states\nexport const START = 0, VARIABLE = 11, KEYWORD = 22, ANSWER = 33, TEXT = 44;\n\n/*\n    Create tokens from the input text.\n    Input: file_name - markup saved in text file\n    Output: tokens - array of tokens\n*/\nexport function tokenize(data)\n{    \n    // Get input text\n    //var data = fs.readFileSync(file_name, 'utf-8');\n    /* var data = `#text Spočítajte. \n    \n    #question $x1 + $x2 = @r \n    \n    #definitions \n    $x1 \n    $x2 \n    \n    @r.correct = [\n        $x1 + $x2\n    ]\n    @r.incorrect = [\n        $x1 + $x2 + 1,\n        $x1 + $x2 - 1,\n        $x1 - $x2\n    ]\n    \n    #ranges\n    $x1 = range(0, 100, 1)\n    $x2 = range(0, 100, 1)`; */\n\n    // Initialize buffer and tokens array\n    var buffer = \"\", tokens = [];\n\n    var STATE = START;\n    for ( var i = 0; i < data.length; i++ ) {\n\n        var character = data[i];\n\n        //console.log( character );\n\n        switch ( STATE ) \n        {\n            case START:\n            {\n                // 'Append' first character\n                buffer = character;\n\n                // Analyze character\n                switch ( character )\n                {\n                    case '$': { STATE = VARIABLE; break; }\n\n                    case '#': { STATE = KEYWORD; break; }\n\n                    case '@': { STATE = ANSWER; break; }\n\n                    case ' ': break;\n                    case '\\t': break;\n                    case '\\n': {  tokens.push( new Token('newline', character)); break; }\n\n                    case '(': {  tokens.push( new Token('l-parenth', character)); break; }\n                    case ')': {  tokens.push( new Token('r-parenth', character)); break; }\n                    case '[': {  tokens.push( new Token('l-bracket', character)); break; }\n                    case ']': {  tokens.push( new Token('r-bracket', character)); break; }\n                    case '+': {  tokens.push( new Token('add', character)); break; }\n                    case '-': {  tokens.push( new Token('sub', character)); break; }\n                    case '/': {  tokens.push( new Token('div', character)); break; }\n                    case '*': {  tokens.push( new Token('mul', character)); break; }\n                    case ',': {  tokens.push( new Token('comma', character)); break; }\n                    case '=': {  tokens.push( new Token('eq', character)); break; }\n                    case '^': {  tokens.push( new Token('caret', character)); break; }\n\n                    default: \n                    { \n                        // Lookahead for the next character\n                        if ( /[\\s$#@()+\\-\\^/*,=\\[\\]]/.test( data[i+1] ) ) { // eslint-disable-line\n                            \n                            if ( ! isNaN( +buffer ) ) \n                            {\n                                tokens.push(new Token('number', buffer));\n                            }\n                            else \n                            { \n                                tokens.push(new Token('text', buffer));\n                            }\n                            \n                            break;\n                        }\n\n                        STATE = TEXT; \n                        break;\n                    }\n                }   \n                break;\n            }\n\n            // Handle variabes ( starting with $ )\n            case VARIABLE: \n            {\n                // Test current character\n                if ( /[a-zA-Z0-9\\_]/.test( character ) ) // eslint-disable-line\n                {\n                    buffer += character;\n\n                    // Lookahead to determine next token  \n                    if ( !( /[a-zA-Z0-9\\_]/.test(data[i+1]) ) ) // eslint-disable-line\n                    {\n                        tokens.push(new Token('var', buffer));\n                        STATE = START;\n                        break;\n                    }\n                    \n                    STATE = VARIABLE;\n                    break; \n                }\n                else \n                {\n                    tokens.push(buffer);\n                    STATE = START;\n                    break;\n                }\n            }\n\n            // Handle keywords ( starting with # )\n            case KEYWORD: \n            {\n                // Test current character\n                if ( /[a-zA-Z]/.test( character ) ) // eslint-disable-line\n                {\n                    buffer += character;\n\n                    // Lookahead to determine next token\n                    if ( !( /[a-zA-Z]/.test(data[i+1]) ) ) // eslint-disable-line\n                    {\n                        tokens.push(new Token('keyword', buffer));\n                        STATE = START;\n                        break;\n                    }\n                    \n                    STATE = KEYWORD;\n                    break;\n                }\n                else\n                {\n                    tokens.push(new Token('hash', buffer));\n                    STATE = START;\n                    break;\n                }\n            }\n\n            // Handle answer ( starts with @ )\n            case ANSWER:\n            {\n                // Test current character \n                if ( /[a-zA-Z0-9\\_]/.test( character ) ) // eslint-disable-line\n                {\n                    buffer += character;\n\n                    // Lookahead to determine next token\n                    if ( !( /[a-zA-Z0-9\\_]/.test(data[i+1]) ) ) // eslint-disable-line\n                    {    \n                        tokens.push(new Token('answer', buffer));\n                        STATE = START;\n                        break;\n                    }\n                    \n                    STATE = ANSWER;\n                    break; \n                }\n                else \n                {\n                    tokens.push(new Token('at', buffer));\n                    STATE = START;\n                    break;\n                }\n            }\n\n            // Handle text\n            case TEXT: \n            {\n                // Lookahead for next character\n                // determine whether there are more character to the text or not\n                // if any of these return true then text ended\n                if( /[\\s$#@()+\\-\\^/*,=\\[\\]]/.test( data[i+1] ) ) // eslint-disable-line\n                {\n                    buffer += character;\n\n                    // check if we hit a number\n                    if ( ! isNaN( +buffer ) ) \n                    {\n                        tokens.push(new Token('number', buffer));\n                    }\n                    // check if we hit accessor to an answer\n                    else if ( buffer[0] == '.' ) \n                    {\n                        tokens.push(new Token('accessor', buffer));\n                    } \n                    // we ended a text section\n                    else \n                    {\n                        tokens.push(new Token('text', buffer));\n                    }\n                    \n                    STATE = START;\n                    break;\n                }\n\n                buffer += character;\n                break;\n            }\n        }\n    }\n\n    return tokens;\n}"]}]}