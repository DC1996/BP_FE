{"remainingRequest":"/home/dc/Documents/BP/vue-bp-web/node_modules/babel-loader/lib/index.js!/home/dc/Documents/BP/vue-bp-web/node_modules/eslint-loader/index.js??ref--14-0!/home/dc/Documents/BP/vue-bp-web/src/myfiles/extractorModule.js","dependencies":[{"path":"/home/dc/Documents/BP/vue-bp-web/src/myfiles/extractorModule.js","mtime":1646949129847},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/cache-loader/dist/cjs.js","mtime":1642114936856},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/babel-loader/lib/index.js","mtime":1642114938312},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/eslint-loader/index.js","mtime":1642114937120}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/dc/Documents/BP/vue-bp-web/src/myfiles/extractorModule.js"],"names":["Token","answerInfo","variableInfo","Task","Question","Variable","Answer","Range","constructor","_start","_end","_step","start","end","step","toString","Extractor","task","task_text","questions","parsedVariables","addedVariables","parsedAnswers","addUniqueVars","tokens","variables","forEach","variable","visible","token","variable_name","value","find","parsedVar","name","push","addUniqueAnswers","answer_name","answer","answers","parsedAns","extractVariables","filter","type","types","extractAnswers","generateText","text","concat","question","length","definition","trim","correct","i","incorrect","range","testRange","fullRange","console","log"],"mappings":"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","sourcesContent":["import { Token } from \"./tokenizer\";\nimport {\n  answerInfo,\n  variableInfo,\n  Task,\n  Question,\n  Variable,\n  Answer,\n} from \"./taskHandler\";\n\nexport class Range {\n  // Attributes\n  constructor() {\n    this._start = \"\";\n    this._end = \"\";\n    this._step = \"\";\n  }\n\n  // Setters\n  set start(start) {\n    this._start = start;\n  }\n  set end(end) {\n    this._end = end;\n  }\n  set step(step) {\n    this._step = step;\n  }\n\n  // Getters\n  get start() {\n    return this._start;\n  }\n  get end() {\n    return this._end;\n  }\n  get step() {\n    return this._step;\n  }\n\n  get toString() {\n    return \"(\" + this._start + \",\" + this._end + \",\" + this._step + \")\";\n  }\n}\n\n/*\n// Variable\nexport class Variable {\n  // Attributes\n  constructor() {\n    this._name = \"\";\n    this._definition = \"\";\n    this._range = \"\";\n  }\n\n  // Setters\n  set name(name) {\n    this._name = name;\n  }\n  set definition(defintion) {\n    this._definition = defintion;\n  }\n  set range(range) {\n    this._range = range;\n  }\n\n  // Getters\n  get name() {\n    return this._name;\n  }\n  get definition() {\n    return this._definition;\n  }\n  get range() {\n    return this._range;\n  }\n}\n*/\n\n/**********\n/*\n  Class used to export data about variables and generate math markup language code*\nexport class Extractor {\n  constructor() {\n    this.task = new Task();\n\n    this.task_text = \"\";\n    this.questions = [];\n\n    this.parsedVariables = [];\n    this.addedVariables = [];\n\n    this.parsedAnswers = [];\n  }\n\n  // Save parsed variables\n  addUniqueVars(tokens) {\n    // Assume list of variables has changed\n    // and set visiblity to false for all variables\n    this.parsedVariables.forEach((variable) => {\n      variable.visible = false;\n    });\n\n    tokens.forEach((token) => {\n      let variable_name = token.value;\n\n      let variable = this.parsedVariables.find(\n        (parsedVar) => parsedVar.name == variable_name\n      );\n      // Add all variables that aren't in the list already\n      if (!variable) {\n        variable = new variableInfo(variable_name);\n        this.parsedVariables.push(variable);\n      } else {\n        // Set visiblity for parsed variables\n        variable.visible = true;\n      }\n    });\n  }\n\n  // Save parsed answers\n  addUniqueAnswers(tokens) {\n    tokens.forEach((token) => {\n      let answer_name = token.value;\n\n      let answer = this.parsedAnswers.find(\n        (parsedAns) => parsedAns.name == answer_name\n      );\n      // Add all variables that aren't in the list already\n      if (!answer) {\n        answer = new answerInfo(answer_name);\n        this.parsedAnswers.push(answer);\n      } else {\n        // Set visiblity for parsed variables\n        answer.visible = true;\n      }\n    });\n  }\n\n  // Extract variables from token stream\n  extractVariables(tokens) {\n    // Filter variables from tokens and add only once\n    this.addUniqueVars(\n      tokens.filter((token) => token.type == Token.types.variable)\n    );\n\n    return this.parsedVariables;\n  }\n\n  // Extract answers from token stream\n  extractAnswers(tokens) {\n    // Filter answers from tokens and add only once\n    this.addUniqueAnswers(\n      tokens.filter((token) => token.type == Token.types.answer)\n    );\n\n    return this.parsedAnswers;\n  }\n\n  generateText() {\n    let text = \"\";\n\n    // TEXT \n    // Add task text\n    text = text.concat(\"#text \\n\", this.task_text, \"\\n\\n\");\n\n    // QUESTIONS\n    // Add questions\n    this.questions.forEach((question) => {\n      text = text.concat(\"#question \\n\", question.text, \"\\n\\n\");\n    });\n    if (this.questions.length == 0) {\n      text = text.concat(\"#question \\n\\n\");\n    }\n\n    // DEFINITIONS\n    // Add definitions of parsed variables from given text and questions\n    text = text.concat(\"#definitions \\n\");\n    this.parsedVariables.forEach((variable) => {\n      // Variable is up-to-date and could have been set by the user\n      if (variable.visible) {\n        // Definitions contains valid characters\n        if (variable.definition.trim() != \"\") {\n          // Add full defintion\n          text = text.concat(variable.name, \" = \", variable.definition, \"\\n\");\n        } else {\n          // Add declaration only\n          text = text.concat(variable.name, \"\\n\");\n        }\n      }\n    });\n\n    // Add definitions of manually added variables by the user\n    this.addedVariables.forEach((variable) => {\n      // Variable is up-to-date and could have been set by the user\n      if (variable.visible) {\n        // Definitions contains valid characters\n        if (variable.definition.trim() != \"\") {\n          // Add full defintion\n          text = text.concat(variable.name, \" = \", variable.definition, \"\\n\");\n        } else {\n          // Add declaration only\n          text = text.concat(variable.name, \"\\n\");\n        }\n      }\n    });\n\n    // Add correct option(s) for each answer\n    this.parsedAnswers.forEach((answer) => {\n      // Answer is up-to-date and could ave been set by the user\n      if (answer.visible) {\n        text = text.concat(answer.name, \".correct = [ \\n\");\n        answer.correct.forEach((correct, i) => {\n          if (i > 0) {\n            text = text.concat(\", \\n\");\n          }\n\n          text = text.concat(correct);\n        });\n        text = text.concat(\"\\n ] \\n\");\n      }\n    });\n\n    // Add incorrect option(s) for each answer\n    this.parsedAnswers.forEach((answer) => {\n      // Answer is up-to-date and could ave been set by the user\n      if (answer.visible) {\n        text = text.concat(answer.name, \".incorrect = [ \\n\");\n        answer.incorrect.forEach((incorrect, i) => {\n          if (i > 0) {\n            text = text.concat(\", \\n\");\n          }\n\n          text = text.concat(incorrect);\n        });\n        text = text.concat(\"\\n ] \\n\");\n      }\n    });\n\n    // RANGES\n    // Add ranges for variables\n    // Add definitions of parsed variables\n    text = text.concat(\"\\n#ranges \\n\");\n    this.parsedVariables.forEach((variable) => {\n      // Variable is up-to-date and could have been set by the user\n      if (variable.visible) {\n        // Variable can produce a valid range string\n        if (variable.testRange.fullRange() != \"\") {\n          // Add range defintion\n          text = text.concat(\n            variable.name,\n            \" = range\",\n            variable.testRange.fullRange(),\n            \"\\n\"\n          );\n        }\n      }\n    });\n\n    // Add ranges for added variables\n    this.addedVariables.forEach((variable) => {\n      // Variable is up-to-date and could have been set by the user\n      if (variable.visible) {\n        // Variable can produce a valid range string\n        if (variable.testRange.fullRange() != \"\") {\n          // Add range defintion\n          text = text.concat(\n            variable.name,\n            \" = range\",\n            variable.testRange.fullRange(),\n            \"\\n\"\n          );\n        }\n      }\n    });\n\n    text = text.concat(\"\\n\\n\");\n\n    console.log(text); // logging\n\n    return text;\n  }\n}\n******/\n\n/*\n  Class used to export data about variables and generate math markup language code\n*/\nexport class Extractor {\n  constructor() {\n    this.task = new Task();\n\n    this.task_text = \"\";\n    this.questions = [];\n\n    this.parsedVariables = [];\n    this.addedVariables = [];\n\n    this.parsedAnswers = [];\n  }\n\n  // Save parsed variables\n  addUniqueVars(tokens) {\n    // Assume list of variables has changed\n    // and set visiblity to false for all variables\n    this.task.variables.forEach((variable) => {\n      variable.visible = false;\n    });\n\n    tokens.forEach((token) => {\n      let variable_name = token.value;\n\n      let variable = this.task.variables.find(\n        (parsedVar) => parsedVar.name == variable_name\n      );\n      // Add all variables that aren't in the list already\n      if (!variable) {\n        variable = new Variable(variable_name);\n        this.task.variables.push(variable);\n      } else {\n        // Set visiblity for parsed variables\n        variable.visible = true;\n      }\n    });\n  }\n\n  // Save parsed answers\n  addUniqueAnswers(tokens) {\n    tokens.forEach((token) => {\n      let answer_name = token.value;\n\n      let answer = this.task.answers.find(\n        (parsedAns) => parsedAns.name == answer_name\n      );\n      // Add all variables that aren't in the list already\n      if (!answer) {\n        answer = new Answer(answer_name);\n        this.task.answers.push(answer);\n      } else {\n        // Set visiblity for parsed variables\n        answer.visible = true;\n      }\n    });\n  }\n\n  // Extract variables from token stream\n  extractVariables(tokens) {\n    // Filter variables from tokens and add only once\n    this.addUniqueVars(\n      tokens.filter((token) => token.type == Token.types.variable)\n    );\n\n    return this.task.variables;\n  }\n\n  // Extract answers from token stream\n  extractAnswers(tokens) {\n    // Filter answers from tokens and add only once\n    this.addUniqueAnswers(\n      tokens.filter((token) => token.type == Token.types.answer)\n    );\n\n    return this.task.answers;\n  }\n\n  generateText() {\n    let text = \"\";\n\n    /* TEXT */\n    // Add task text\n    text = text.concat(\"#text \\n\", this.task.text, \"\\n\\n\");\n\n    /* QUESTIONS */\n    // Add questions\n    this.task.questions.forEach((question) => {\n      text = text.concat(\"#question \\n\", question.text, \"\\n\\n\");\n    });\n    if (this.task.questions.length == 0) {\n      text = text.concat(\"#question \\n\\n\");\n    }\n\n    /* DEFINITIONS */\n    // Add definitions of parsed variables from given text and questions\n    text = text.concat(\"#definitions \\n\");\n    this.task.variables.forEach((variable) => {\n      // Variable is up-to-date and could have been set by the user\n      if (variable.visible) {\n        // Definitions contains valid characters\n        if (variable.definition.trim() != \"\") {\n          // Add full defintion\n          text = text.concat(variable.name, \" = \", variable.definition, \"\\n\");\n        } else {\n          // Add declaration only\n          text = text.concat(variable.name, \"\\n\");\n        }\n      }\n    });\n\n    // Add definitions of manually added variables by the user\n    this.addedVariables.forEach((variable) => {\n      // Variable is up-to-date and could have been set by the user\n      if (variable.visible) {\n        // Definitions contains valid characters\n        if (variable.definition.trim() != \"\") {\n          // Add full defintion\n          text = text.concat(variable.name, \" = \", variable.definition, \"\\n\");\n        } else {\n          // Add declaration only\n          text = text.concat(variable.name, \"\\n\");\n        }\n      }\n    });\n\n    // Add correct option(s) for each answer\n    this.task.answers.forEach((answer) => {\n      // Answer is up-to-date and could ave been set by the user\n      if (answer.visible) {\n        text = text.concat(answer.name, \".correct = [ \\n\");\n        answer.correct.forEach((correct, i) => {\n          if (i > 0) {\n            text = text.concat(\", \\n\");\n          }\n\n          text = text.concat(correct);\n        });\n        text = text.concat(\"\\n ] \\n\");\n      }\n    });\n\n    // Add incorrect option(s) for each answer\n    this.task.answers.forEach((answer) => {\n      // Answer is up-to-date and could ave been set by the user\n      if (answer.visible) {\n        text = text.concat(answer.name, \".incorrect = [ \\n\");\n        answer.incorrect.forEach((incorrect, i) => {\n          if (i > 0) {\n            text = text.concat(\", \\n\");\n          }\n\n          text = text.concat(incorrect);\n        });\n        text = text.concat(\"\\n ] \\n\");\n      }\n    });\n\n    /* RANGES */\n    // Add ranges for variables\n    // Add definitions of parsed variables\n    text = text.concat(\"\\n#ranges \\n\");\n    this.task.variables.forEach((variable) => {\n      // Variable is up-to-date and could have been set by the user\n      if (variable.visible) {\n        // Variable can produce a valid range string\n        if (\n          variable.range.start != \"\" &&\n          variable.range.end != \"\" &&\n          variable.range.step != \"\"\n        ) {\n          // Add range defintion\n          text = text.concat(\n            variable.name,\n            \" = range(\",\n            variable.range.start,\n            \",\",\n            variable.range.end,\n            \",\",\n            variable.range.step,\n            \")\\n\"\n          );\n        }\n      }\n    });\n\n    // Add ranges for added variables\n    this.addedVariables.forEach((variable) => {\n      // Variable is up-to-date and could have been set by the user\n      if (variable.visible) {\n        // Variable can produce a valid range string\n        if (variable.testRange.fullRange() != \"\") {\n          // Add range defintion\n          text = text.concat(\n            variable.name,\n            \" = range\",\n            variable.testRange.fullRange(),\n            \"\\n\"\n          );\n        }\n      }\n    });\n\n    text = text.concat(\"\\n\\n\");\n\n    console.log(text); // logging\n\n    return text;\n  }\n}\n"]}]}