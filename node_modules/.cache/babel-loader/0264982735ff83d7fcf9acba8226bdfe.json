{"remainingRequest":"/home/dc/Documents/BP/vue-bp-web/node_modules/babel-loader/lib/index.js!/home/dc/Documents/BP/vue-bp-web/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/dc/Documents/BP/vue-bp-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dc/Documents/BP/vue-bp-web/src/components/createtaskpage.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/dc/Documents/BP/vue-bp-web/src/components/createtaskpage.vue","mtime":1646999224443},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/cache-loader/dist/cjs.js","mtime":1642114936856},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/babel-loader/lib/index.js","mtime":1642114938312},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/cache-loader/dist/cjs.js","mtime":1642114936856},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/vue-loader/lib/index.js","mtime":1642114938760}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["createtaskpage.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <v-container \n        class=\"d-flex flex-column justify-start align-center mt-10 b-g rounded-lg\">\n        \n        <h4 \n            class=\"t-t-color text-h5 my-4 font-weight-medium\" \n            contenteditable spellcheck=\"false\" @blur=\"setName\"> \n            {{ this.name }} \n        </h4>\n\n        <v-container fluid rounded label=\"Task\" class=\"d-flex flex-row\" style=\"height: 100%;\">\n            <v-col cols=\"16\" class=\"mx-2 py-0 px-2 ma-0 d-flex flex-column justify-space-between\">\n            <div class=\"d-flex flex-column justify-start flex-grow-0\">\n                <h3 class=\"ml-2 mb-1\"> Task text </h3>\n                <v-textarea text-narrow\n                    spellcheck=\"false\"\n                    background-color=\"white\" \n                    color=\"black\"\n                    id=\"task-text\" class=\"text-caption pb-1\"\n                    v-model=\"text\" \n                    solo no-resize hide-details rows=\"4\">\n                </v-textarea>\n                <h3 class=\"ml-2 mb-0 mt-2\"> Questions </h3>\n                <div class=\"d-flex flex-column justify-start\" style=\"height: 220px; overflow-y: auto\">\n                    <div\n                        class=\"d-flex flex-row align-center\" \n                        v-for=\"(question, qind) in ext_text.task.questions\" :key=\"qind\">\n                        <v-text-field\n                            :label=\"'Task question #' + qind\"\n                            placeholder=\"eq.: What is the result? @res\"\n                            solo hide-details\n                            class=\"my-1 d-flex flex-grow-1\"\n                            v-model=\"ext_text.task.questions[qind].text\"\n                        ></v-text-field>\n                        <v-btn \n                            @click=\"removeQuestion(qind)\"\n                            icon plain class=\"mx-2\">\n                            <v-icon color=\"red\">mdi-close</v-icon>\n                        </v-btn>\n                    </div>\n                    <v-btn \n                        @click=\"addQuestion\"\n                        depressed class=\"my-1\">\n                        <v-icon>mdi-plus</v-icon> Add question \n                    </v-btn>\n                </div>\n            </div>\n            <div class=\"d-flex flex-row mt-2 mb-1 justify-self-end\">\n                <v-btn class=\"mx-1\" @click=\"parseText\">Parse</v-btn>\n                <v-btn class=\"mx-1\" @click=\"previewTask\">Preview</v-btn>\n                <v-btn class=\"mx-1\" @click=\"saveText\">Save</v-btn>\n                <v-btn class=\"mx-1\" @click=\"restoreText\">Restore</v-btn>\n            </div>\n\n            <v-overlay :value=\"taskOverlay\" :light=\"true\" :dark=\"false\" >\n                    <v-sheet \n                        elevation=\"4\" width=\"650\" \n                        class=\"pa-4 ma-2 d-flex flex-column justify-flex-start align-flex-start rounded-lg\"\n                    >\n                    <v-btn plain icon @click=\"taskOverlay = false\" class=\"close-button mt-4 mr-6 pa-0 shrink\">\n                            <v-icon color=\"danger\">mdi-close</v-icon>\n                        </v-btn>\n\n                    <h3>{{ task_text }}</h3>\n                    <div class=\"d-flex flex-column ma-2 pa-1\" v-for=\"(q, i) in questions\" :key=\"'q' + i\">\n                        <h4 class=\"ma-1\"> {{ q.text }} </h4>\n                        <div class=\"ma-1 pa-1\" v-if=\"q.text.includes(answers[i].name)\">\n                            <p v-for=\"(item, index) in answers[i].correct_values\" :key=\"index\" > a) {{item}} </p>\n                            <p v-for=\"(item, index) in answers[i].incorrect_values\" :key=\"index\" > {{ String.fromCharCode(98 + index) + ')'}} {{item}} </p>\n                        </div>\n                    </div>\n\n                    <!-- <v-btn @click=\"taskOverlay = false\">Close</v-btn> -->\n                    </v-sheet>\n            </v-overlay>\n\n            </v-col>\n            <v-col cols=\"16\" class=\"mx-2 pa-0\">\n                <h3 class=\"ml-2 mb-1\"> Variables </h3>          \n                <div class=\"d-flex flex-row flex-wrap align-center ma-0 pa-0 minus\">\n                    <div v-for=\"(variable, ind) in ext_text.task.variables\" :key=\"ind + 'v'\" class=\"ma-0 pa-0\">\n                        <v-chip\n                            v-if=\"variable.visible\"\n                            @click=\"variableInfo(ind)\"\n                            color=\"primary\"\n                            class=\"mx-2 my-1 px-6 py-4 pointer elevation-1\">\n                            {{ variable.name.substr(1) }}\n                        </v-chip>\n                    </div>                    \n                    <v-chip \n                        v-for=\"(variable, i) in ext_text.addedVariables\" :key=\"i + 'av'\"\n                        color=\"primary\"\n                        @click=\"addedVariableInfo(i)\"\n                        class=\"d-flex flex-row justify-center align-center mx-2 my-1 px-3 py-4 pointer elevation-1\">\n                        {{ variable.name.substr(1) }}\n                    </v-chip>\n                    <div>\n                    <v-tooltip right>\n                        <template v-slot:activator=\"{ on, attrs }\">\n                            <v-chip \n                            v-bind=\"attrs\"\n                            v-on=\"on\"\n                            @click=\"addVariable()\"\n                            color=\"secondary\"\n                            class=\"mx-2 my-1 px-2 py-2 pointer elevation-2\">\n                            <v-icon small>mdi-plus</v-icon>\n                            </v-chip>\n                        </template>\n                        <span>Add a variable</span>\n                    </v-tooltip>\n                    </div>\n                </div>\n                <v-overlay\n                    tabindex=\"0\"\n                    @keydown.esc=\"overlayV = false\"\n                    :value=\"overlayV\" :light=\"true\" :dark=\"false\" v-if=\"ext_text.task.variables.length != 0\">\n                    <v-sheet \n                        elevation=\"4\" width=\"500\" \n                        class=\"pa-4 ma-2 mt-0 pt-2 d-flex flex-column justify-flex-start align-flex-start rounded-lg\"\n                    >\n                        <v-btn plain icon @click=\"overlayV = false\" class=\"close-button mt-4 mr-6 pa-0 shrink\">\n                            <v-icon color=\"danger\">mdi-close</v-icon>\n                        </v-btn>\n                        <h2 class=\"ma-2 mt-3\"> {{ ext_text.task.variables[indexV].name }} </h2>\n                        <p class=\"ma-2\"> Definition </p>\n                        <v-text-field \n                            label=\"\" placeholder=\"e.g.: ( $a * 2 ) + 1\" \n                            v-model=\"ext_text.task.variables[indexV].definition\" \n                            outlined dense class=\"shrink mx-2\"> \n                            {{ ext_text.task.variables[indexV].definition }} \n                        </v-text-field>\n                        <p class=\"ma-2 mt-0\"> Range {{ ext_text.task.variables[indexV].range.fullRange() }} </p>\n                        <v-row class=\"d-flex flex-row flex-nowrap px-3\">\n                            <v-text-field \n                                label=\"Start\" v-model=\"ext_text.task.variables[indexV].range.start\" \n                                outlined dense class=\"shrink mx-2 mt-3\">\n                            </v-text-field>\n                            <v-text-field \n                                label=\"End\" v-model=\"ext_text.task.variables[indexV].range.end\" \n                                outlined dense class=\"shrink mx-2 mt-3\">\n                            </v-text-field>\n                            <v-text-field \n                                label=\"Step\" v-model=\"ext_text.task.variables[indexV].range.step\"\n                                outlined dense class=\"shrink mx-2 mt-3\">\n                            </v-text-field>\n                        </v-row>\n                    </v-sheet>\n                </v-overlay>\n                <v-overlay \n                    :value=\"overlayAddV\" :light=\"true\" :dark=\"false\" v-if=\"ext_text.addedVariables.length != 0\">\n                    <v-sheet \n                        elevation=\"4\" width=\"500\" \n                        class=\"pa-4 ma-2 mt-0 pt-2 d-flex flex-column justify-flex-start align-flex-start rounded-lg\"\n                    >\n                        <v-btn plain icon @click=\"overlayAddV = false\" class=\"close-button mt-4 mr-6 pa-0 shrink\">\n                            <v-icon color=\"danger\">mdi-close</v-icon>\n                        </v-btn>\n                        <h2 class=\"ma-2 mt-3\" contenteditable spellcheck=\"false\" @blur=\"setVariableName\"> \n                            {{ ext_text.addedVariables[indexAV].name }}\n                        </h2>\n                        <p class=\"ma-2\"> Definition </p>\n                        <v-text-field \n                            label=\"\" \n                            placeholder=\"e.g.: ( $a * 2 ) + 1\" \n                            v-model=\"ext_text.addedVariables[indexAV].definition\" \n                            outlined dense class=\"shrink mx-2\"> \n                            {{ ext_text.addedVariables[indexAV].definition }}\n                        </v-text-field>\n                        <p class=\"ma-2 mt-0\"> Range {{ ext_text.addedVariables[indexAV].testRange.fullRange() }} </p>\n                        <v-row class=\"d-flex flex-row flex-nowrap px-3\">\n                            <v-text-field \n                                label=\"Start\" v-model=\"ext_text.addedVariables[indexAV].testRange.start\" \n                                outlined dense class=\"shrink mx-2 mt-3\">\n                            </v-text-field>\n                            <v-text-field \n                                label=\"End\" v-model=\"ext_text.addedVariables[indexAV].testRange.end\"\n                                outlined dense class=\"shrink mx-2 mt-3\">\n                            </v-text-field>\n                            <v-text-field \n                                label=\"Step\" v-model=\"ext_text.addedVariables[indexAV].testRange.step\" \n                                outlined dense class=\"shrink mx-2 mt-3\">\n                            </v-text-field>\n                        </v-row>\n                    </v-sheet>\n                </v-overlay>\n\n                <h3 class=\"ml-2\">Answers</h3>\n                    <div v-for=\"(answer, i) in ext_text.task.answers\" :key=\"i + 'a'\" class=\"ma-0 pa-0\">\n                        <v-chip\n                            v-if=\"answer.visible\"\n                            @click=\"answerInfo(i)\"\n                            :elevation=\"6\" color=\"primary\"\n                            class=\"mx-2 my-1 px-6 py-4 pointer\">\n                            {{ answer.name.substr(1) }}\n                        </v-chip>\n                    </div>\n                    <v-overlay \n                        :light=\"true\" :dark=\"false\"\n                        :value=\"overlayA\" v-if=\"ext_text.task.answers.length != 0\">\n                        <v-sheet \n                        elevation=\"4\" width=\"500\" \n                        height=\"500px\"\n                        class=\"pa-4 ma-2 mt-0 pt-2 d-flex flex-column justify-flex-start align-flex-start rounded-lg overflow-y-auto\"\n                    >\n                        <v-btn plain icon @click=\"overlayA = false\" class=\"close-button mt-4 mr-6 pa-0 shrink\">\n                            <v-icon color=\"danger\">mdi-close</v-icon>\n                        </v-btn>\n                        <h2 class=\"ma-2 mt-3\" contenteditable spellcheck=\"false\" @blur=\"setVariableName\"> \n                            {{ ext_text.task.answers[indexA].name }}\n                        </h2>\n\n                        <p class=\"ma-2 mt-0\">Correct</p>\n                        <div \n                            class=\"d-flex flex-row\" \n                            v-for=\"(el, i) in ext_text.task.answers[indexA].correct\" :key=\"'el_c' + i\">\n                            <v-text-field \n                                label=\"\" \n                                placeholder=\"e.g.: ( $a * 2 ) + 1\" \n                                v-model=\"ext_text.task.answers[indexA].correct[i]\" \n                                outlined dense class=\"mx-2 my-0\"> \n                                {{ el }}\n                            </v-text-field>\n                            <v-btn\n                                @click=\"removeCorrect(i)\" \n                                icon plain color=\"red\" class=\"mx-2\">\n                                <v-icon>mdi-close</v-icon>\n                            </v-btn>\n                        </div>\n                        <v-btn depressed class=\"mx-2\" @click=\"addCorrect\">\n                            <v-icon>mdi-plus</v-icon>\n                            Add correct answer\n                        </v-btn>\n\n                        \n                        <p class=\"ma-2\">Incorrect</p>\n                        <div \n                            class=\"d-flex flex-row\" \n                            v-for=\"(el, i) in ext_text.task.answers[indexA].incorrect\" :key=\"'el_ic' + i\">\n                            <v-text-field \n                                label=\"\" \n                                placeholder=\"e.g.: ( $a * 2 ) + 1\" \n                                v-model=\"ext_text.task.answers[indexA].incorrect[i]\" \n                                outlined dense class=\"mx-2 my-0\"> \n                                {{ ext_text.task.answers[indexA].incorrect }}\n                            </v-text-field>\n                            <v-btn \n                                @click=\"removeIncorrect(i)\"\n                                icon plain color=\"red\" class=\"mx-2\">\n                                <v-icon>mdi-close</v-icon>\n                            </v-btn>\n                        </div>\n                        <v-btn depressed class=\"mx-2\" @click=\"addIncorrect\">\n                            <v-icon>mdi-plus</v-icon>\n                            Add incorrect answer\n                        </v-btn>\n                        \n                        </v-sheet>\n                    </v-overlay>\n            </v-col>\n\n            <!-- Display quick message for the user -->\n            <v-snackbar v-model=\"infoMessage\" :timeout=\"messageTimeout\" :color=\"this.success ? 'green' : 'red'\" top>\n                <!-- text message -->\n                {{ message }}\n                <!-- close icon -->\n                <template v-slot:action=\"{ attrs }\">\n                    <v-btn plain v-bind=\"attrs\" @click=\"infoMessage = false\">\n                        <v-icon>mdi-close</v-icon>\n                    </v-btn>\n                </template>\n            </v-snackbar>\n            <!-- Display quick message for the user -->\n\n        </v-container>\n\n    </v-container>\n</template>\n\n<script>\n    import { tokenize } from \"../myfiles/tokenizer.js\"\n    import { variableInfo, parseMathLang, Question } from \"../myfiles/taskHandler\"\n    import { randomInt, evaluate } from \"mathjs\";\n    import { Extractor } from \"../myfiles/extractorModule\";\n\n    import TaskDataService from \"../services/taskDataService\";\n\n    export default {\n        data() {\n            return {\n                message: \"\",\n                success: false,\n                infoMessage: false,\n                messageTimeout: 2500,\n                \n                name: \"New Task\",\n                text: \"\",\n                task_text: \"\",\n\n                ext_text: new Extractor(),\n                \n                variables: [],\n                questions: [],\n                answers: [],\n\n                overlayV: false,\n                overlayA: false,\n                overlayAddV: false,\n                taskOverlay: false,\n                indexV: 0,\n                indexAV: 0,\n                indexA: 0,\n            };\n        },\n        computed: {\n            getText() { return this.text; }\n        },\n\n        // Load task depending on navigation origin\n        beforeMount() {\n            console.log(\"taskId from route params\", localStorage.getItem('taskId'))\n\n            // Modify was selected from task history\n            if( this.$route.params.taskId ) \n            {\n                // Save id to localStorage, so we can reload page without lossing the id\n                localStorage.setItem('taskId', this.$route.params.taskId)\n            }\n\n            // Id was saved from route params or if the page was reloaded\n            if ( localStorage.getItem('taskId') )\n            {\n                // Load the task content from the database\n                TaskDataService.get(localStorage.getItem('taskId'))\n                    .then((res) => {\n                        console.log(res);\n\n                        this.name = res.data.name\n                        // this.text = res.data.content\n                        try{\n                            this.ext_text.task = parseMathLang(res.data.content);\n                            this.messageTimeout = 8000;\n                            this.message = \"Parsing: Success\"\n                            this.success = true;\n                            this.infoMessage = true;\n\n                            console.log('OUTPUT: ', this.ext_text.task);\n\n                        } catch (error) {\n                            this.messageTimeout = 12000;\n                            this.message = error.message;\n                            this.success = false;\n                            this.infoMessage = true;\n                        }\n                        // this.ext_text.task = parseMathLang(res.data.content);\n\n                        this.text = this.ext_text.task.text.trim();\n                    })\n                    .catch((err) => {\n                       // console.log(\"ERROR\", err.response.data.message)\n                    })\n            }\n        },\n\n        created() {\n            window.addEventListener('beforeunload', function(event) {\n                event.returnValue = 'Write something'\n                alert(\"wait\")\n            })\n        },\n\n        methods: {\n            setName(e) {\n                this.name = e.target.innerText\n                console.log(\"NAME\",this.name)\n            },\n\n            testext() {\n                // Test extraction\n                this.ext_text.extractVariable(tokenize(this.text));\n            },\n\n            createNewTask() \n            {\n                // Prepare data for sending\n                var data = { name: this.name, content: this.ext_text.generateText() };\n\n                if ( localStorage.getItem('taskId') == null) {\n\n                // Send data to database\n                // Create new entry in database\n                TaskDataService.create(data)\n                    .then((res) => { \n                        console.log(res); \n                        this.message = \"Task saved successfuly.\"\n                        this.success = true;\n                        this.messageTimeout = 2500;\n                        this.infoMessage = true;\n                        localStorage.setItem('taskId', res.data.id)\n                    })\n                    .catch((err) => { \n                        console.log(err);\n                        //this.message = \"Error while saving task.\"\n                        this.message = err.reposnse.data.message\n                        this.success = false\n                        this.messageTimeout = 2500;\n                        this.infoMessage = true\n                     });\n                }\n                \n                // Update existing entry\n                else {\n                    TaskDataService.update( localStorage.getItem('taskId'), data ) \n                        .then((res) => {\n                            console.log(res);\n                            this.message = res.data.message\n                            this.success = true;\n                            this.infoMessage = true;\n                        })\n                        .catch((err) => {\n                            this.message = err.reposnse.data.message\n                            this.success = false\n                            this.infoMessage = true\n                        })\n                }\n            },\n\n            variableInfo : function(i) {\n                this.indexV = i\n                this.overlayV = true\n            },\n            addedVariableInfo: function(i) {\n                this.indexAV = i\n                this.overlayAddV = true;\n            },\n            answerInfo: function(i) {\n                this.indexA = i\n                this.overlayA = true\n            },\n            previewTask : function () {\n\n                console.log(tokenize(this.text));\n\n                // this.taskOverlay = true\n\n                // localStorage.setItem('data', this.ext_text.generateText());\n            },\n            saveText: function() {\n                localStorage.setItem('data', this.text);\n\n                this.createNewTask();\n            },\n            restoreText: function() {\n\n                try{\n                    let result = parseMathLang(this.text);\n                    this.messageTimeout = 8000;\n                    this.message = \"Parsing: Success\"\n                    this.success = true;\n                    this.infoMessage = true;\n\n                    console.log('OUTPUT: ', result);\n\n                } catch (error) {\n                    this.messageTimeout = 12000;\n                    this.message = error.message;\n                    this.success = false;\n                    this.infoMessage = true;\n                }\n\n                //this.text = localStorage.getItem('data')\n            },\n\n\n            // Variables\n            addVariable: function() {\n                this.ext_text.task.variables.push(\n                    new variableInfo(\"$newVar\")\n                );\n                console.log(this.ext_text.addedVariables);\n            },\n            setVariableName: function(e) {\n                this.ext_text.addedVariables[this.indexAV].name = e.target.innerText;\n            },\n            removeVariable: function(i) {\n                this.ext_text.addedVariables.splice(i, 1);\n            },\n\n            // Questions\n            addQuestion: function() {\n                this.ext_text.task.questions.push(new Question());\n            },\n            removeQuestion: function(i) {\n                this.ext_text.task.questions.splice(i, 1);\n            },\n\n            // Answers\n            addCorrect: function() {\n                this.ext_text.task.answers[this.indexA].correct.push(new String(\"\"));\n            },\n            removeCorrect: function(i) {\n                this.ext_text.task.answers[this.indexA].correct.splice(i, 1);\n            },\n            addIncorrect: function() {\n                this.ext_text.task.answers[this.indexA].incorrect.push(new String(\"\"));\n            },\n            removeIncorrect: function(i) {\n                this.ext_text.task.answers[this.indexA].incorrect.splice(i, 1);\n            },\n\n            parseText : function () {\n\n                // Tokenize\n                // console.log( tokenize( this.text ) )\n\n                // clear arrays\n                this.variables = []\n                this.questions = []\n                this.answers = []\n                this.task_text = \"\"\n\n                // TEXT\n                this.ext_text.task.text = this.text;\n\n                let tokens = tokenize(this.text);\n\n                // VARIABLES\n                this.variables = this.ext_text.extractVariables(tokens);\n\n                // ANSWERS\n                this.answers = this.ext_text.extractAnswers(tokens);\n\n                // Extract answer from each question\n                \n                // Assume list of variables has changed\n                // and set visiblity to false for all variables\n                this.ext_text.task.answers.forEach((answer) => {\n                    answer.visible = false;\n                });\n                // QUESTIONS\n                this.ext_text.task.questions.forEach((question) => {\n\n                    console.log('Q',question);\n                    \n                    console.log(tokenize(\"Q: \", question.text));\n                    \n                    this.ext_text.extractAnswers(tokenize(question.text));\n\n                });\n\n                let generated_text = this.ext_text.generateText();\n\n                console.log(generated_text);\n\n                \n                /*\n                // clear arrays\n                this.variables = [];\n                this.questions = [];\n                this.answers = [];\n                this.task_text = \"\";\n\n                // parse text\n                var parsedData = parseMathMarkup( generated_text );\n\n                console.log(\"PARSED: \", parsedData);\n\n                this.task_text = parsedData.get('task-text') // save task text\n                console.log(\"TADAAAA\",this.task_text)\n\n                // save variables and questions\n                for (let [_, value] of parsedData.entries() ) \n                {\n                    console.log(_)\n                    if ( value instanceof variableInfo ) this.variables.push(value)\n                    if ( value instanceof taskQuestion ) this.questions.push(value)\n                }\n\n                // extract answers\n                for (let question of this.questions) \n                {\n                    for (let [_, value] of question.answers.entries() )\n                    {\n                       console.log(_)\n                       this.answers.push(value)\n                    }\n                }\n\n                // -------------------------------------------------\n                // For all variables, compute range if range != \"\"\n                for ( let v of this.variables ) \n                {\n                    //v.testRange.setFullRange(v.range);\n\n                    if ( v.range.length != 0 )\n                    {\n                        let [start, end, step] = v.range.substring(1, v.range.length-1).split(',')\n                        console.log(start, end , step)\n                        \n                        // Get actual value\n                        v.value = randomInt(parseInt(start), parseInt(end)).toString()\n                    }\n                    else\n                    {\n                        v.value = v.definition;\n                    }\n\n                    this.task_text = this.task_text.replace(v.name, v.value)\n\n                    // For each answer replace value\n                    for (let a of this.answers)\n                    {\n                        // Replace in correct\n                        a.correct.forEach((ans, ind) => {\n                            a.correct[ind] = ans.replace(v.name, v.value)                            \n                        });\n\n                        // Replace in incorrect\n                        a.incorrect.forEach((ans, ind) => {\n                            a.incorrect[ind] = ans.replace(v.name, v.value);\n                        });\n                    }\n                }\n\n                // Get final result\n                for(let a of this.answers) \n                {\n                    // Evaluate expressions\n                    a.correct.forEach(expr => { a.correct_values.push( evaluate(expr) ) });\n                    a.incorrect.forEach(expr => { a.incorrect_values.push( evaluate(expr) ) });\n                }\n\n                console.log(\"VARS\", this.variables)\n                console.log(\"QSTN\", this.questions)\n                console.log(\"ANSW\", this.answers)\n                */\n            }     \n        }\n    }\n</script>\n\n<style>\n    .b-g {\n        background-color: var(--green-background-color);\n        height: 90%;\n    }\n    .r-g {\n        height: 90%;\n    }\n    .h-g {\n        border: solid 2px hotpink;\n    }\n\n    [text-narrow] {\n        line-height: 1.1 !important;\n        font-size: 1rem;\n    }\n\n    .message-red {\n        border: 1px solid red;\n    }\n    .message-green {\n        border: 1px solid green;\n    }\n\n    .pointer {\n        cursor: pointer !important;\n    }\n\n    .close-button {\n        position: absolute !important;\n        top: 0rem !important;\n        right: 0rem !important;\n    }\n\n</style>"],"sourceRoot":"src/components"}]}