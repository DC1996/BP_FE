{"remainingRequest":"/home/dc/Documents/BP/vue-bp-web/node_modules/babel-loader/lib/index.js!/home/dc/Documents/BP/vue-bp-web/node_modules/eslint-loader/index.js??ref--14-0!/home/dc/Documents/BP/vue-bp-web/src/myfiles/taskHandler.js","dependencies":[{"path":"/home/dc/Documents/BP/vue-bp-web/src/myfiles/taskHandler.js","mtime":1649976061353},{"path":"/home/dc/Documents/BP/vue-bp-web/babel.config.js","mtime":1646999302412},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/cache-loader/dist/cjs.js","mtime":1642114936856},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/babel-loader/lib/index.js","mtime":1642114938312},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/eslint-loader/index.js","mtime":1642114937120}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/dc/Documents/BP/vue-bp-web/src/myfiles/taskHandler.js"],"names":["tokenize","Token","math","require","ConcreteTask","text","questions","answers","Map","variables","Question","Answer","_name","name","correct","incorrect","range","Range","visible","Variable","definition","added","start","end","step","fullRange","trim","Task","qIndex","vIndex","_text","toString","push","find","a","v","findIndex","_definition","parseMathLang","console","log","tokens","lineNumber","i","task","checkEndOfInput","parseText","error","parseQuestions","parseDefinitions","parseRanges","forEach","q","length","errMsg","checkTokenType","types","keyword","tokenTypeError","checkTokenValue","tokenValueError","skipSpaces","variable","addNewVariable","value","addTaskText","addNewQuestion","answer","addNewAnswer","addQuestionText","undefined","at","setVariableIndex","operator","eq","temp_def","whitespace","newline","addVariableDefinition","findAnswer","semanticError","special","accessor","answerType","lBracket","rBracket","answerDefinition","comma","skipNewLines","findVariable","lParenth","number","rParenth","space","type","_errMsg","message"],"mappings":"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","sourcesContent":["import { tokenize, Token } from \"./tokenizer\";\n\nconst math = require(\"mathjs\");\n\n// Task with concrete values\nexport class ConcreteTask {\n  constructor() {\n    this.text = \"\";\n    this.questions = [];\n    this.answers = new Map();\n    this.variables = new Map();\n  }\n}\n\n// Class that represents the questions\n// of the given task\nexport class Question {\n  constructor() {\n    this.text = \"\";\n  }\n}\n\n// Answer structure\nexport class Answer {\n  constructor(_name) {\n    this.name = _name;\n    this.correct = [];\n    this.incorrect = [];\n\n    this.range = new Range();\n\n    this.visible = true;\n  }\n}\n\n// Variable structure\nexport class Variable {\n  constructor(_name) {\n    this.name = _name;\n    this.definition = \"\";\n    this.range = new Range();\n\n    this.visible = true;\n    this.added = false;\n  }\n}\n\n// Represents the range of the\n// variable\nexport class Range {\n  constructor() {\n    this.start = \"\";\n    this.end = \"\";\n    this.step = \"\";\n\n    this.fullRange = function () {\n      if (\n        this.start.trim() == \"\" ||\n        this.end.trim() == \"\" ||\n        this.step.trim() == \"\"\n      ) {\n        return \"\";\n      }\n\n      return \"(\" + this.start + \",\" + this.end + \",\" + this.step + \")\";\n    };\n  }\n}\n\n// Class that represents the task\n// this will be saved in the database\nexport class Task {\n  constructor() {\n    // Content\n    this.text = \"\";\n\n    this.qIndex = -1;\n    this.questions = [];\n\n    this.vIndex = -1;\n    this.variables = [];\n\n    this.answers = [];\n  }\n\n  // Adding text to task\n  addTaskText(_text) {\n    this.text += \" \" + _text.toString();\n  }\n\n  // Add new question\n  addNewQuestion() {\n    this.questions.push(new Question());\n    this.qIndex++;\n  }\n\n  // Add question text\n  addQuestionText(_text) {\n    this.questions[this.qIndex].text += \" \" + _text.trim(\"\\n\");\n  }\n\n  // Find answer by name\n  findAnswer(_name) {\n    return this.answers.find((a) => a.name == _name);\n  }\n\n  // Add new answer\n  addNewAnswer(_name) {\n    this.answers.push(new Answer(_name));\n  }\n\n  // Add new variable to task if not already in array\n  addNewVariable(_name) {\n    if (!this.variables.find((v) => v.name == _name)) {\n      this.variables.push(new Variable(_name));\n      this.vIndex++;\n    }\n  }\n\n  setVariableIndex(_name) {\n    this.vIndex = this.variables.findIndex((v) => v.name == _name);\n  }\n\n  addVariableDefinition(_definition) {\n    this.variables[this.vIndex].definition = _definition;\n  }\n\n  findVariable(_name) {\n    return this.variables.find((v) => v.name == _name);\n  }\n}\n\n// Parses the markup language\nexport function parseMathLang(text) {\n  console.log(text); // Logging\n\n  // First, tokenize the input file\n  let tokens = tokenize(text);\n  let lineNumber = 0;\n  let i = 0;\n\n  console.log(tokens); // Logging\n\n  // Create task object where the new task will be saved\n  let task = new Task();\n\n  // Error checking\n  if (checkEndOfInput()) return task;\n\n  parseText();\n  if (task.error) return task;\n  parseQuestions();\n  if (task.error) return task;\n  parseDefinitions();\n  if (task.error) return task;\n  parseRanges();\n\n  // Trim whitespaces in question text\n  task.questions.forEach((q) => (q.text = q.text.trim()));\n\n  console.log(task);\n\n  return task;\n\n  /* ------------------------------ */\n\n  // Check end of input error\n  function checkEndOfInput() {\n    if (i == tokens.length) {\n      task.error = true;\n      task.errMsg = \"Parser error: Unexpected end of input.\";\n    }\n\n    return task.error;\n  }\n\n  // Parse the #text part of the given text\n  function parseText() {\n    // Text section starts with '#text'\n    if (!checkTokenType(Token.types.keyword))\n      tokenTypeError(\"Expected keyword, starting with #\");\n    if (!checkTokenValue(\"#text\")) tokenValueError(\"Expected #text keyword\");\n\n    i++; // Move to next token\n    skipSpaces();\n\n    // Append text until the next keyword\n    while (!checkEndOfInput() && !checkTokenType(Token.types.keyword)) {\n      // Save variable when encountered\n      if (checkTokenType(Token.types.variable)) {\n        task.addNewVariable(tokens[i].value);\n      }\n\n      task.addTaskText(tokens[i].value);\n\n      i++; // Move to next token\n      skipSpaces();\n    }\n  }\n\n  // Parse the #question parts of the text\n  function parseQuestions() {\n    // For each question in the text\n    do {\n      // Check keyword validity\n      if (!checkTokenType(Token.types.keyword))\n        tokenTypeError(\"Expected keyword, starting with #\");\n      if (!checkTokenValue(\"#question\"))\n        tokenValueError(\"Expected '#question' keyword\");\n\n      task.addNewQuestion();\n\n      i++; // Move to next token\n      skipSpaces();\n\n      // Add question content\n      while (!checkTokenType(Token.types.keyword)) {\n        if (checkTokenType(Token.types.answer)) {\n          task.addNewAnswer(tokens[i].value);\n        }\n\n        // Save variable when encountered\n        if (checkTokenType(Token.types.variable)) {\n          task.addNewVariable(tokens[i].value);\n        }\n\n        task.addQuestionText(tokens[i].value);\n\n        i++; // Move to next token\n        skipSpaces();\n      }\n    } while (\n      checkTokenType(Token.types.keyword) &&\n      checkTokenValue(\"#question\")\n    );\n  }\n\n  // Parse the #defintion part of the text\n  function parseDefinitions() {\n    if (!checkTokenType(Token.types.keyword))\n      tokenTypeError(\"Expected keyword, starting with #\");\n    if (!checkTokenValue(\"#definitions\"))\n      tokenValueError(\"Expected '#definitions' keyword\");\n\n    i++; // Move to next token\n    skipSpaces();\n\n    // Until the next keyword\n    while (!checkTokenType(Token.types.keyword)) {\n      // Handle variable definition or declaration\n      if (checkTokenType(Token.types.variable)) {\n        // If variable was not added yet\n        if (\n          task.variables.find((v) => v.name == tokens[i].value) == undefined\n        ) {\n          task.addNewVariable(tokens[i].value);\n          task.variables.at(-1).added = true;\n        }\n\n        // Find index of current variable to process\n        task.setVariableIndex(tokens[i].value);\n\n        i++; // Move to next token\n        skipSpaces();\n\n        // Variable definition\n        if (checkTokenType(Token.types.operator.eq)) {\n          i++; // Move to next token\n          skipSpaces();\n\n          let temp_def = \"\";\n          while (!checkTokenType(Token.types.whitespace.newline)) {\n            // Collect variable definition\n            temp_def += \" \" + tokens[i].value;\n            i++; // Move to next token\n            skipSpaces();\n          }\n\n          task.addVariableDefinition(temp_def.trim());\n          i++; // Move to next token\n          skipSpaces();\n        }\n        // Variable declaration\n        else if (!checkTokenType(Token.types.whitespace.newline)) {\n          tokenTypeError(\"Expected a newline character '\\\\n'\");\n        }\n      }\n\n      // Answer assignment\n      if (checkTokenType(Token.types.answer)) {\n        // Find answer in questions answer\n        let answer = task.findAnswer(tokens[i].value);\n        if (answer == undefined)\n          semanticError(\"Answer \" + tokens[i].value + \" is undefined.\");\n\n        console.log(\"ANSW\", answer.name);\n        i++; // Move to next token\n        skipSpaces();\n\n        // Look for '.correct' or '.incorrect'\n        if (!checkTokenType(Token.types.special.accessor))\n          tokenTypeError(\"Expected accessor .correct or .incorrect\");\n\n        // Save answer accessor type\n        let answerType = tokens[i].value;\n        i++; // Move to next token\n        skipSpaces();\n\n        // Look for =\n        if (!checkTokenType(Token.types.operator.eq))\n          tokenTypeError(\"Expected an equal sign =\");\n\n        i++; // Move to next token\n        skipSpaces();\n\n        // Look for [\n        if (!checkTokenType(Token.types.special.lBracket))\n          tokenTypeError(\"Expected an opening bracket [\");\n\n        i++; // Move to next token\n        skipSpaces();\n\n        // Look for newline\n        if (!checkTokenType(Token.types.whitespace.newline))\n          tokenTypeError(\"Expected a newline character '\\\\n'\");\n\n        i++; // Move to next token\n        skipSpaces();\n\n        // Exclude ]\n        if (checkTokenType(Token.types.special.rBracket))\n          tokenTypeError(\"Expected a value between [ ] brackets\");\n\n        console.log(answerType);\n\n        // For each answer definition\n        while (!checkTokenType(Token.types.special.rBracket)) {\n          // Collect definition\n          let answerDefinition = \"\";\n\n          while (\n            !checkTokenType(Token.types.special.comma) &&\n            !checkTokenType(Token.types.whitespace.newline)\n          ) {\n            answerDefinition += tokens[i].value;\n            i++; // Move to next token\n          }\n\n          if (checkTokenType(Token.types.special.comma)) i++; // Move to next token\n\n          // Save definition based on accessor type\n          if (answerType == \".correct\" && answerDefinition != \"\") {\n            answer.correct.push(answerDefinition);\n          }\n          if (answerType == \".incorrect\" && answerDefinition != \"\") {\n            answer.incorrect.push(answerDefinition);\n          }\n\n          i++; // Move to next token\n          skipSpaces();\n        }\n      }\n\n      i++; // Move to next token\n\n      console.log(!checkTokenType(Token.types.keyword));\n    }\n  }\n\n  // Parses the #ranges part of the text\n  function parseRanges() {\n    if (!checkTokenType(Token.types.keyword))\n      tokenTypeError(\"Expected keyword, starting with #\");\n    if (!checkTokenValue(\"#ranges\"))\n      tokenValueError(\"Expected '#ranges' keyword\");\n\n    i++; // Move to next token\n    skipNewLines();\n    skipSpaces();\n\n    while (i < tokens.length) {\n      if (\n        !checkTokenType(Token.types.variable) &&\n        !checkTokenType(Token.types.answer)\n      )\n        tokenTypeError(\"Expetected variable or answer\");\n\n      // Load variable (or answer)\n      let variable;\n      if (checkTokenType(Token.types.variable)) {\n        variable = task.findVariable(tokens[i].value);\n      } else {\n        variable = task.findAnswer(tokens[i].value);\n      }\n      if (variable == undefined)\n        semanticError(\"Variable \" + tokens[i].value + \" is undefined.\");\n\n      i++; // Move to next token\n      skipSpaces();\n\n      if (!checkTokenType(Token.types.operator.eq))\n        tokenTypeError(\"Expected opeator =\");\n      i++; // Move to next token\n      skipSpaces();\n\n      if (!checkTokenType(Token.types.text)) {\n        tokenTypeError(\"Expected text type\");\n      }\n      if (!checkTokenValue(\"range\")) {\n        tokenValueError(\"Expected 'range' text\");\n      }\n      i++; // Move to next token\n      skipSpaces();\n\n      // (\n      if (!checkTokenType(Token.types.special.lParenth))\n        tokenTypeError(\"Expected left parenthesis (\");\n      i++; // Move to next token\n      skipSpaces();\n\n      // start\n      if (!checkTokenType(Token.types.number))\n        tokenTypeError(\"Expected a number\");\n      variable.range.start = tokens[i].value;\n      i++; // Move to next token\n      skipSpaces();\n\n      if (!checkTokenType(Token.types.special.comma))\n        tokenTypeError(\"Expected comma separator ,\");\n      i++; // Move to next token\n      skipSpaces();\n\n      // end\n      if (!checkTokenType(Token.types.number))\n        tokenTypeError(\"Expected a number\");\n      variable.range.end = tokens[i].value;\n      i++; // Move to next token\n      skipSpaces();\n\n      if (!checkTokenType(Token.types.special.comma))\n        tokenTypeError(\"Expected comma separator ,\");\n      i++; // Move to next token\n      skipSpaces();\n\n      // step\n      if (!checkTokenType(Token.types.number))\n        tokenTypeError(\"Expected a number\");\n      variable.range.step = tokens[i].value;\n      i++; // Move to next token\n      skipSpaces();\n\n      // )\n      if (!checkTokenType(Token.types.special.rParenth))\n        tokenTypeError(\"Expected closing right parenthesis )\");\n      i++; // Move to next token\n      skipSpaces();\n\n      skipNewLines();\n    }\n  }\n\n  function skipNewLines() {\n    while (\n      i < tokens.length &&\n      ( checkTokenType(Token.types.whitespace.newline) || checkTokenType(Token.types.whitespace.space) )\n    ) {\n      i++;\n    }\n  }\n\n  function skipSpaces() {\n    while (\n      i < tokens.length &&\n      checkTokenType(Token.types.whitespace.space)\n    ) {\n      i++;\n    }\n  }\n\n  /* ------------------------------------------------- */\n  // Checkers\n  function checkTokenType(type) {\n    if (i >= tokens.length) return false;\n    return tokens[i].type == type ? true : false;\n  }\n\n  function checkTokenValue(value) {\n    if (i >= tokens.length) return false;\n    return tokens[i].value == value ? true : false;\n  }\n\n  // Errors\n  function tokenTypeError(_errMsg = \"Type error message...\") {\n    throw { type: \"Token Type Error\", message: _errMsg };\n  }\n  function tokenValueError(_errMsg = \"Value error message...\") {\n    throw { type: \"Token Value Error\", message: _errMsg };\n  }\n\n  function semanticError(_errMsg) {\n    throw { type: \"Semantic Error\", message: _errMsg };\n  }\n}\n\n/* --------------------------------- */\n"]}]}