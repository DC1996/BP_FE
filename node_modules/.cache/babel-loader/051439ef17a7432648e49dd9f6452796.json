{"remainingRequest":"/home/dc/Documents/BP/vue-bp-web/node_modules/babel-loader/lib/index.js!/home/dc/Documents/BP/vue-bp-web/node_modules/eslint-loader/index.js??ref--14-0!/home/dc/Documents/BP/vue-bp-web/src/myfiles/tokenizer.js","dependencies":[{"path":"/home/dc/Documents/BP/vue-bp-web/src/myfiles/tokenizer.js","mtime":1647622498745},{"path":"/home/dc/Documents/BP/vue-bp-web/babel.config.js","mtime":1646999302412},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/cache-loader/dist/cjs.js","mtime":1642114936856},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/babel-loader/lib/index.js","mtime":1642114938312},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/eslint-loader/index.js","mtime":1642114937120}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/dc/Documents/BP/vue-bp-web/src/myfiles/tokenizer.js"],"names":["Token","_type","_value","type","value","undefined","vSign","variable","gVariable","aSign","answer","gAnswer","kSign","keyword","keywords","text","question","definitions","ranges","number","whitespace","space","tabulator","newline","operator","eq","add","sub","mul","div","pow","special","rParenth","lParenth","rBracket","lBracket","dot","accessor","comma","START","VARIABLE","KEYWORD","ANSWER","TEXT","tokenize","data","buffer","tokens","lineNum","STATE","i","length","character","types","push","test","isNaN"],"mappings":"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","sourcesContent":["/******************\n * tokenizer.js\n * \n * Implements Token class and tokenize\n * function that performs a lexical analysis\n * of the given language\n * \n*/\n\n// Represents an extracted token from\n// the token stream\nexport class Token\n{\n    /* Properties */\n    constructor(_type, _value)\n    {\n        this.type = _type;\n        this.value = _value;\n    }\n\n    /* Token types as pseudo enums */\n    static types = {\n        // Error handling\n        undefined :  undefined,\n\n        // Variable\n        vSign :      \"$\",\n        variable :   /[a-zA-Z0-9_]/,\n        gVariable :  /\\$[a-zA-Z0-9]+/g,\n        \n        // Answer\n        aSign :      \"@\",\n        answer :     /[a-zA-Z0-9_]/,\n        gAnswer :    /@[a-zA-Z0-9]+/g,\n\n        // Keyword\n        kSign :      \"#\",\n        keyword:     /[a-z]/,\n        keywords :    { \n            text: \"text\", \n            question: \"question\", \n            definitions: \"definitions\", \n            ranges: \"ranges\" \n        },\n\n        // Basic types\n        number:     /([0-9])+/,\n        text:       /([a-zA-Z0-9_])/,\n\n        // Whitespace\n        whitespace : { \n            space: ' ', \n            tabulator: '\\t', \n            newline: '\\n'\n        },\n\n        // Operators\n        operator : {\n            eq: '=',\n            add: '+',\n            sub: '-',\n            mul: '*',\n            div: '/',\n            pow: '^',\n        },\n        special : {\n            rParenth: ')',\n            lParenth: '(',\n            rBracket: ']',\n            lBracket: '[',\n\n            dot : '.',\n            accessor: '.',\n            comma : ',',\n        }\n    }\n\n\n}\n\n// Automata states\nexport const START = 0, VARIABLE = 11, KEYWORD = 22, ANSWER = 33, TEXT = 44;\n\n/*\n    Create tokens from the input text.\n    Input: data - markup as a string\n    Output: tokens - array of tokens\n*/\nexport function tokenize(data)\n{    \n    // Initialize buffer and tokens array\n    var buffer = \"\"\n    var tokens = [];\n    var lineNum = 0;\n\n    var STATE = START;\n    for ( var i = 0; i < data.length; i++ ) \n    {\n        var character = data[i];\n\n        //console.log( character );\n\n        switch ( STATE ) \n        {\n            case START:\n            {\n                // 'Append' first character\n                buffer = character;\n\n                // Analyze character\n                switch ( character )\n                {\n                    case Token.types.vSign : { \n                        STATE = VARIABLE; \n                        break; \n                    }\n\n                    case Token.types.kSign : { \n                        STATE = KEYWORD;  \n                        break; \n                    }\n\n                    case Token.types.aSign : { \n                        STATE = ANSWER;   \n                        break; \n                    }\n\n                    case Token.types.whitespace.space : break;\n                    case Token.types.whitespace.tabulator : break;\n                    case Token.types.whitespace.newline : \n                        {  tokens.push( new Token(Token.types.whitespace.newline, character)); break; }\n\n                    case Token.types.special.lParenth : {  \n                        tokens.push( new Token(Token.types.special.lParenth, character)); \n                        break;\n                    }\n                    case Token.types.special.rParenth : {  \n                        tokens.push( new Token(Token.types.special.rParenth, character));\n                        break;\n                    }\n                    case Token.types.special.lBracket : {  \n                        tokens.push( new Token(Token.types.special.lBracket, character)); \n                        break; \n                    }\n                    case Token.types.special.rBracket : {  \n                        tokens.push( new Token(Token.types.special.rBracket, character)); \n                        break; \n                    }\n                    case Token.types.operator.add : {  \n                        tokens.push( new Token(Token.types.operator.add, character)); \n                        break; \n                    }\n                    case Token.types.operator.sub : {  \n                        tokens.push( new Token(Token.types.operator.sub, character)); \n                        break; \n                    }\n                    case Token.types.operator.div : {  \n                        tokens.push( new Token(Token.types.operator.div, character)); \n                        break; \n                    }\n                    case Token.types.operator.mul : {  \n                        tokens.push( new Token(Token.types.operator.mul, character)); \n                        break; \n                    }\n                    case Token.types.special.comma : {  \n                        tokens.push( new Token(Token.types.special.comma, character)); \n                        break; \n                    }\n                    case Token.types.operator.eq : {  \n                        tokens.push( new Token(Token.types.operator.eq, character)); \n                        break; \n                    }\n                    case Token.types.operator.pow : {  \n                        tokens.push( new Token(Token.types.operator.pow, character)); \n                        break; \n                    }\n\n                    default: \n                    { \n                        // Lookahead for the next character\n                        if ( /[\\s$#@()+\\-\\^/*,=\\[\\]]/.test( data[i+1] ) ) { // eslint-disable-line\n                            \n                            if ( ! isNaN( +buffer ) ) \n                            {\n                                tokens.push(new Token(Token.types.number, buffer));\n                            }\n                            else \n                            { \n                                tokens.push(new Token(Token.types.text, buffer));\n                            }\n                            \n                            break;\n                        }\n\n                        STATE = TEXT; \n                        break;\n                    }\n                }   \n                break;\n            }\n\n            // Handle variabes ( starting with $ )\n            case VARIABLE: \n            {\n                // Test current character\n                if ( Token.types.variable.test( character ) ) // eslint-disable-line\n                {\n                    buffer += character;\n\n                    // Lookahead to determine next token  \n                    if ( (!( Token.types.variable.test(data[i+1]) )) || (i == data.length-1)) // eslint-disable-line\n                    {\n                        tokens.push(new Token(Token.types.variable, buffer));\n                        STATE = START;\n                        break;\n                    }\n                    \n                    STATE = VARIABLE;\n                    break; \n                }\n                else \n                {\n                    tokens.push(buffer);\n                    STATE = START;\n                    break;\n                }\n            }\n\n            // Handle keywords ( starting with # )\n            case KEYWORD: \n            {\n                // Test current character\n                if ( Token.types.keyword.test( character ) ) // eslint-disable-line\n                {\n                    buffer += character;\n\n                    // Lookahead to determine next token\n                    if ( (!( Token.types.keyword.test(data[i+1]) )) || (i == data.length-1) ) // eslint-disable-line\n                    {\n                        tokens.push(new Token(Token.types.keyword, buffer));\n                        STATE = START;\n                        break;\n                    }\n                    \n                    STATE = KEYWORD;\n                    break;\n                }\n                else\n                {\n                    tokens.push(new Token(Token.types.kSign, buffer));\n                    STATE = START;\n                    break;\n                }\n            }\n\n            // Handle answer ( starts with @ )\n            case ANSWER:\n            {\n                // Test current character \n                if ( Token.types.answer.test( character ) ) // eslint-disable-line\n                {\n                    buffer += character;\n\n                    // Lookahead to determine next token\n                    if ( (!( Token.types.answer.test(data[i+1]) )) || (i == data.length-1)) // eslint-disable-line\n                    {    \n                        tokens.push(new Token(Token.types.answer, buffer));\n                        STATE = START;\n                        break;\n                    }\n                    \n                    STATE = ANSWER;\n                    break; \n                }\n                else \n                {\n                    tokens.push(new Token(Token.types.aSign, buffer));\n                    STATE = START;\n                    break;\n                }\n            }\n\n            // Handle text\n            case TEXT: \n            {\n                // Lookahead for next character\n                // determine whether there are more character to the text or not\n                // if any of these return true then text ended\n                if( /[\\s$#@()+\\-\\^/*,=\\[\\]]/.test( data[i+1] ) ) // eslint-disable-line\n                {\n                    buffer += character;\n\n                    // check if we hit a number\n                    if ( ! isNaN( +buffer ) ) \n                    {\n                        tokens.push(new Token(Token.types.number, buffer));\n                    }\n                    // check if we hit accessor to an answer\n                    else if ( buffer[0] == '.' ) \n                    {\n                        tokens.push(new Token(Token.types.special.accessor, buffer));\n                    } \n                    // we ended a text section\n                    else \n                    {\n                        tokens.push(new Token(Token.types.text, buffer));\n                    }\n                    \n                    STATE = START;\n                    break;\n                }\n\n                buffer += character;\n                break;\n            }\n        }\n    }\n\n    return tokens;\n}"]}]}