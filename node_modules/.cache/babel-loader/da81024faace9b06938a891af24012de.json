{"remainingRequest":"/home/dc/Documents/BP/vue-bp-web/node_modules/babel-loader/lib/index.js!/home/dc/Documents/BP/vue-bp-web/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/dc/Documents/BP/vue-bp-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dc/Documents/BP/vue-bp-web/src/components/createtaskpage.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/dc/Documents/BP/vue-bp-web/src/components/createtaskpage.vue","mtime":1649663657462},{"path":"/home/dc/Documents/BP/vue-bp-web/babel.config.js","mtime":1646999302412},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/cache-loader/dist/cjs.js","mtime":1642114936856},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/babel-loader/lib/index.js","mtime":1642114938312},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/cache-loader/dist/cjs.js","mtime":1642114936856},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/vue-loader/lib/index.js","mtime":1642114938760}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIGZyb20gIi9ob21lL2RjL0RvY3VtZW50cy9CUC92dWUtYnAtd2ViL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyLmpzIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL2RjL0RvY3VtZW50cy9CUC92dWUtYnAtd2ViL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yLmpzIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2guanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcudHJpbS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJlcGxhY2UuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwbGFjZS1hbGwuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maW5kLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc3BsaWNlLmpzIjsKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IHsgdG9rZW5pemUsIFRva2VuIH0gZnJvbSAiLi4vbXlmaWxlcy90b2tlbml6ZXIuanMiOwppbXBvcnQgeyBwYXJzZU1hdGhMYW5nLCBRdWVzdGlvbiwgQ29uY3JldGVUYXNrLCBWYXJpYWJsZSB9IGZyb20gIi4uL215ZmlsZXMvdGFza0hhbmRsZXIiOwppbXBvcnQgeyBFeHRyYWN0b3IgfSBmcm9tICIuLi9teWZpbGVzL2V4dHJhY3Rvck1vZHVsZSI7CmltcG9ydCBUYXNrRGF0YVNlcnZpY2UgZnJvbSAiLi4vc2VydmljZXMvdGFza0RhdGFTZXJ2aWNlIjsKaW1wb3J0IEdlbmVyYXRvclNlcnZpY2UgZnJvbSAiLi4vc2VydmljZXMvZ2VuZXJhdG9yU2VydmljZSI7CmltcG9ydCBDYXRlZ29yeURhdGFTZXJ2aWNlIGZyb20gIi4uL3NlcnZpY2VzL2NhdGVnb3J5RGF0YVNlcnZpY2UuanMiOwppbXBvcnQgKiBhcyBtYXRoIGZyb20gJ21hdGhqcyc7CmltcG9ydCB0ZXN0RGF0YVNlcnZpY2UgZnJvbSAnLi4vc2VydmljZXMvdGVzdERhdGFTZXJ2aWNlLmpzJzsKZXhwb3J0IGRlZmF1bHQgewogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICB0YXNrQ2F0ZWdvcmllczogW10sCiAgICAgIHNlbGVjdGVkVGFza0NhdGVnb3JpZXM6IFtdLAogICAgICBuYW1lOiAiTmV3IFRhc2siLAogICAgICB0YXNrTmFtZTogIiIsCiAgICAgIHRhc2tHcmFkZTogbnVsbCwKICAgICAgdGV4dDogIiIsCiAgICAgIHRhc2tfdGV4dDogIiIsCiAgICAgIGZvcm11bGE6ICckJHggPSB7LWIgXFxwbSBcXHNxcnR7Yl4yLTRhY30gXFxvdmVyIDJhfS4kJCcsCiAgICAgIGV4dF90ZXh0OiBuZXcgRXh0cmFjdG9yKCksCiAgICAgIHByZXZpZXc6IG5ldyBDb25jcmV0ZVRhc2soKSwKICAgICAgdmFyaWFibGVzOiBbXSwKICAgICAgcXVlc3Rpb25zOiBbXSwKICAgICAgYW5zd2VyczogW10sCiAgICAgIG92ZXJsYXlWOiBmYWxzZSwKICAgICAgb3ZlcmxheUE6IGZhbHNlLAogICAgICBvdmVybGF5QWRkVjogZmFsc2UsCiAgICAgIG92ZXJsYXlTYXZlOiBmYWxzZSwKICAgICAgdGFza092ZXJsYXk6IGZhbHNlLAogICAgICBoZWxwRGlhbG9nOiBmYWxzZSwKICAgICAgaW5kZXhWOiAwLAogICAgICBpbmRleEFWOiAwLAogICAgICBpbmRleEE6IDAKICAgIH07CiAgfSwKICBjb21wdXRlZDogewogICAgZ2V0VGV4dDogZnVuY3Rpb24gZ2V0VGV4dCgpIHsKICAgICAgcmV0dXJuIHRoaXMudGV4dDsKICAgIH0KICB9LAogIC8vIExvYWQgdGFzayBkZXBlbmRpbmcgb24gbmF2aWdhdGlvbiBvcmlnaW4KICBiZWZvcmVNb3VudDogZnVuY3Rpb24gYmVmb3JlTW91bnQoKSB7CiAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgIGNvbnNvbGUubG9nKCJ0YXNrSWQgZnJvbSByb3V0ZSBwYXJhbXMiLCBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndGFza0lkJykpOyAvLyBNb2RpZnkgd2FzIHNlbGVjdGVkIGZyb20gdGFzayBoaXN0b3J5CgogICAgaWYgKHRoaXMuJHJvdXRlLnBhcmFtcy50YXNrSWQpIHsKICAgICAgLy8gU2F2ZSBpZCB0byBsb2NhbFN0b3JhZ2UsIHNvIHdlIGNhbiByZWxvYWQgcGFnZSB3aXRob3V0IGxvc3NpbmcgdGhlIGlkCiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0YXNrSWQnLCB0aGlzLiRyb3V0ZS5wYXJhbXMudGFza0lkKTsKICAgIH0gLy8gSWQgd2FzIHNhdmVkIGZyb20gcm91dGUgcGFyYW1zIG9yIGlmIHRoZSBwYWdlIHdhcyByZWxvYWRlZAoKCiAgICBpZiAobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Rhc2tJZCcpKSB7CiAgICAgIC8vIExvYWQgdGhlIHRhc2sgY29udGVudCBmcm9tIHRoZSBkYXRhYmFzZQogICAgICBUYXNrRGF0YVNlcnZpY2UuZ2V0KGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0YXNrSWQnKSkudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgY29uc29sZS5sb2cocmVzKTsKCiAgICAgICAgdHJ5IHsKICAgICAgICAgIF90aGlzLm5hbWUgPSByZXMuZGF0YS5uYW1lOwogICAgICAgICAgX3RoaXMudGFza05hbWUgPSByZXMuZGF0YS5uYW1lOwogICAgICAgICAgX3RoaXMudGFza0dyYWRlID0gcmVzLmRhdGEuZ3JhZGU7CiAgICAgICAgICBfdGhpcy5leHRfdGV4dC50YXNrID0gcGFyc2VNYXRoTGFuZyhyZXMuZGF0YS5jb250ZW50KTsKICAgICAgICAgIHJlcy5kYXRhLmNhdGVnb3JpZXMuZm9yRWFjaChmdW5jdGlvbiAoX3JlZikgewogICAgICAgICAgICB2YXIgbmFtZSA9IF9yZWYubmFtZTsKCiAgICAgICAgICAgIF90aGlzLnNlbGVjdGVkVGFza0NhdGVnb3JpZXMucHVzaChuYW1lKTsKICAgICAgICAgIH0pOwogICAgICAgICAgY29uc29sZS5sb2coJ1JFQ0lFVkVEOiAnLCByZXMuZGF0YSk7CgogICAgICAgICAgX3RoaXMuJHN0b3JlLmRpc3BhdGNoKCdzaG93TWVzc2FnZScsIHsKICAgICAgICAgICAgbWVzc2FnZTogIlBhcnNpbmcgc3VjY2Vzc2Z1bCEiCiAgICAgICAgICB9KTsKICAgICAgICB9IGNhdGNoIChlcnJvcikgewogICAgICAgICAgX3RoaXMuJHN0b3JlLmRpc3BhdGNoKCdzaG93TWVzc2FnZScsIHsKICAgICAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSwKICAgICAgICAgICAgc3VjY2VzczogZmFsc2UKICAgICAgICAgIH0pOwogICAgICAgIH0gLy8gdGhpcy5leHRfdGV4dC50YXNrID0gcGFyc2VNYXRoTGFuZyhyZXMuZGF0YS5jb250ZW50KTsKCgogICAgICAgIF90aGlzLnRleHQgPSBfdGhpcy5leHRfdGV4dC50YXNrLnRleHQudHJpbSgpOwogICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICBfdGhpcy5lcnJvckhhbmRsZXIoZXJyb3IpOwogICAgICB9KTsKICAgIH0gLy8gR2V0IGNhdGVnb3JpZXMKCgogICAgQ2F0ZWdvcnlEYXRhU2VydmljZS5nZXRBbGwoKS50aGVuKGZ1bmN0aW9uIChfcmVmMikgewogICAgICB2YXIgZGF0YSA9IF9yZWYyLmRhdGE7CiAgICAgIF90aGlzLnRhc2tDYXRlZ29yaWVzID0gZGF0YS5tYXAoZnVuY3Rpb24gKF9yZWYzKSB7CiAgICAgICAgdmFyIG5hbWUgPSBfcmVmMy5uYW1lOwogICAgICAgIHJldHVybiBuYW1lOwogICAgICB9KTsKICAgIH0pOwogIH0sCiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHt9LAogIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7fSwKICBtZXRob2RzOiB7CiAgICBnZXRDYXRlZ29yaWVzOiBmdW5jdGlvbiBnZXRDYXRlZ29yaWVzKCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIENhdGVnb3J5RGF0YVNlcnZpY2UuZ2V0QWxsKCkudGhlbihmdW5jdGlvbiAoX3JlZjQpIHsKICAgICAgICB2YXIgZGF0YSA9IF9yZWY0LmRhdGE7CiAgICAgICAgX3RoaXMyLnRhc2tDYXRlZ29yaWVzID0gZGF0YS5tYXAoZnVuY3Rpb24gKF9yZWY1KSB7CiAgICAgICAgICB2YXIgbmFtZSA9IF9yZWY1Lm5hbWU7CiAgICAgICAgICByZXR1cm4gbmFtZTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9LAogICAgcmVwbGFjZUFuc3dlcnM6IGZ1bmN0aW9uIHJlcGxhY2VBbnN3ZXJzKF9xVGV4dCkgewogICAgICB0cnkgewogICAgICAgIHZhciBjbGVhblRleHQgPSBfcVRleHQucmVwbGFjZUFsbChUb2tlbi50eXBlcy5nQW5zd2VyLCAiIikucmVwbGFjZUFsbCgiPSIsICIiKS50cmltKCk7CgogICAgICAgIHJldHVybiBtYXRoLnBhcnNlKGNsZWFuVGV4dCkudG9UZXgoKTsKICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICByZXR1cm4gX3FUZXh0OwogICAgICB9CiAgICB9LAogICAgdGVzdGV4dDogZnVuY3Rpb24gdGVzdGV4dCgpIHsKICAgICAgLy8gVGVzdCBleHRyYWN0aW9uCiAgICAgIHRoaXMuZXh0X3RleHQuZXh0cmFjdFZhcmlhYmxlKHRva2VuaXplKHRoaXMudGV4dCkpOwogICAgfSwKICAgIGNyZWF0ZU5ld1Rhc2s6IGZ1bmN0aW9uIGNyZWF0ZU5ld1Rhc2soKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICB2YXIgZGF0YSwgbmV3VGFzaywgX2l0ZXJhdG9yLCBfc3RlcCwgc2VsZWN0ZWRDYXRlZ29yeSwgY2F0ZWdvcnksIHRhc2tJZCwgdGFzaywgX2l0ZXJhdG9yMiwgX3N0ZXAyLCBfY2F0ZWdvcnksIF9pdGVyYXRvcjMsIF9zdGVwMywgX3NlbGVjdGVkQ2F0ZWdvcnksIF9jYXRlZ29yeTIsIF9jYXRlZ29yeTM7CgogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIC8vIFByZXBhcmUgZGF0YSBmb3Igc2VuZGluZwogICAgICAgICAgICAgICAgZGF0YSA9IHsKICAgICAgICAgICAgICAgICAgbmFtZTogX3RoaXMzLnRhc2tOYW1lLAogICAgICAgICAgICAgICAgICBncmFkZTogX3RoaXMzLnRhc2tHcmFkZSwKICAgICAgICAgICAgICAgICAgY29udGVudDogX3RoaXMzLmV4dF90ZXh0LmdlbmVyYXRlVGV4dCgpCiAgICAgICAgICAgICAgICB9OyAvLyBDcmVhdGUgbmV3IGVudHJ5IGluIGRhdGFiYXNlCgogICAgICAgICAgICAgICAgaWYgKCEobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Rhc2tJZCcpID09IG51bGwpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzNDsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDI7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIHJldHVybiBUYXNrRGF0YVNlcnZpY2UuY3JlYXRlKGRhdGEpOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICBuZXdUYXNrID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0YXNrSWQnLCBuZXdUYXNrLmRhdGEuaWQpOwogICAgICAgICAgICAgICAgY29uc29sZS5sb2coX3RoaXMzLnNlbGVjdGVkVGFza0NhdGVnb3JpZXMpOwogICAgICAgICAgICAgICAgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoX3RoaXMzLnNlbGVjdGVkVGFza0NhdGVnb3JpZXMpOwogICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDk7CgogICAgICAgICAgICAgICAgX2l0ZXJhdG9yLnMoKTsKCiAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICAgIGlmICgoX3N0ZXAgPSBfaXRlcmF0b3IubigpKS5kb25lKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxODsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgc2VsZWN0ZWRDYXRlZ29yeSA9IF9zdGVwLnZhbHVlOwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE1OwogICAgICAgICAgICAgICAgcmV0dXJuIENhdGVnb3J5RGF0YVNlcnZpY2UuZmluZCh7CiAgICAgICAgICAgICAgICAgIG5hbWU6IHNlbGVjdGVkQ2F0ZWdvcnkKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDE1OgogICAgICAgICAgICAgICAgY2F0ZWdvcnkgPSBfY29udGV4dC5zZW50OwoKICAgICAgICAgICAgICBjYXNlIDE2OgogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDExOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgMTg6CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjM7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAyMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAyMDsKICAgICAgICAgICAgICAgIF9jb250ZXh0LnQwID0gX2NvbnRleHRbImNhdGNoIl0oOSk7CgogICAgICAgICAgICAgICAgX2l0ZXJhdG9yLmUoX2NvbnRleHQudDApOwoKICAgICAgICAgICAgICBjYXNlIDIzOgogICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDIzOwoKICAgICAgICAgICAgICAgIF9pdGVyYXRvci5mKCk7CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmZpbmlzaCgyMyk7CgogICAgICAgICAgICAgIGNhc2UgMjY6CiAgICAgICAgICAgICAgICBfdGhpczMuJHN0b3JlLmRpc3BhdGNoKCdzaG93TWVzc2FnZScsIHsKICAgICAgICAgICAgICAgICAgbWVzc2FnZTogIlRhc2sgc2F2ZWQgc3VjY2Vzc2Z1bHkiCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzI7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAyOToKICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAyOTsKICAgICAgICAgICAgICAgIF9jb250ZXh0LnQxID0gX2NvbnRleHRbImNhdGNoIl0oMik7CgogICAgICAgICAgICAgICAgLy8gbG9nCiAgICAgICAgICAgICAgICBfdGhpczMuJHN0b3JlLmRpc3BhdGNoKCdzaG93TWVzc2FnZScsIHsKICAgICAgICAgICAgICAgICAgbWVzc2FnZTogX2NvbnRleHQudDEucmVzcG9uc2UuZGF0YS5tZXNzYWdlLAogICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMzI6CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNzE7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAzNDoKICAgICAgICAgICAgICAgIHRhc2tJZCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0YXNrSWQnKTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzNzsKICAgICAgICAgICAgICAgIHJldHVybiBUYXNrRGF0YVNlcnZpY2UuZ2V0KHRhc2tJZCk7CgogICAgICAgICAgICAgIGNhc2UgMzc6CiAgICAgICAgICAgICAgICB0YXNrID0gX2NvbnRleHQuc2VudDsKCiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAvLyBEZWxldGUgZWFjaCBjYXRlZ29yeSBvbiB0aGUgdGFzawogICAgICAgICAgICAgICAgICBfaXRlcmF0b3IyID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodGFzay5kYXRhLmNhdGVnb3JpZXMpOwoKICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICBmb3IgKF9pdGVyYXRvcjIucygpOyAhKF9zdGVwMiA9IF9pdGVyYXRvcjIubigpKS5kb25lOykgewogICAgICAgICAgICAgICAgICAgICAgX2NhdGVnb3J5ID0gX3N0ZXAyLnZhbHVlOwogICAgICAgICAgICAgICAgICAgICAgVGFza0RhdGFTZXJ2aWNlLnJlbW92ZUNhdGVnb3J5KHsKICAgICAgICAgICAgICAgICAgICAgICAgdGFza0lkOiB0YXNrSWQsCiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5SWQ6IF9jYXRlZ29yeS5pZAogICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IyLmUoZXJyKTsKICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IyLmYoKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICAgICAgICAgICAgLy8KICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coIkVycm9yIHdoaWxlIGRlbGV0aW5nIGNhdGVnb3JpZXMgZnJvbSB0YXNrIik7CiAgICAgICAgICAgICAgICB9IC8vIEFkZCBlYWNoIHNlbGVjdGVkQ2F0ZWdvcnkgdG8gdGFzawoKCiAgICAgICAgICAgICAgICBfaXRlcmF0b3IzID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoX3RoaXMzLnNlbGVjdGVkVGFza0NhdGVnb3JpZXMpOwogICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDQwOwoKICAgICAgICAgICAgICAgIF9pdGVyYXRvcjMucygpOwoKICAgICAgICAgICAgICBjYXNlIDQyOgogICAgICAgICAgICAgICAgaWYgKChfc3RlcDMgPSBfaXRlcmF0b3IzLm4oKSkuZG9uZSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNjI7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF9zZWxlY3RlZENhdGVnb3J5ID0gX3N0ZXAzLnZhbHVlOwogICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDQ0OwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDQ3OwogICAgICAgICAgICAgICAgcmV0dXJuIENhdGVnb3J5RGF0YVNlcnZpY2UuZmluZCh7CiAgICAgICAgICAgICAgICAgIG5hbWU6IF9zZWxlY3RlZENhdGVnb3J5CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSA0NzoKICAgICAgICAgICAgICAgIF9jYXRlZ29yeTIgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDUwOwogICAgICAgICAgICAgICAgcmV0dXJuIFRhc2tEYXRhU2VydmljZS5hZGRDYXRlZ29yeSh7CiAgICAgICAgICAgICAgICAgIHRhc2tJZDogdGFza0lkLAogICAgICAgICAgICAgICAgICBjYXRlZ29yeUlkOiBfY2F0ZWdvcnkyLmRhdGEuaWQKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDUwOgogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDYwOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgNTI6CiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gNTI7CiAgICAgICAgICAgICAgICBfY29udGV4dC50MiA9IF9jb250ZXh0WyJjYXRjaCJdKDQ0KTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA1NjsKICAgICAgICAgICAgICAgIHJldHVybiBDYXRlZ29yeURhdGFTZXJ2aWNlLmNyZWF0ZSh7CiAgICAgICAgICAgICAgICAgIG5hbWU6IF9zZWxlY3RlZENhdGVnb3J5CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSA1NjoKICAgICAgICAgICAgICAgIF9jYXRlZ29yeTMgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDU5OwogICAgICAgICAgICAgICAgcmV0dXJuIFRhc2tEYXRhU2VydmljZS5hZGRDYXRlZ29yeSh7CiAgICAgICAgICAgICAgICAgIHRhc2tJZDogdGFza0lkLAogICAgICAgICAgICAgICAgICBjYXRlZ29yeUlkOiBfY2F0ZWdvcnkzLmRhdGEuaWQKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDU5OgogICAgICAgICAgICAgICAgY29uc29sZS5sb2coIkFkZGVkIik7CgogICAgICAgICAgICAgIGNhc2UgNjA6CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNDI7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSA2MjoKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA2NzsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDY0OgogICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDY0OwogICAgICAgICAgICAgICAgX2NvbnRleHQudDMgPSBfY29udGV4dFsiY2F0Y2giXSg0MCk7CgogICAgICAgICAgICAgICAgX2l0ZXJhdG9yMy5lKF9jb250ZXh0LnQzKTsKCiAgICAgICAgICAgICAgY2FzZSA2NzoKICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSA2NzsKCiAgICAgICAgICAgICAgICBfaXRlcmF0b3IzLmYoKTsKCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuZmluaXNoKDY3KTsKCiAgICAgICAgICAgICAgY2FzZSA3MDoKICAgICAgICAgICAgICAgIFRhc2tEYXRhU2VydmljZS51cGRhdGUobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Rhc2tJZCcpLCBkYXRhKS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzKTsKCiAgICAgICAgICAgICAgICAgIF90aGlzMy4kcm91dGVyLnB1c2goewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJ5b3VyVGFza3MiCiAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgX3RoaXMzLiRzdG9yZS5kaXNwYXRjaCgnc2hvd01lc3NhZ2UnLCB7CiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogcmVzLmRhdGEubWVzc2FnZQogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgICAgICAgICAgX3RoaXMzLiRzdG9yZS5kaXNwYXRjaCgnc2hvd01lc3NhZ2UnLCB7CiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogZXJyLnJlc3BvbnNlLmRhdGEubWVzc2FnZSwKICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZQogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDcxOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSwgbnVsbCwgW1syLCAyOV0sIFs5LCAyMCwgMjMsIDI2XSwgWzQwLCA2NCwgNjcsIDcwXSwgWzQ0LCA1Ml1dKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgdmFyaWFibGVJbmZvOiBmdW5jdGlvbiB2YXJpYWJsZUluZm8oaSkgewogICAgICB0aGlzLmluZGV4ViA9IGk7CiAgICAgIHRoaXMub3ZlcmxheVYgPSB0cnVlOwogICAgfSwKICAgIGFkZGVkVmFyaWFibGVJbmZvOiBmdW5jdGlvbiBhZGRlZFZhcmlhYmxlSW5mbyhpKSB7CiAgICAgIHRoaXMuaW5kZXhBViA9IGk7CiAgICAgIHRoaXMub3ZlcmxheUFkZFYgPSB0cnVlOwogICAgfSwKICAgIGFuc3dlckluZm86IGZ1bmN0aW9uIGFuc3dlckluZm8oaSkgewogICAgICB0aGlzLmluZGV4QSA9IGk7CiAgICAgIHRoaXMub3ZlcmxheUEgPSB0cnVlOwogICAgfSwKICAgIHByZXZpZXdUYXNrOiBmdW5jdGlvbiBwcmV2aWV3VGFzaygpIHsKICAgICAgdmFyIF90aGlzNCA9IHRoaXM7CgogICAgICBHZW5lcmF0b3JTZXJ2aWNlLmdlbmVyYXRlKHsKICAgICAgICBjb250ZW50OiB0aGlzLmV4dF90ZXh0LnRhc2sKICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgX3RoaXM0LnByZXZpZXcgPSByZXMuZGF0YS5jb250ZW50OwogICAgICAgIF90aGlzNC5tZXNzYWdlID0gcmVzLmRhdGEubWVzc2FnZTsKICAgICAgICBfdGhpczQuc3VjY2VzcyA9IHRydWU7CiAgICAgICAgX3RoaXM0LmluZm9NZXNzYWdlID0gdHJ1ZTsKICAgICAgICBfdGhpczQudGFza092ZXJsYXkgPSB0cnVlOyAvL2luaXRNYXRoSmF4KHt9LCAoKSA9PiB7IHJlbmRlckJ5TWF0aGpheChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFzaycpKTsgfSk7CgogICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdkYXRhJywgX3RoaXM0LmV4dF90ZXh0LmdlbmVyYXRlVGV4dCgpKTsKICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgIHZhciBfZXJyJHJlc3BvbnNlLCBfZXJyJHJlc3BvbnNlJGRhdGE7CgogICAgICAgIF90aGlzNC5tZXNzYWdlID0gKGVyciA9PT0gbnVsbCB8fCBlcnIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfZXJyJHJlc3BvbnNlID0gZXJyLnJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfZXJyJHJlc3BvbnNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2VyciRyZXNwb25zZSRkYXRhID0gX2VyciRyZXNwb25zZS5kYXRhKSA9PT0gbnVsbCB8fCBfZXJyJHJlc3BvbnNlJGRhdGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lcnIkcmVzcG9uc2UkZGF0YS5tZXNzYWdlKSB8fCBlcnIubWVzc2FnZTsKICAgICAgICBfdGhpczQuc3VjY2VzcyA9IGZhbHNlOwogICAgICAgIF90aGlzNC5pbmZvTWVzc2FnZSA9IHRydWU7CiAgICAgIH0pOwogICAgfSwKICAgIHNhdmVUZXh0OiBmdW5jdGlvbiBzYXZlVGV4dCgpIHsKICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2RhdGEnLCB0aGlzLnRleHQpOwogICAgICB0aGlzLmNyZWF0ZU5ld1Rhc2soKTsKICAgIH0sCiAgICByZXN0b3JlVGV4dDogZnVuY3Rpb24gcmVzdG9yZVRleHQoKSB7Ly8gVE9ETyA/CiAgICB9LAogICAgLy8gVmFyaWFibGVzCiAgICBhZGRWYXJpYWJsZTogZnVuY3Rpb24gYWRkVmFyaWFibGUoKSB7CiAgICAgIHZhciBuZXdWYXJpYWJsZSA9IG5ldyBWYXJpYWJsZSgiJG5ld1ZhciIpOwogICAgICBuZXdWYXJpYWJsZS5hZGRlZCA9IHRydWU7CiAgICAgIHRoaXMuZXh0X3RleHQudGFzay52YXJpYWJsZXMucHVzaChuZXdWYXJpYWJsZSk7CiAgICB9LAogICAgc2V0VmFyaWFibGVOYW1lOiBmdW5jdGlvbiBzZXRWYXJpYWJsZU5hbWUoZSkgewogICAgICB0aGlzLmV4dF90ZXh0LnRhc2sudmFyaWFibGVzW3RoaXMuaW5kZXhWXS5uYW1lID0gZS50YXJnZXQuaW5uZXJUZXh0OwogICAgfSwKICAgIHJlbW92ZVZhcmlhYmxlOiBmdW5jdGlvbiByZW1vdmVWYXJpYWJsZShpKSB7CiAgICAgIHRoaXMuZXh0X3RleHQudGFzay52YXJpYWJsZXMuc3BsaWNlKGksIDEpOwogICAgfSwKICAgIC8vIFF1ZXN0aW9ucwogICAgYWRkUXVlc3Rpb246IGZ1bmN0aW9uIGFkZFF1ZXN0aW9uKCkgewogICAgICB0aGlzLmV4dF90ZXh0LnRhc2sucXVlc3Rpb25zLnB1c2gobmV3IFF1ZXN0aW9uKCkpOwogICAgfSwKICAgIHJlbW92ZVF1ZXN0aW9uOiBmdW5jdGlvbiByZW1vdmVRdWVzdGlvbihpKSB7CiAgICAgIHRoaXMuZXh0X3RleHQudGFzay5xdWVzdGlvbnMuc3BsaWNlKGksIDEpOwogICAgfSwKICAgIC8vIEFuc3dlcnMKICAgIGFkZENvcnJlY3Q6IGZ1bmN0aW9uIGFkZENvcnJlY3QoKSB7CiAgICAgIHRoaXMuZXh0X3RleHQudGFzay5hbnN3ZXJzW3RoaXMuaW5kZXhBXS5jb3JyZWN0LnB1c2gobmV3IFN0cmluZygiIikpOwogICAgfSwKICAgIHJlbW92ZUNvcnJlY3Q6IGZ1bmN0aW9uIHJlbW92ZUNvcnJlY3QoaSkgewogICAgICB0aGlzLmV4dF90ZXh0LnRhc2suYW5zd2Vyc1t0aGlzLmluZGV4QV0uY29ycmVjdC5zcGxpY2UoaSwgMSk7CiAgICB9LAogICAgYWRkSW5jb3JyZWN0OiBmdW5jdGlvbiBhZGRJbmNvcnJlY3QoKSB7CiAgICAgIHRoaXMuZXh0X3RleHQudGFzay5hbnN3ZXJzW3RoaXMuaW5kZXhBXS5pbmNvcnJlY3QucHVzaChuZXcgU3RyaW5nKCIiKSk7CiAgICB9LAogICAgcmVtb3ZlSW5jb3JyZWN0OiBmdW5jdGlvbiByZW1vdmVJbmNvcnJlY3QoaSkgewogICAgICB0aGlzLmV4dF90ZXh0LnRhc2suYW5zd2Vyc1t0aGlzLmluZGV4QV0uaW5jb3JyZWN0LnNwbGljZShpLCAxKTsKICAgIH0sCiAgICBwYXJzZVRleHQ6IGZ1bmN0aW9uIHBhcnNlVGV4dCgpIHsKICAgICAgdmFyIF90aGlzNSA9IHRoaXM7CgogICAgICAvLyBURVhUCiAgICAgIHRoaXMuZXh0X3RleHQudGFzay50ZXh0ID0gdGhpcy50ZXh0OwogICAgICB2YXIgdG9rZW5zID0gdG9rZW5pemUodGhpcy50ZXh0KTsgLy8gVkFSSUFCTEVTCgogICAgICB0aGlzLnZhcmlhYmxlcyA9IHRoaXMuZXh0X3RleHQuZXh0cmFjdFZhcmlhYmxlcyh0b2tlbnMpOyAvLyBBTlNXRVJTCgogICAgICB0aGlzLmFuc3dlcnMgPSB0aGlzLmV4dF90ZXh0LmV4dHJhY3RBbnN3ZXJzKHRva2Vucyk7IC8vIEV4dHJhY3QgYW5zd2VyIGZyb20gZWFjaCBxdWVzdGlvbgogICAgICAvLyBBc3N1bWUgbGlzdCBvZiB2YXJpYWJsZXMgaGFzIGNoYW5nZWQKICAgICAgLy8gYW5kIHNldCB2aXNpYmxpdHkgdG8gZmFsc2UgZm9yIGFsbCB2YXJpYWJsZXMKCiAgICAgIHRoaXMuZXh0X3RleHQudGFzay5hbnN3ZXJzLmZvckVhY2goZnVuY3Rpb24gKGFuc3dlcikgewogICAgICAgIGFuc3dlci52aXNpYmxlID0gZmFsc2U7CiAgICAgIH0pOyAvLyBRVUVTVElPTlMKCiAgICAgIHRoaXMuZXh0X3RleHQudGFzay5xdWVzdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAocXVlc3Rpb24pIHsKICAgICAgICAvL2NvbnNvbGUubG9nKCdRJyxxdWVzdGlvbik7CiAgICAgICAgLy9jb25zb2xlLmxvZyh0b2tlbml6ZSgiUTogIiwgcXVlc3Rpb24udGV4dCkpOwogICAgICAgIF90aGlzNS5leHRfdGV4dC5leHRyYWN0QW5zd2Vycyh0b2tlbml6ZShxdWVzdGlvbi50ZXh0KSk7CiAgICAgIH0pOwoKICAgICAgdHJ5IHsKICAgICAgICB2YXIgZ2VuZXJhdGVkX3RleHQgPSB0aGlzLmV4dF90ZXh0LmdlbmVyYXRlVGV4dCgpOwogICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdzaG93TWVzc2FnZScsIHsKICAgICAgICAgIG1lc3NhZ2U6ICJTdWNjZXNzZnVseSBldmFsdWF0ZWQhIgogICAgICAgIH0pOyAvL2NvbnNvbGUubG9nKGdlbmVyYXRlZF90ZXh0KTsKICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ3Nob3dNZXNzYWdlJywgewogICAgICAgICAgbWVzc2FnZTogZXJyLm1lc3NhZ2UsCiAgICAgICAgICBzdWNjZXNzOiBmYWxzZQogICAgICAgIH0pOwogICAgICB9CiAgICB9CiAgfQp9Ow=="},{"version":3,"sources":["createtaskpage.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <v-container id=\"task\" class=\"d-flex flex-column justify-start align-center mt-2 pb-0 b-g rounded-lg\" style=\"position: relative;\">\n\n        <v-btn elevation=\"1\" large color=\"primary\" icon style=\"position: absolute; left: 0.5rem; background-color: white\"\n            class=\"px-6 py-2 mx-2 no-uppercase\" @click=\"helpDialog = true\"> \n            <v-icon>mdi-help-circle-outline</v-icon>\n        </v-btn>\n\n        <!-- Task name -->        \n        <h4 class=\"text-h5 custom-font my-4 font-weight-medium\"> {{ this.name }} </h4>\n\n        <v-container fluid rounded label=\"Task\" class=\"d-flex flex-row\" style=\"height: 100%;\">\n\n            <!-- Left side -->\n            <v-col cols=\"16\" class=\"mx-2 py-0 px-2 ma-0 d-flex flex-column justify-start\">\n\n            <!-- Task text text-field -->\n            <div class=\"d-flex flex-column justify-start flex-grow-0\">\n                <h3 class=\"ml-2 mb-1\"> Task text </h3>\n                <v-textarea text-narrow spellcheck=\"false\" background-color=\"white\" color=\"black\"\n                    id=\"task-text\" class=\"text-h3 pb-2\" v-model=\"text\" solo no-resize hide-details rows=\"5\">\n                </v-textarea>\n            </div>\n\n            <!-- Variables chips section -->\n            <h3 class=\"ml-2 mb-1\"> Variables </h3>          \n                <div class=\"d-flex flex-row flex-wrap align-center ma-0 pa-0 minus\">\n                    <div v-for=\"(variable, ind) in ext_text.task.variables\" :key=\"ind + 'v'\" class=\"ma-0 pa-0\">\n                        <v-chip v-if=\"variable.visible\" @click=\"variableInfo(ind)\"\n                            color=\"primary\" label class=\"mx-2 my-1 px-6 py-4 pointer elevation-1\">\n                            {{ variable.name.substr(1) }}\n                        </v-chip>\n                    </div>                    \n                    \n                    <!-- Add variable icon -->\n                    <div>\n                        <v-btn @click=\"addVariable()\" depressed class=\"no-uppercase\">\n                            <v-icon>mdi-plus</v-icon>\n                            Add Variable\n                        </v-btn>\n                    </div>\n                </div>\n\n                <!-- Answers chips section -->\n                <h3 class=\"ml-2\">Answers</h3>\n                    <div class=\"d-flex flex-row flex-wrap align-center ma-0 pa-0 minus\">\n                        <div v-for=\"(answer, i) in ext_text.task.answers\" :key=\"i + 'a'\" class=\"ma-0 pa-0\">\n                            <v-chip v-if=\"answer.visible\" @click=\"answerInfo(i)\"\n                                color=\"primary\" label class=\"mx-2 my-1 px-6 py-4 pointer\">\n                                {{ answer.name.substr(1) }}\n                            </v-chip>\n                        </div>\n                    </div>\n\n            <!-- PREVIEW -->\n            <v-overlay id=\"latexMath\" :value=\"taskOverlay\" :light=\"true\" :dark=\"false\">\n                <v-sheet \n                    elevation=\"4\" width=\"650\"\n                    style=\"height: 600px; overflow-y: auto\"\n                    class=\"pa-4 ma-2 d-flex flex-column justify-flex-start align-flex-start rounded-lg\">\n                    \n                    <v-btn plain icon @click=\"taskOverlay = false\" class=\"close-button mt-4 mr-6 pa-0 shrink\">\n                        <v-icon color=\"danger\">mdi-close</v-icon>\n                    </v-btn>\n\n                    <h3 class=\"ma-2 pa-1\"> {{ preview.text.trim() }} </h3>\n                    <div class=\"d-flex flex-column ma-2 pa-1\" v-for=\"(q, i) in preview.questions\" :key=\"'q' + i\">\n                        \n                        <h4 class=\"ma-1\"> {{ replaceAnswers(q.text.trim()) }} </h4>\n\n                        <div class=\"ma-1 pa-1\" v-for=\"(a, i) in q.answers\" :key=\"'a' + i\">\n                            <p v-for=\"(item, index) in a.correct\" :key=\"index\"> a) {{item}} </p>\n                            <p v-for=\"(item, index) in a.incorrect\" :key=\"'ia' + index\"> \n                                {{ String.fromCharCode(98 + index) + ')'}} {{item}} \n                            </p>\n                        </div>\n                    </div>\n                </v-sheet>\n            </v-overlay>\n\n            </v-col>\n            \n            <!-- Right side -->\n            <v-col cols=\"16\" class=\"mx-2 pa-0 d-flex flex-column justify-space-between\">\n\n            <!-- Questions section -->\n            <div class=\"d-flex flex-column justify-start flex-grow-0\">\n                <h3 class=\"ml-2 mb-0\"> Questions </h3>\n                <div class=\"d-flex flex-column justify-start\" style=\"height: 220px; overflow-y: auto\">\n                    <div\n                        class=\"d-flex flex-row align-center\" \n                        v-for=\"(question, i) in ext_text.task.questions\" :key=\"i\">\n                        <v-text-field\n                            :label=\"'Task question #' + i\"\n                            placeholder=\"eq.: What is the result? @res\"\n                            solo hide-details color=\"error\"\n                            class=\"my-1 d-flex flex-grow-1\"\n                            v-model=\"ext_text.task.questions[i].text\">\n                            <template v-slot:append>\n                                <v-icon color=\"error\" @click=\"removeQuestion(i)\">mdi-delete-empty</v-icon>\n                            </template>\n                        \n                        </v-text-field>\n                    </div>\n                    <!-- Add question button -->\n                    <v-btn @click=\"addQuestion\" depressed class=\"my-1 no-uppercase align-self-start\">\n                        <v-icon>mdi-plus</v-icon>  \n                        Add Question \n                    </v-btn>\n                </div>\n            </div>\n            <div class=\"d-flex flex-row mt-2 mb-1 justify-self-end justify-end\">\n                <v-btn large class=\"px-6 py-2 mx-2 no-uppercase\" @click=\"parseText\">Evaluate</v-btn>\n                <v-btn large class=\"px-6 py-2 mx-2 no-uppercase\" @click=\"previewTask\">Preview</v-btn>\n                <v-btn elevation=\"2\" large color=\"primary\"\n                class=\"px-6 py-2 mx-2 no-uppercase\" @click=\"getCategories(); overlaySave = true\"> Save\n                </v-btn>\n                <!-- <v-btn class=\"mx-1\" @click=\"restoreText\">Restore</v-btn> -->\n            </div>\n\n            </v-col>\n        </v-container>\n\n        <!-- Make this a dialog...variale dialog -->\n        <v-overlay tabindex=\"0\" @keydown.esc=\"overlayV = false\"\n            :value=\"overlayV\" :light=\"true\" :dark=\"false\" v-if=\"ext_text.task.variables.length != 0\">\n            <v-sheet \n                elevation=\"4\" width=\"500\" \n                class=\"pa-4 ma-2 mt-0 pt-2 d-flex flex-column justify-flex-start align-flex-start rounded-lg\">\n                <!-- Close icon -->\n                <v-btn plain icon @click=\"overlayV = false\" class=\"close-button mt-4 mr-6 pa-0 shrink\">\n                    <v-icon color=\"danger\">mdi-close</v-icon>\n                </v-btn>\n                <!-- Delete variable -->\n                <v-btn \n                    v-if=\"ext_text.task.variables[indexV].added\"\n                    icon @click=\"overlayV = false; removeVariable(indexV)\"\n                    class=\"close-button mt-4 mr-14 pa-0 shrink\">\n                    <v-icon color=\"red\">mdi-delete</v-icon>\n                </v-btn>\n\n                <h2 class=\"ma-2 mt-3\" :contenteditable=\"ext_text.task.variables[indexV].added\"> \n                    {{ ext_text.task.variables[indexV].name }} \n                </h2>\n                \n                <p class=\"ma-2\"> Definition </p>\n                <v-text-field \n                    label=\"\" placeholder=\"e.g.: ( $a * 2 ) + 1\" \n                    v-model=\"ext_text.task.variables[indexV].definition\" \n                    outlined dense class=\"shrink mx-2\"> \n                    {{ ext_text.task.variables[indexV].definition }} \n                </v-text-field>\n                \n                <p class=\"ma-2 mt-0\"> Range {{ ext_text.task.variables[indexV].range.fullRange() }} </p>\n                <v-row class=\"d-flex flex-row flex-nowrap px-3\">\n                    <v-text-field \n                        label=\"Start\" v-model=\"ext_text.task.variables[indexV].range.start\" \n                        outlined dense class=\"shrink mx-2 mt-3\">\n                    </v-text-field>\n                    <v-text-field \n                        label=\"End\" v-model=\"ext_text.task.variables[indexV].range.end\" \n                        outlined dense class=\"shrink mx-2 mt-3\">\n                    </v-text-field>\n                    <v-text-field \n                        label=\"Step\" v-model=\"ext_text.task.variables[indexV].range.step\"\n                        outlined dense class=\"shrink mx-2 mt-3\">\n                    </v-text-field>\n                </v-row>\n            </v-sheet>\n        </v-overlay>\n\n        <!-- Answer overlay -->\n        <v-overlay\n            :light=\"true\" :dark=\"false\"\n            :value=\"overlayA\" v-if=\"ext_text.task.answers.length != 0\">\n            <v-sheet \n            elevation=\"4\" width=\"500\" \n            height=\"500px\"\n            class=\"pa-4 ma-2 mt-0 pt-2 d-flex flex-column justify-flex-start align-flex-start rounded-lg overflow-y-auto\">\n            <!-- Close icon -->\n            <v-btn plain icon @click=\"overlayA = false\" class=\"close-button mt-4 mr-6 pa-0 shrink\">\n                <v-icon color=\"danger\">mdi-close</v-icon>\n            </v-btn>\n            <h2 class=\"ma-2 mt-3\"> \n                {{ ext_text.task.answers[indexA].name }}\n            </h2>\n\n            <p class=\"ma-2 mt-0\"> Range {{ ext_text.task.answers[indexA].range.fullRange() }} </p>\n            <v-row class=\"d-flex flex-row flex-nowrap px-3 shrink\">\n                <v-text-field \n                    label=\"Start\" v-model=\"ext_text.task.answers[indexA].range.start\" \n                    outlined dense class=\"shrink mx-2 mt-3\">\n                </v-text-field>\n                <v-text-field \n                    label=\"End\" v-model=\"ext_text.task.answers[indexA].range.end\" \n                    outlined dense class=\"shrink mx-2 mt-3\">\n                </v-text-field>\n            </v-row>\n\n            <p class=\"ma-2 mt-0\">Correct</p>\n            <div \n                class=\"d-flex flex-row\" \n                v-for=\"(el, i) in ext_text.task.answers[indexA].correct\" :key=\"'el_c' + i\">\n                <v-text-field \n                    label=\"\" \n                    placeholder=\"e.g.: ( $a * 2 ) + 1\" \n                    v-model=\"ext_text.task.answers[indexA].correct[i]\" \n                    outlined dense class=\"mx-2 my-0\"> \n                    {{ el }}\n                </v-text-field>\n                <v-btn\n                    @click=\"removeCorrect(i)\" \n                    icon plain color=\"red\" class=\"mx-2\">\n                    <v-icon>mdi-delete-empty</v-icon>\n                </v-btn>\n            </div>\n            <v-btn depressed class=\"mx-2\" @click=\"addCorrect\">\n                <v-icon>mdi-plus</v-icon>\n                Add correct answer\n            </v-btn>\n\n            \n            <p class=\"ma-2\">Incorrect</p>\n            <div \n                class=\"d-flex flex-row\" \n                v-for=\"(el, i) in ext_text.task.answers[indexA].incorrect\" :key=\"'el_ic' + i\">\n                <v-text-field \n                    label=\"\" \n                    placeholder=\"e.g.: ( $a * 2 ) + 1\" \n                    v-model=\"ext_text.task.answers[indexA].incorrect[i]\" \n                    outlined dense class=\"mx-2 my-0\"> \n                    {{ ext_text.task.answers[indexA].incorrect }}\n                </v-text-field>\n                <v-btn \n                    @click=\"removeIncorrect(i)\"\n                    icon plain color=\"red\" class=\"mx-2\">\n                    <v-icon>mdi-delete-empty</v-icon>\n                </v-btn>\n            </div>\n            <v-btn depressed class=\"mx-2\" @click=\"addIncorrect\">\n                <v-icon>mdi-plus</v-icon>\n                Add incorrect answer\n            </v-btn>\n            \n            </v-sheet>\n        </v-overlay>\n\n        <!-- Answer type options dialog -->\n        <v-dialog v-model=\"overlaySave\" width=\"450\" :retain-focus=\"false\">\n            <v-card class=\"d-flex flex-column rounded-lg pt-2\">\n                <p class=\"pb-4 my-2 font-weight-medium text-h5 align-self-center\"> Task details</p>\n\n                <!-- Set task name -->\n                <v-text-field \n                    class=\"px-4\" v-model=\"taskName\" outlined label=\"Task name\" placeholder=\"Enter task name\">\n                </v-text-field>\n\n                <!-- Select grade -->\n                <v-select \n                    class=\"px-4\" :items=\"$store.state.test.grades\" v-model=\"taskGrade\" outlined label=\"Grade\">\n                </v-select>\n\n                <!-- Set categories to task -->\n                <v-combobox class=\"px-4\" label=\"Categories\" v-model=\"selectedTaskCategories\" \n                    :items=\"taskCategories\" multiple chips outlined>\n                    <template v-slot:selection=\"data\">\n                        <v-chip color=\"primary\" class=\"pa-2\" v-bind=\"data.attrs\">\n                        {{ data.item }}\n                        </v-chip>\n                    </template>\n                </v-combobox>\n\n                <v-divider></v-divider>\n\n                <v-card-actions>\n                    <v-spacer></v-spacer>\n                    <v-btn color=\"black\" outlined text @click=\"overlaySave= false\"> Cancel </v-btn>\n                    <v-btn dark color=\"primary\" @click=\"saveText(); overlaySave = false\"> Save </v-btn>\n                </v-card-actions>\n                \n            </v-card>\n        </v-dialog>\n\n        <v-dialog v-model=\"helpDialog\" width=\"450\" :retain-focus=\"false\">\n            <v-card class=\"d-flex flex-column rounded-lg pt-2\">\n                <v-card-title> Task creation process </v-card-title>\n\n                <v-card-text>\n                    (You can check out other created tasks in the Your tasks page when you click modify) <br>\n                    1. Define task text <br>\n                        $variable_name will be replaced with a concrete value once defined <br>\n                    2. Click the Evaluate button when you want to define variables or answers <br>\n                    3. Add and define a question text @answer_name will be replaced by the defined asnwer options <br>\n                    4. Under Variables section, you can set the ranges for each variable <br>\n                    5. Under Answers section, you can set a template for each answer correct and incorrect <br>\n                    6. Hit Preview to see how the task looks like <br>\n                    7. hit Save when you are done, set Task grade and categories <br>\n\n                </v-card-text>\n\n                <v-divider></v-divider>\n\n                <v-card-actions>\n                    <v-spacer></v-spacer>\n                    <v-btn dark color=\"primary\" @click=\"helpDialog = false\"> Okay </v-btn>\n                </v-card-actions>\n                \n            </v-card>\n        </v-dialog>\n\n    </v-container>\n</template>\n\n<script>\n    import { tokenize, Token } from \"../myfiles/tokenizer.js\"\n    import { parseMathLang, Question, ConcreteTask, Variable } from \"../myfiles/taskHandler\"\n    import { Extractor } from \"../myfiles/extractorModule\";\n\n    import TaskDataService from \"../services/taskDataService\";\n    import GeneratorService from \"../services/generatorService\";\n    import CategoryDataService from \"../services/categoryDataService.js\";\n\n    import * as math from 'mathjs';\nimport testDataService from '../services/testDataService.js';\n\n    export default {\n        data() {   \n            return {\n                taskCategories: [],\n                selectedTaskCategories: [],\n                \n                name: \"New Task\",\n                taskName: \"\",\n                taskGrade: null,\n                text: \"\",\n                task_text: \"\",\n\n                formula: '$$x = {-b \\\\pm \\\\sqrt{b^2-4ac} \\\\over 2a}.$$',\n\n                ext_text: new Extractor(),\n                preview: new ConcreteTask(),\n                \n                variables: [],\n                questions: [],\n                answers: [],\n\n                overlayV: false,\n                overlayA: false,\n                overlayAddV: false,\n                overlaySave: false,\n                taskOverlay: false,\n                helpDialog: false,\n                indexV: 0,\n                indexAV: 0,\n                indexA: 0,\n            };\n        },\n        computed: {\n            getText() { return this.text; }\n        },\n\n        // Load task depending on navigation origin\n        beforeMount() {\n            console.log(\"taskId from route params\", localStorage.getItem('taskId'))\n\n            // Modify was selected from task history\n            if( this.$route.params.taskId ) \n            {\n                // Save id to localStorage, so we can reload page without lossing the id\n                localStorage.setItem('taskId', this.$route.params.taskId)\n            }\n\n            // Id was saved from route params or if the page was reloaded\n            if ( localStorage.getItem('taskId') )\n            {\n                // Load the task content from the database\n                TaskDataService.get(localStorage.getItem('taskId'))\n                    .then((res) => {\n                        console.log(res);\n\n                        try {\n                            this.name = res.data.name;\n                            this.taskName = res.data.name;\n                            this.taskGrade = res.data.grade;\n                            this.ext_text.task = parseMathLang(res.data.content);\n                            res.data.categories.forEach(({name}) => {\n                                this.selectedTaskCategories.push(name);\n                            });\n\n                            console.log('RECIEVED: ', res.data);\n                            this.$store.dispatch('showMessage', { message: \"Parsing successful!\" });\n\n                        } catch (error) {\n                            this.$store.dispatch('showMessage', { message: error.message, success: false });\n                        }\n                        // this.ext_text.task = parseMathLang(res.data.content);\n\n                        this.text = this.ext_text.task.text.trim();\n                    })\n                    .catch((error) => { \n                        this.errorHandler(error); \n                    });\n            }\n\n            // Get categories\n            CategoryDataService.getAll().then(({data}) => {\n                this.taskCategories = data.map(({name}) => name);\n            })\n        },\n\n        mounted() { },\n\n        created() { },\n\n        methods: {\n\n            getCategories() {\n                CategoryDataService.getAll().then(({data}) => {\n                    this.taskCategories = data.map(({name}) => name);\n                });\n            },\n\n            replaceAnswers(_qText) {\n\n                try {\n                    let cleanText = _qText.replaceAll(Token.types.gAnswer, \"\").replaceAll(\"=\", \"\").trim();\n                    return math.parse(cleanText).toTex();\n                } catch(error) {\n                    return _qText;\n                }\n            },\n\n            testext() {\n                // Test extraction\n                this.ext_text.extractVariable(tokenize(this.text));\n            },\n\n            async createNewTask() \n            {\n                // Prepare data for sending\n                var data = { name: this.taskName, grade: this.taskGrade, content: this.ext_text.generateText() };\n\n                // Create new entry in database\n                if ( localStorage.getItem('taskId') == null) {\n                    \n                    try{\n                        let newTask = await TaskDataService.create(data);\n\n                        localStorage.setItem('taskId', newTask.data.id);\n\n                        console.log(this.selectedTaskCategories);\n\n                        for(let selectedCategory of this.selectedTaskCategories) {\n                            let category = await CategoryDataService.find({name: selectedCategory});\n\n                            // check\n                        }\n\n                        this.$store.dispatch('showMessage', { message: \"Task saved successfuly\" });\n                    } catch(error) {\n                        // log\n                        this.$store.dispatch('showMessage', { message: error.response.data.message, success: false });\n                    }\n                    }\n\n                // Update existing entry\n                else {    \n\n                    let taskId = localStorage.getItem('taskId');\n                    let task = await TaskDataService.get(taskId);\n\n                    try{\n                        // Delete each category on the task\n                        for(let category of task.data.categories) {\n                            TaskDataService.removeCategory({ taskId: taskId, categoryId: category.id });\n                        }\n                    } catch(error) {\n                        //\n                        console.log(\"Error while deleting categories from task\");\n                    }\n\n                    // Add each selectedCategory to task\n                    for(let selectedCategory of this.selectedTaskCategories) {\n\n                        try {\n                            // Find category id in DB\n                            let category = await CategoryDataService.find({name: selectedCategory}); \n                            \n                            // Add category to task\n                            await TaskDataService.addCategory(\n                                { taskId: taskId, categoryId: category.data.id }\n                            )\n                        } catch(error) {\n\n                            // Create category\n                            let category = await CategoryDataService.create({name: selectedCategory});\n                            \n                            // Add category to task\n                            await TaskDataService.addCategory(\n                                { taskId: taskId, categoryId: category.data.id }\n                            )\n\n                            console.log(\"Added\");\n                        }\n                    }\n\n\n                    TaskDataService.update( localStorage.getItem('taskId'), data ) \n                        .then((res) => {\n                            console.log(res);\n                            this.$router.push({name: \"yourTasks\"});\n                            this.$store.dispatch('showMessage', { message: res.data.message });\n                        })\n                        .catch((err) => {\n                            this.$store.dispatch('showMessage', { message: err.response.data.message, success: false });\n                        })\n                }\n            },\n\n            variableInfo : function(i) {\n                this.indexV = i\n                this.overlayV = true\n            },\n            addedVariableInfo: function(i) {\n                this.indexAV = i\n                this.overlayAddV = true;\n            },\n            answerInfo: function(i) {\n                this.indexA = i\n                this.overlayA = true\n            },\n            previewTask: function () {\n\n                GeneratorService\n                    .generate( { content: this.ext_text.task } )\n                    .then((res) => {\n                        this.preview = res.data.content;\n                        this.message = res.data.message;\n                        this.success = true;\n                        this.infoMessage = true;\n\n                        this.taskOverlay = true\n\n                        //initMathJax({}, () => { renderByMathjax(document.getElementById('task')); });\n                        localStorage.setItem('data', this.ext_text.generateText() );\n                    })\n                    .catch((err) => {\n                        this.message = err?.response?.data?.message || err.message;\n                        this.success = false;\n                        this.infoMessage = true;\n                    });\n            },\n            saveText: function() {\n                localStorage.setItem('data', this.text);\n\n                this.createNewTask();\n            },\n            restoreText: function() {\n                // TODO ?\n            },\n\n\n            // Variables\n            addVariable: function() {\n                let newVariable = new Variable(\"$newVar\");\n                newVariable.added = true;\n                \n                this.ext_text.task.variables.push(newVariable);\n            },\n            setVariableName: function(e) {\n                this.ext_text.task.variables[this.indexV].name = e.target.innerText;\n            },\n            removeVariable: function(i) {\n                this.ext_text.task.variables.splice(i, 1);\n            },\n\n            // Questions\n            addQuestion: function() {\n                this.ext_text.task.questions.push(new Question());\n            },\n            removeQuestion: function(i) {\n                this.ext_text.task.questions.splice(i, 1);\n            },\n\n            // Answers\n            addCorrect: function() {\n                this.ext_text.task.answers[this.indexA].correct.push(new String(\"\"));\n            },\n            removeCorrect: function(i) {\n                this.ext_text.task.answers[this.indexA].correct.splice(i, 1);\n            },\n            addIncorrect: function() {\n                this.ext_text.task.answers[this.indexA].incorrect.push(new String(\"\"));\n            },\n            removeIncorrect: function(i) {\n                this.ext_text.task.answers[this.indexA].incorrect.splice(i, 1);\n            },\n\n            parseText : function () {\n\n                // TEXT\n                this.ext_text.task.text = this.text;\n\n                let tokens = tokenize(this.text);\n\n                // VARIABLES\n                this.variables = this.ext_text.extractVariables(tokens);\n\n                // ANSWERS\n                this.answers = this.ext_text.extractAnswers(tokens);\n\n                // Extract answer from each question\n                \n                // Assume list of variables has changed\n                // and set visiblity to false for all variables\n                this.ext_text.task.answers.forEach((answer) => {\n                    answer.visible = false;\n                });\n                // QUESTIONS\n                this.ext_text.task.questions.forEach((question) => {\n\n                    //console.log('Q',question);\n                    //console.log(tokenize(\"Q: \", question.text));\n\n                    this.ext_text.extractAnswers(tokenize(question.text));\n                });\n\n                try{\n                    let generated_text = this.ext_text.generateText();\n                    this.$store.dispatch('showMessage', {message: \"Successfuly evaluated!\"});\n                    //console.log(generated_text);\n                } catch(err) {\n                    this.$store.dispatch('showMessage', {message: err.message, success: false});\n                }\n            }     \n        }\n    }\n</script>\n\n<style>\n    [text-narrow] {\n        line-height: 1.1 !important;\n        font-size: 1rem;\n    }\n\n    .pointer {\n        cursor: pointer !important;\n    }\n\n    .close-button {\n        position: absolute !important;\n        top: 0rem !important;\n        right: 0rem !important;\n    }\n\n</style>"],"sourceRoot":"src/components"}]}