{"remainingRequest":"/home/dc/Documents/BP/vue-bp-web/node_modules/babel-loader/lib/index.js!/home/dc/Documents/BP/vue-bp-web/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/dc/Documents/BP/vue-bp-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dc/Documents/BP/vue-bp-web/src/components/takeTestPage.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/dc/Documents/BP/vue-bp-web/src/components/takeTestPage.vue","mtime":1650023041727},{"path":"/home/dc/Documents/BP/vue-bp-web/babel.config.js","mtime":1646999302412},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/cache-loader/dist/cjs.js","mtime":1642114936856},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/babel-loader/lib/index.js","mtime":1642114938312},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/cache-loader/dist/cjs.js","mtime":1642114936856},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/vue-loader/lib/index.js","mtime":1642114938760}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["takeTestPage.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <v-container class=\"d-flex flex-column\">\n        <p class=\"text-h4 align-self-center\"> {{ testName }} </p>\n\n        <!-- Time for task -->\n        <v-card outlined class=\"mx-6 my-2 px-6 py-3\">\n        <p class=\"ma-0 py-2 text-body-1\"> \n            Time remaining: <span class=\"font-weight-medium text-subtitle-1\">{{ timer }}</span>\n        </p>\n        </v-card>\n\n        <!-- Cards with task details, render options preview -->\n        <v-card v-for=\"(task, tIndex) in test.content\"\n            :key=\"tIndex\" hover outlined class=\"my-2 mx-6 px-3\">\n            <!-- Task name -->\n            <v-card-title class=\"d-flex justify-space-between text-h5 font-weight-medium\">\n              Task #{{ tIndex + 1 }}\n            </v-card-title>\n            \n            <!-- Task text -->\n            <v-card-subtitle class=\"mt-1 text-body-1\"> \n              <p> {{ task.content.text }} </p> \n            </v-card-subtitle>\n            \n            <!-- Task questions, answers -->\n            <v-card-text>\n              <div \n                class=\"d-flex flex-column justify-center align-start\"  \n                v-for=\"(question, i) in task.content.questions\" :key=\"i\">\n\n                <!-- Question -->\n                <div class=\"d-flex flex-row justify-flex-start align-center\">\n                  <p\n                    class=\"font-weight-black align-self-center ma-0 text-subtitle-1\"> \n                    <span class=\"font-weight-medium text-body-1\"> Question #{{ i+1 }}: </span><br>\n                    {{ question.text.replace(/@.+/, '') }}\n                  </p>\n                </div>\n\n                <!-- Answers -->\n                <!-- type == 'select' -->\n                <div v-if=\"task.renderOption == 'select'\"\n                  class=\"d-flex flex-row justify-space-between mb-1\"> \n                  <!-- Answer options -->\n                  <div v-for=\"(answer, optIndex) in question.answers\" :key=\"optIndex\"\n                    class=\"d-flex flex-column py-1\">\n                      <v-select \n                        dense :items=\"answer.options\" \n                        :value=\"test.content[tIndex].content.questions[i].answers[optIndex].selected\" label=\"Answer\" outlined>\n                      </v-select>\n                  </div>\n                </div>\n\n                <!-- type == 'radio' -->\n                <div class=\"d-flex flex-row justify-space-between mb-1\" v-if=\"task.renderOption == 'radio'\">  \n                  <div class=\"d-flex flex-column py-1 px-2\" v-for=\"(answer, optIndex) in question.answers\" :key=\"optIndex\">\n                    <v-radio-group v-model=\"test.content[tIndex].content.questions[i].answers[optIndex].selected\">\n                      <v-radio dense class=\"py-1\"\n                        v-for=\"(value, r_i) in answer.options\" :value=\"value\"\n                        :key=\"r_i\" :label=\"value.toString()\">\n                      </v-radio>\n                    </v-radio-group>\n                  </div>\n                </div>\n\n                <!-- type == 'checkbox' -->\n                <div class=\"d-flex flex-row justify-space-between mb-1\" v-if=\"task.renderOption == 'checkbox'\"> \n                  <div class=\"d-flex flex-column py-1 px-2\" v-for=\"(answer, optIndex) in question.answers\" :key=\"optIndex\">\n                      <v-checkbox dense class=\"pa-0 ma-0\" v-for=\"(value) in answer.options\"\n                        :key=\"value\" :label=\"value.toString()\" v-model=\"test.content[tIndex].content.questions[i].answers[optIndex].selected\">\n                      </v-checkbox>\n                  </div>\n                </div>\n\n                <!-- type == 'text' -->\n                <div class=\"d-flex flex-row justify-space-between mb-1\" v-if=\"task.renderOption == 'text'\"> \n                  <div class=\"dflex flex-column py-1 mr-4\" v-for=\"(answer, optIndex) in question.answers\" :key=\"optIndex\">\n                      <v-text-field dense\n                        label=\"Asnwer\"\n                        v-model=\"test.content[tIndex].content.questions[i].answers[optIndex].selected\"\n                        outlined\n                      ></v-text-field>\n                  </div>\n                </div>\n\n              </div>\n            </v-card-text>\n          </v-card>\n\n          <!-- Action buttons -->\n          <v-row class=\"d-flex justify-end align-center pa-2 px-6 mt-2\">\n            <v-btn outlined class=\"my-2 mb-4 mx-2 align-self-end\" text @click=\"$router.push({name: 'yourAssignments'})\"> Back </v-btn>\n            <v-btn outlined color=\"primary\" class=\"my-2 mb-4 mx-2 align-self-end\" @click=\"saveAnswers()\"> Save answers </v-btn>\n            <v-btn class=\"my-2 mb-4 mx-2 align-self-end\" color=\"primary\" @click=\"finishTest()\"> Finish test </v-btn>\n          </v-row>\n        </v-container>\n</template>\n\n<script>\n  import concreteTestDataService from \"../services/concreteTestDataService\";\n\n  export default {\n      data() {\n          return {\n              testName: 'New Test Name',\n\n              // tasks\n              test: {},\n              timer: \"\",\n\n              // remove task dialog\n              exitDialog: false,\n\n              placeholderModel: {}\n          }\n      },\n      methods: {\n          // Save selected or typed answers to test\n          saveAnswers() {\n            concreteTestDataService.update(this.$route.params.id, {\n              content: this.test.content\n            }).then(({data}) => {\n              console.log(data);\n              this.$store.dispatch('showMessage', {message: \"Answers saved!\"});\n            }).catch((err) => {\n              console.log(err);\n              this.$store.dispatch('showMessage', {message: \"Error occured while saving answers...\", success: false});\n            })\n          },\n\n          // Save answers and set test as finished\n          async finishTest() {\n            concreteTestDataService.update(this.$route.params.id, {\n              content: this.test.content,\n              status: \"Finished\", \n              finishedAt: new Date()\n            }).then(async ({data}) => {\n              // Test completed\n              console.log(data);\n\n              this.$router.push({name: 'yourAssignments'});\n              this.$store.dispatch('showMessage', {message: \"Test completed!\"});\n            }).catch((err) => {\n              // error\n              console.log(err);\n              \n              this.$store.dispatch('showMessage', {message: \"Error occured while saving answers...\", success: false});\n              this.$router.push({name: 'yourAssignments'});\n            })\n          },\n\n          async syncTime() {\n\n              console.log(this.test.content);\n\n              // If the timestamps are out of line, test is over\n              let concreteTest = await concreteTestDataService.get(this.$route.params.id);\n\n              // Save timestamps \n              let shouldFinishBefore = new Date(concreteTest.data.shouldFinishBefore);\n              let now = new Date();\n\n              console.log(\"SHOULD FINISH: \", shouldFinishBefore, \"NOW: \", now);\n\n              // Check if timer should ran out\n              if( now >= shouldFinishBefore ) {\n                  // Update test status to finished and ending timestamp\n                  let response = await concreteTestDataService.update(this.$route.params.id, { \n                    status: \"Finished\", \n                    finishedAt: now\n                  });\n\n                  // Return back to yourAssignments page and show snackbar message\n                  if( response ) {\n                    this.$router.push({name: \"yourAssignments\"});\n                    this.$store.dispatch('showMessage', {message: \"Time limit reached!\", success: false});\n                  }\n              } else {\n                  // Get minutes and seconds remaining\n                  let minutes = Math.trunc( ((shouldFinishBefore - now) / (1000 * 60)) );\n                  let seconds = Math.trunc( ((shouldFinishBefore - now) / (1000)) % 60 );\n\n                  // Add 0 before\n                  minutes = minutes.toString().length == 1 ? `0${minutes}` : `${minutes}`;\n                  seconds = seconds.toString().length == 1 ? `0${seconds}` : `${seconds}`;\n\n                  // Save value\n                  this.timer =  `${minutes}m : ${seconds}s`;\n                  setTimeout(this.syncTime, 1000);\n              }\n          },\n\n          // Get selected test for starting\n          async retrieveTest() {\n              // Get ConcreteTest by ID from URL\n              let response = await concreteTestDataService.get(this.$route.params.id); \n              \n              // Save test locally\n              this.test = response.data;\n              console.log(\"TEST\", this.test);\n\n              // Check if the student started working on the test or reloaded the window/browser\n              if( this.test.status == 'Handed Out' ) {\n                  concreteTestDataService.update(\n                      this.$route.params.id, { \n                          status: \"In Progress\", \n                          shouldFinishBefore: new Date( (new Date()).getTime() + this.test.timeLimit * 60000)\n                      }\n                  // Wait until the shouldFinishBefore value updates in the DB\n                  ).then((response) => {\n                      // Each subsequent second, sync remaining time to shouldFinishBefore in DB\n                      this.syncTime();\n                  })\n              } else {\n                // Start remaining time counter\n                this.syncTime();\n              }\n          },\n      },\n\n      mounted() {\n          // Load test from the database\n          this.retrieveTest();\n      },\n\n      computed: { }\n  }\n</script>\n\n<style></style>"],"sourceRoot":"src/components"}]}