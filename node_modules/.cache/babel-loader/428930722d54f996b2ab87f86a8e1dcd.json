{"remainingRequest":"/home/dc/Documents/BP/vue-bp-web/node_modules/babel-loader/lib/index.js!/home/dc/Documents/BP/vue-bp-web/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/dc/Documents/BP/vue-bp-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dc/Documents/BP/vue-bp-web/src/components/modifyTestPage.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/dc/Documents/BP/vue-bp-web/src/components/modifyTestPage.vue","mtime":1649000749961},{"path":"/home/dc/Documents/BP/vue-bp-web/babel.config.js","mtime":1646999302412},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/cache-loader/dist/cjs.js","mtime":1642114936856},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/babel-loader/lib/index.js","mtime":1642114938312},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/cache-loader/dist/cjs.js","mtime":1642114936856},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/vue-loader/lib/index.js","mtime":1642114938760}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["modifyTestPage.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <!-- See preview of each task, modify render options -->\n    <v-container class=\"d-flex flex-column\">\n        <!-- Test name -->\n        <p class=\"text-h4 align-self-center mt-2\" @blur=\"setTestName($event)\" contenteditable=\"true\" > {{ testName }} </p>\n\n        <v-card hover outlined class=\"my-2 mx-6\" v-for=\"(task, t_index) in concreteTasks\" :key=\"t_index\">\n        \n        <v-card-title class=\"d-flex justify-space-between\"> \n            Task #{{ t_index + 1 }} \n        <!-- buttons in top right corner on card -->\n        <v-card-actions>\n            <!-- Edit answer rendering type button -->\n            <v-tooltip bottom>\n                <template v-slot:activator=\"{ on, attrs }\">\n                    <v-btn @click=\"selectedTaskNumber = t_index; setAnswerOptionDialog = true\" icon v-bind=\"attrs\" v-on=\"on\">\n                        <v-icon color=\"primary\"> mdi-tune </v-icon>\n                    </v-btn>\n                </template>\n                <span class=\"font-weight-light\">Edit answer type</span>\n            </v-tooltip>\n            <!-- Edit task button -->\n            <v-tooltip bottom>\n            <template v-slot:activator=\"{ on, attrs }\">\n                <v-btn @click=\"modifyTask(task)\" icon v-bind=\"attrs\" v-on=\"on\">\n                <v-icon color=\"var(--main-text-color)\">\n                    mdi-pencil-outline\n                </v-icon>\n                </v-btn>\n            </template>\n            <span class=\"font-weight-light\">Edit task</span>\n            </v-tooltip>\n            <!-- change task answer type -->\n            <v-tooltip bottom>\n            <template v-slot:activator=\"{ on, attrs }\">\n                <v-btn \n                @click.stop=\"selectedTaskNumber = t_index; removeDialog = true\" \n                icon v-bind=\"attrs\" v-on=\"on\">\n                <v-icon color=\"error\">\n                    mdi-close-circle-outline\n                </v-icon>\n                </v-btn>\n            </template>\n            <span class=\"font-weight-light\">Remove task</span>\n            </v-tooltip>\n        </v-card-actions>\n        </v-card-title>\n        \n        <v-card-subtitle class=\"mt-1 text-body-1\"> <p> {{ task.content.text }} </p> </v-card-subtitle>\n        \n        <v-card-text>\n            <div \n            class=\"d-flex flex-column justify-center align-start\"  \n            v-for=\"(q, q_i) in task.content.questions\" :key=\"q_i\">\n\n            <!-- Question -->\n            <div class=\"d-flex flex-row justify-flex-start align-center mb-2\">\n                <p class=\"font-weight-light align-self-center ma-0 pl-2 text-body-1\"> \n                    <span class=\"font-weight-medium\"> Question #{{ q_i+1 }} </span>\n                    : {{ q.text }}\n                </p>\n            </div>\n\n            <!-- Answers -->\n            <!-- type == 'select' -->\n            <div class=\"d-flex flex-row justify-space-between mb-1\" v-if=\"answerOptions[t_index] == 'select'\"> \n                <div class=\"d-flex flex-column py-1 px-2\" v-for=\"(answer, index) in q.answers\" :key=\"index\">\n                    <v-select :items=\"answer.correct.concat(answer.incorrect)\" :label=\"answer.name\" outlined dense></v-select>\n                </div>\n            </div>\n\n            <!-- type == 'radio' -->\n            <div class=\"d-flex flex-row justify-space-between mb-1\" v-if=\"answerOptions[t_index] == 'radio'\">  \n                <div class=\"d-flex flex-column py-1 px-2\" v-for=\"(answer, a_index) in q.answers\" :key=\"a_index\">\n                <p> {{ answer.name }} </p>\n                <v-radio-group>\n                    <v-radio class=\"py-1\"\n                    v-for=\"(value, i) in answer.correct.concat(answer.incorrect)\"\n                    :key=\"value\" :label=\"value.toString()\" :value=\"i\" dense>\n                    </v-radio>\n                </v-radio-group>\n                </div>\n            </div>\n\n            <!-- type == 'checkbox' -->\n            <div class=\"d-flex flex-row justify-space-between mb-1\" v-if=\"answerOptions[t_index] == 'checkbox'\"> \n                <div class=\"d-flex flex-column py-1 px-2\" v-for=\"(answer, index) in q.answers\" :key=\"index\">\n                <p> {{ answer.name }} </p>\n                    <v-checkbox class=\"pa-0 ma-0\" v-for=\"(value, i) in answer.correct.concat(answer.incorrect)\"\n                    :key=\"value\" :label=\"value.toString()\" :value=\"i\" dense>\n                    </v-checkbox>\n                </div>\n            </div>\n\n            <!-- type == 'text' -->\n            <div class=\"d-flex flex-row justify-space-between mb-1\" v-if=\"answerOptions[t_index] == 'text'\"> \n                <div class=\"dflex flex-column py-1 px-2\" v-for=\"(answer, index) in q.answers\" :key=\"index\">\n                    <v-text-field\n                    :label=\"answer.name\"\n                    outlined dense hide-details\n                    ></v-text-field>\n                </div>\n            </div>\n\n            </div>\n        </v-card-text>\n\n    </v-card>\n\n    <v-row class=\"d-flex justify-center align-center pa-2 px-6 mt-2\">\n        <v-btn outlined class=\"my-2 mb-4 mx-2 align-self-end\" text> Cancel </v-btn>\n        <v-btn class=\"my-2 mb-4 mx-2 align-self-end\" color=\"primary\" @click=\"createAndSaveTest()\"> Finish & Save</v-btn>\n    </v-row>\n\n    <v-dialog v-model=\"removeDialog\" width=\"350\" :retain-focus=\"false\">\n            <v-card>\n                <v-card-title class=\"text-h5 lighten-2\"> Remove Task #{{selectedTaskNumber+1}} from test </v-card-title>\n\n                <v-card-text> Are you sure you want to remove this task? </v-card-text>\n\n                <v-divider></v-divider>\n\n                <v-card-actions>\n                    <v-spacer></v-spacer>\n                    <v-btn color=\"black\" outlined text @click=\"removeDialog = false\"> Cancel </v-btn>\n                    <v-btn dark color=\"red\" @click=\"removeTask(selectedTaskNumber)\"> Delete </v-btn>\n                </v-card-actions>\n                \n            </v-card>\n        </v-dialog>\n\n\n        <!-- Answer type options dialog -->\n        <v-dialog v-model=\"setAnswerOptionDialog\" width=\"500\" :retain-focus=\"false\">\n            <v-card>\n                <v-card-title class=\"text-h5 lighten-2\"> Task #{{selectedTaskNumber+1}} answer options </v-card-title>\n\n                <v-card-text> \n                <p>Select answer type</p>\n                <v-slider \n                    v-model=\"selectedAnswerType\" \n                    :tick-labels=\"answerTypes\" :max=\"3\"\n                    step=\"1\" ticks=\"always\" tick-size=\"6\"\n                    >\n                </v-slider>\n                </v-card-text>\n\n                <v-divider></v-divider>\n\n                <v-card-actions>\n                    <v-spacer></v-spacer>\n                    <v-btn color=\"black\" outlined text @click=\"setAnswerOptionDialog = false\"> Cancel </v-btn>\n                    <v-btn dark color=\"primary\" @click=\"setAnswerOption(selectedTaskNumber, selectedAnswerType)\"> Save </v-btn>\n                </v-card-actions>\n                \n            </v-card>\n        </v-dialog>\n\n    </v-container>\n</template>\n\n<script>\nimport TaskDataService from \"../services/taskDataService\";\nimport CategoryDataService from \"../services/categoryDataService\";\nimport GeneratorService from \"../services/generatorService\";\nimport { parseMathLang } from \"../myfiles/taskHandler\";\n\nimport { initMathJax, renderByMathjax } from 'mathjax-vue';\nimport TestDataService from '../services/testDataService';\n\nexport default {\n    data() {\n        return {\n            // stepper completion and list items on each page\n            e1: 1,\n            selectedGrade: [false,false,false,false,false,false,false,false,false,false],\n            selectedCategory: [false,false,false,false,false,false,false,false,false,false],\n            selectedTask: [false,false,false,false,false,false,false,false,false,false],\n            selectedTaskNumber: -1,\n            \n            // task handling\n            tasks: [],\n            concreteTasks: [],\n            categories: [],\n\n            // answer types and rendering\n            answerTypes: [ 'text', 'radio', 'select', 'checkbox' ],\n            answerOptions: [],\n            selectedAnswerType: 'text',\n            setAnswerOptionDialog: false,\n\n            // remove task dialog\n            removeDialog: false,\n            \n            \n            placeholderModel: [0,0,0,0,0,0],\n\n            testName: 'Test name',\n        }\n    },\n    methods: {\n        setTestName(event) {\n            this.testName = event.target.innerHTML;\n        },\n\n        // set Answer Type option\n        setAnswerOption(i, option) {\n          this.answerOptions.splice(i, 1, this.answerTypes[option]);\n          this.setAnswerOptionDialog = false;\n          this.selectedAnswerType = 'text';\n          console.log(this.answerOptions[i])\n\n          initMathJax({})\n\n          function onMathJaxReady() {\n            const el = document.getElementById(\"answers\");\n            renderByMathjax(el);\n          }\n\n          initMathJax({}, onMathJaxReady);\n        },\n\n        // remove selected task\n        removeTask(i) {\n          this.removeDialog = false;\n          this.concreteTasks.splice(i, 1);\n        },\n\n        // choose from items in the list\n        setSelected(selection, i) {\n            selection.splice(i, 1, !selection[i]);\n        },\n\n        // setup mapping of tasks\n        getDisplayTask(task) {\n            return {\n                id: task.id,\n                name: task.name,\n                content: task.content,\n                last_mod: task.updatedAt,\n                renderOption: task.testTasks.renderOption,\n            };\n        },\n\n        // setup mapping of categories\n        getDisplayCategory(category) {\n            return {\n                id: category.id,\n                name: category.name\n            };\n        },\n\n        async retrieveTestAndTasks() {\n            const response = await TestDataService.get(this.$route.params.id);\n\n            this.tasks = response.data.tasks.map(this.getDisplayTask);\n\n            // Generate preview for each task that was loaded\n              this.tasks.forEach(task => {\n                let abstractTask = parseMathLang(task.content);\n\n                GeneratorService.generate({content: abstractTask}).then((res) => {\n                  // Save id of task and add to concreteTasks array\n                  this.concreteTasks.push({id: task.id, content: res.data.content});\n                  this.answerOptions.push(task.renderOption);\n\n                  console.log(task.renderOption);\n                })\n              });\n        },\n\n        // get Categories from database\n        retrieveCategories() {\n          CategoryDataService.getAll()\n            .then((response) => {\n              this.categories = response.data.map(this.getDisplayCategory);\n              console.log(response.data);\n            })\n            .catch((e) => {\n              console.log(e);\n            });\n        },\n\n        // Create new test and add tasks that the user selected\n        createAndSaveTest() {\n          TestDataService.create({name: \"Test name\"}).then((response) => {\n            let testId = response.data.id;\n\n            // Delete tasks in db\n            TestDataService.deleteTasks().then(() => {\n                // Add new tasks\n                this.concreteTasks.forEach((task) => {\n                    TestDataService.addTask({testId: testId, taskId: task.id})\n                    .then((res) => {\n                        console.log(res); \n                        this.$router.push({ name: \"yourTests\" });\n                    });\n                });\n            });\n          });\n        },\n    },\n\n    // This function runs before the UI loads\n    beforeMount() {\n        // Load categories and tasks from the database\n        this.retrieveCategories();\n        this.retrieveTestAndTasks();\n    },\n    setup() {\n        \n    },\n}\n</script>"],"sourceRoot":"src/components"}]}