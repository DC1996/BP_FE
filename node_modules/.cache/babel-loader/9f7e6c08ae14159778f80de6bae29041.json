{"remainingRequest":"/home/dc/Documents/BP/vue-bp-web/node_modules/babel-loader/lib/index.js!/home/dc/Documents/BP/vue-bp-web/node_modules/eslint-loader/index.js??ref--14-0!/home/dc/Documents/BP/vue-bp-web/src/myfiles/extractorModule.js","dependencies":[{"path":"/home/dc/Documents/BP/vue-bp-web/src/myfiles/extractorModule.js","mtime":1645080847899},{"path":"/home/dc/Documents/BP/vue-bp-web/babel.config.js","mtime":1642185636988},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/cache-loader/dist/cjs.js","mtime":1642114936856},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/babel-loader/lib/index.js","mtime":1642114938312},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/eslint-loader/index.js","mtime":1642114937120}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICIvaG9tZS9kYy9Eb2N1bWVudHMvQlAvdnVlLWJwLXdlYi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2suanMiOwppbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gIi9ob21lL2RjL0RvY3VtZW50cy9CUC92dWUtYnAtd2ViL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5jbHVkZXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaW5jbHVkZXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maW5kLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbHRlci5qcyI7CmltcG9ydCB7IFRva2VuIH0gZnJvbSAiLi90b2tlbml6ZXIiOwppbXBvcnQgeyB2YXJpYWJsZUluZm8gfSBmcm9tICIuL3Rhc2tIYW5kbGVyIjsKZXhwb3J0IHZhciBSYW5nZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgLy8gQXR0cmlidXRlcwogIGZ1bmN0aW9uIFJhbmdlKCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJhbmdlKTsKCiAgICB0aGlzLl9zdGFydCA9ICIiOwogICAgdGhpcy5fZW5kID0gIiI7CiAgICB0aGlzLl9zdGVwID0gIiI7CiAgfSAvLyBTZXR0ZXJzCgoKICBfY3JlYXRlQ2xhc3MoUmFuZ2UsIFt7CiAgICBrZXk6ICJzdGFydCIsCiAgICBnZXQ6IC8vIEdldHRlcnMKICAgIGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX3N0YXJ0OwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KHN0YXJ0KSB7CiAgICAgIHRoaXMuX3N0YXJ0ID0gc3RhcnQ7CiAgICB9CiAgfSwgewogICAga2V5OiAiZW5kIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fZW5kOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KGVuZCkgewogICAgICB0aGlzLl9lbmQgPSBlbmQ7CiAgICB9CiAgfSwgewogICAga2V5OiAic3RlcCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX3N0ZXA7CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQoc3RlcCkgewogICAgICB0aGlzLl9zdGVwID0gc3RlcDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0b1N0cmluZyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuICIoIiArIHRoaXMuX3N0YXJ0ICsgIiwiICsgdGhpcy5fZW5kICsgIiwiICsgdGhpcy5fc3RlcCArICIpIjsKICAgIH0KICB9XSk7CgogIHJldHVybiBSYW5nZTsKfSgpOyAvLyBWYXJpYWJsZQoKZXhwb3J0IHZhciBWYXJpYWJsZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgLy8gQXR0cmlidXRlcwogIGZ1bmN0aW9uIFZhcmlhYmxlKCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFZhcmlhYmxlKTsKCiAgICB0aGlzLl9uYW1lID0gIiI7CiAgICB0aGlzLl9kZWZpbml0aW9uID0gIiI7CiAgICB0aGlzLl9yYW5nZSA9ICIiOwogIH0gLy8gU2V0dGVycwoKCiAgX2NyZWF0ZUNsYXNzKFZhcmlhYmxlLCBbewogICAga2V5OiAibmFtZSIsCiAgICBnZXQ6IC8vIEdldHRlcnMKICAgIGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX25hbWU7CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQobmFtZSkgewogICAgICB0aGlzLl9uYW1lID0gbmFtZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJkZWZpbml0aW9uIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fZGVmaW5pdGlvbjsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldChkZWZpbnRpb24pIHsKICAgICAgdGhpcy5fZGVmaW5pdGlvbiA9IGRlZmludGlvbjsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyYW5nZSIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX3JhbmdlOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KHJhbmdlKSB7CiAgICAgIHRoaXMuX3JhbmdlID0gcmFuZ2U7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gVmFyaWFibGU7Cn0oKTsKLyoKICBDbGFzcyB1c2VkIHRvIGV4cG9ydCBkYXRhIGFib3V0IHZhcmlhYmxlcyBhbmQgZ2VuZXJhdGUgbWF0aCBtYXJrdXAgbGFuZ3VhZ2UgY29kZQoqLwoKZXhwb3J0IHZhciBFeHRyYWN0b3IgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIEV4dHJhY3RvcigpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBFeHRyYWN0b3IpOwoKICAgIHRoaXMucGFyc2VkVmFyaWFibGVzID0gW107CiAgICB0aGlzLmFkZGVkVmFyaWFibGVzID0gW107CiAgfSAvLyBTYXZlIHBhcnNlZCB2YXJpYWJsZXMKCgogIF9jcmVhdGVDbGFzcyhFeHRyYWN0b3IsIFt7CiAgICBrZXk6ICJhZGRVbmlxdWUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFVuaXF1ZSh0b2tlbnMpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIC8vIEFzc3VtZSBsaXN0IG9mIHZhcmlhYmxlcyBoYXMgY2hhbmdlZAogICAgICAvLyBhbmQgc2V0IHZpc2libGl0eSB0byBmYWxzZSBmb3IgYWxsIHZhcmlhYmxlcwogICAgICB0aGlzLnBhcnNlZFZhcmlhYmxlcy5mb3JFYWNoKGZ1bmN0aW9uICh2YXJpYWJsZSkgewogICAgICAgIHZhcmlhYmxlLnZpc2libGUgPSBmYWxzZTsKICAgICAgfSk7CiAgICAgIHRva2Vucy5mb3JFYWNoKGZ1bmN0aW9uICh0b2tlbikgewogICAgICAgIHZhciB2YXJpYWJsZV9uYW1lID0gdG9rZW4udmFsdWU7IC8vIEFkZCBhbGwgdmFyaWFibGVzIHRoYXQgYXJlbid0IGluIHRoZSBsaXN0IGFscmVhZHkKCiAgICAgICAgaWYgKF90aGlzLnBhcnNlZFZhcmlhYmxlcy5pbmNsdWRlcyh2YXJpYWJsZV9uYW1lKSA9PSBmYWxzZSkgewogICAgICAgICAgX3RoaXMucGFyc2VkVmFyaWFibGVzLnB1c2gobmV3IHZhcmlhYmxlSW5mbyh2YXJpYWJsZV9uYW1lKSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIC8vIFNldCB2aXNpYmxpdHkgZm9yIHBhcnNlZCB2YXJpYWJsZXMKICAgICAgICAgIF90aGlzLnBhcnNlZFZhcmlhYmxlcy5maW5kKGZ1bmN0aW9uICh2YXJpYWJsZSkgewogICAgICAgICAgICByZXR1cm4gdmFyaWFibGUubmFtZSA9PSB2YXJpYWJsZV9uYW1lOwogICAgICAgICAgfSkudmlzaWJsZSA9IHRydWU7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0gLy8gRXh0cmFjdCB2YXJpYWJsZXMgZnJvbSB0b2tlbiBzdHJlYW0KCiAgfSwgewogICAga2V5OiAiZXh0cmFjdFZhcmlhYmxlcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZXh0cmFjdFZhcmlhYmxlcyh0b2tlbnMpIHsKICAgICAgLy8gRmlsdGVyIHZhcmlhYmxlcyBmcm9tIHRva2VucyBhbmQgYWRkIG9ubHkgb25jZQogICAgICB0aGlzLmFkZFVuaXF1ZSh0b2tlbnMuZmlsdGVyKGZ1bmN0aW9uICh0b2tlbikgewogICAgICAgIHJldHVybiB0b2tlbi50eXBlID09ICJ2YXIiOwogICAgICB9KSk7CiAgICAgIHJldHVybiBleHRyYWN0ZWRWYXJpYWJsZXM7CiAgICB9IC8vZXh0cmFjdEFuc3dlcgogICAgLy9nZW5lcmF0ZVRleHQKCiAgfV0pOwoKICByZXR1cm4gRXh0cmFjdG9yOwp9KCk7"},{"version":3,"sources":["/home/dc/Documents/BP/vue-bp-web/src/myfiles/extractorModule.js"],"names":["Token","variableInfo","Range","_start","_end","_step","start","end","step","Variable","_name","_definition","_range","name","defintion","range","Extractor","parsedVariables","addedVariables","tokens","forEach","variable","visible","token","variable_name","value","includes","push","find","addUnique","filter","type","extractedVariables"],"mappings":";;;;;;;;;AAAA,SAASA,KAAT,QAAsB,aAAtB;AACA,SAASC,YAAT,QAA6B,eAA7B;AAEA,WAAaC,KAAb;AACE;AACA,mBAAc;AAAA;;AACZ,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,IAAL,GAAY,EAAZ;AACA,SAAKC,KAAL,GAAa,EAAb;AACD,GANH,CAQE;;;AARF;AAAA;AAAA,SAmBE;AACA,mBAAY;AACV,aAAO,KAAKF,MAAZ;AACD,KAtBH;AAAA,SASE,aAAUG,KAAV,EAAiB;AACf,WAAKH,MAAL,GAAcG,KAAd;AACD;AAXH;AAAA;AAAA,SAuBE,eAAU;AACR,aAAO,KAAKF,IAAZ;AACD,KAzBH;AAAA,SAYE,aAAQG,GAAR,EAAa;AACX,WAAKH,IAAL,GAAYG,GAAZ;AACD;AAdH;AAAA;AAAA,SA0BE,eAAW;AACT,aAAO,KAAKF,KAAZ;AACD,KA5BH;AAAA,SAeE,aAASG,IAAT,EAAe;AACb,WAAKH,KAAL,GAAaG,IAAb;AACD;AAjBH;AAAA;AAAA,SA8BE,eAAe;AACb,aAAO,MAAM,KAAKL,MAAX,GAAoB,GAApB,GAA0B,KAAKC,IAA/B,GAAsC,GAAtC,GAA4C,KAAKC,KAAjD,GAAyD,GAAhE;AACD;AAhCH;;AAAA;AAAA,I,CAmCA;;AACA,WAAaI,QAAb;AACE;AACA,sBAAc;AAAA;;AACZ,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,WAAL,GAAmB,EAAnB;AACA,SAAKC,MAAL,GAAc,EAAd;AACD,GANH,CAQE;;;AARF;AAAA;AAAA,SAmBE;AACA,mBAAW;AACT,aAAO,KAAKF,KAAZ;AACD,KAtBH;AAAA,SASE,aAASG,IAAT,EAAe;AACb,WAAKH,KAAL,GAAaG,IAAb;AACD;AAXH;AAAA;AAAA,SAuBE,eAAiB;AACf,aAAO,KAAKF,WAAZ;AACD,KAzBH;AAAA,SAYE,aAAeG,SAAf,EAA0B;AACxB,WAAKH,WAAL,GAAmBG,SAAnB;AACD;AAdH;AAAA;AAAA,SA0BE,eAAY;AACV,aAAO,KAAKF,MAAZ;AACD,KA5BH;AAAA,SAeE,aAAUG,KAAV,EAAiB;AACf,WAAKH,MAAL,GAAcG,KAAd;AACD;AAjBH;;AAAA;AAAA;AA+BA;AACA;AACA;;AACA,WAAaC,SAAb;AACE,uBAAc;AAAA;;AACZ,SAAKC,eAAL,GAAuB,EAAvB;AACA,SAAKC,cAAL,GAAsB,EAAtB;AACD,GAJH,CAME;;;AANF;AAAA;AAAA,WAOE,mBAAUC,MAAV,EAAkB;AAAA;;AAChB;AACA;AACA,WAAKF,eAAL,CAAqBG,OAArB,CAA6B,UAACC,QAAD,EAAc;AACzCA,QAAAA,QAAQ,CAACC,OAAT,GAAmB,KAAnB;AACD,OAFD;AAIAH,MAAAA,MAAM,CAACC,OAAP,CAAe,UAACG,KAAD,EAAW;AACxB,YAAIC,aAAa,GAAGD,KAAK,CAACE,KAA1B,CADwB,CAGxB;;AACA,YAAI,KAAI,CAACR,eAAL,CAAqBS,QAArB,CAA8BF,aAA9B,KAAgD,KAApD,EAA2D;AACzD,UAAA,KAAI,CAACP,eAAL,CAAqBU,IAArB,CAA0B,IAAI1B,YAAJ,CAAiBuB,aAAjB,CAA1B;AACD,SAFD,MAEO;AACL;AACA,UAAA,KAAI,CAACP,eAAL,CAAqBW,IAArB,CACE,UAACP,QAAD;AAAA,mBAAcA,QAAQ,CAACR,IAAT,IAAiBW,aAA/B;AAAA,WADF,EAEEF,OAFF,GAEY,IAFZ;AAGD;AACF,OAZD;AAaD,KA3BH,CA6BE;;AA7BF;AAAA;AAAA,WA8BE,0BAAiBH,MAAjB,EAAyB;AACvB;AACA,WAAKU,SAAL,CAAeV,MAAM,CAACW,MAAP,CAAc,UAACP,KAAD;AAAA,eAAWA,KAAK,CAACQ,IAAN,IAAc,KAAzB;AAAA,OAAd,CAAf;AAEA,aAAOC,kBAAP;AACD,KAnCH,CAqCE;AAEA;;AAvCF;;AAAA;AAAA","sourcesContent":["import { Token } from \"./tokenizer\";\nimport { variableInfo } from \"./taskHandler\";\n\nexport class Range {\n  // Attributes\n  constructor() {\n    this._start = \"\";\n    this._end = \"\";\n    this._step = \"\";\n  }\n\n  // Setters\n  set start(start) {\n    this._start = start;\n  }\n  set end(end) {\n    this._end = end;\n  }\n  set step(step) {\n    this._step = step;\n  }\n\n  // Getters\n  get start() {\n    return this._start;\n  }\n  get end() {\n    return this._end;\n  }\n  get step() {\n    return this._step;\n  }\n\n  get toString() {\n    return \"(\" + this._start + \",\" + this._end + \",\" + this._step + \")\";\n  }\n}\n\n// Variable\nexport class Variable {\n  // Attributes\n  constructor() {\n    this._name = \"\";\n    this._definition = \"\";\n    this._range = \"\";\n  }\n\n  // Setters\n  set name(name) {\n    this._name = name;\n  }\n  set definition(defintion) {\n    this._definition = defintion;\n  }\n  set range(range) {\n    this._range = range;\n  }\n\n  // Getters\n  get name() {\n    return this._name;\n  }\n  get definition() {\n    return this._definition;\n  }\n  get range() {\n    return this._range;\n  }\n}\n\n/*\n  Class used to export data about variables and generate math markup language code\n*/\nexport class Extractor {\n  constructor() {\n    this.parsedVariables = [];\n    this.addedVariables = [];\n  }\n\n  // Save parsed variables\n  addUnique(tokens) {\n    // Assume list of variables has changed\n    // and set visiblity to false for all variables\n    this.parsedVariables.forEach((variable) => {\n      variable.visible = false;\n    });\n\n    tokens.forEach((token) => {\n      let variable_name = token.value;\n\n      // Add all variables that aren't in the list already\n      if (this.parsedVariables.includes(variable_name) == false) {\n        this.parsedVariables.push(new variableInfo(variable_name));\n      } else {\n        // Set visiblity for parsed variables\n        this.parsedVariables.find(\n          (variable) => variable.name == variable_name\n        ).visible = true;\n      }\n    });\n  }\n\n  // Extract variables from token stream\n  extractVariables(tokens) {\n    // Filter variables from tokens and add only once\n    this.addUnique(tokens.filter((token) => token.type == \"var\"));\n\n    return extractedVariables;\n  }\n\n  //extractAnswer\n\n  //generateText\n}\n"]}]}