{"remainingRequest":"/home/dc/Documents/BP/vue-bp-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dc/Documents/BP/vue-bp-web/src/components/yourAssignments.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/dc/Documents/BP/vue-bp-web/src/components/yourAssignments.vue","mtime":1650018280101},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/css-loader/dist/cjs.js","mtime":1642114937836},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1642114939216},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/postcss-loader/src/index.js","mtime":1642114938300},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/cache-loader/dist/cjs.js","mtime":1642114936856},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/vue-loader/lib/index.js","mtime":1642114938760}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmItZyB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ncmVlbi1iYWNrZ3JvdW5kLWNvbG9yKTsKICAgIGhlaWdodDogOTAlOwp9Ci5yLWcgewogICAgaGVpZ2h0OiA5MCU7Cn0KLmgtZyB7CiAgICBib3JkZXI6IHNvbGlkIDJweCBob3RwaW5rOwp9CgpbdGV4dC1uYXJyb3ddIHsKICAgIGxpbmUtaGVpZ2h0OiAxLjEgIWltcG9ydGFudDsKICAgIGZvbnQtc2l6ZTogMXJlbTsKfQoKLnBvaW50ZXIgewogICAgY3Vyc29yOiBwb2ludGVyICFpbXBvcnRhbnQ7Cn0K"},{"version":3,"sources":["yourAssignments.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"yourAssignments.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <v-container \n        class=\"d-flex flex-column justify-start align-center mt-5 rounded-lg\">\n\n        <v-card elevation=\"0\" class=\"ml-0\">\n            <v-card-title class=\"d-flex flex-row justify-space-between align-center\">\n            <h3 class=\"t-t-color text-h5 pt-3 font-weight-medium\"> Your assignments </h3>\n            <v-spacer></v-spacer>\n            <v-spacer></v-spacer>\n            <v-spacer></v-spacer>\n            <v-text-field\n                v-model=\"search\"\n                append-icon=\"mdi-magnify\"\n                label=\"Search\"\n                single-line\n                hide-details\n            ></v-text-field>\n            </v-card-title>\n            \n            <v-data-table\n            :headers=\"headers\"\n            :items=\"assignments\"\n            :items-per-page=\"7\"\n            :search=\"search\"\n            width=\"80%\"\n        >\n             <template v-slot:item=\"row\">\n                <tr>\n                    <td>{{ row.item.name }}</td>\n                    <td>{{ row.item.assignedBy }}</td>\n                    <td>{{ row.item.timeLimit }} minutes </td>\n\n                    <td>\n                      <v-tooltip v-if=\"row.item.status == 'Handed Out'\" right>\n                        <template v-slot:activator=\"{ on, attrs }\">\n                          <v-btn v-bind=\"attrs\" v-on=\"on\" plain class=\"pa-1\" \n                          icon :ripple=\"false\" @click=\"startDialog = true; selectedTest = row.item\">\n                              <v-icon color=\"text\">\n                                  mdi-draw\n                              </v-icon>\n                          </v-btn>\n                        </template>\n                        <span> Start Test </span>\n                      </v-tooltip>\n                      <v-tooltip v-if=\"row.item.status == 'In Progress'\" right>\n                        <template v-slot:activator=\"{ on, attrs }\">\n                          <v-btn v-bind=\"attrs\" v-on=\"on\" plain class=\"pa-1\" \n                          icon :ripple=\"false\" @click=\"selectedTest = row.item; startTest(selectedTest.id)\">\n                              <v-icon color=\"primary\">\n                                  mdi-draw\n                              </v-icon>\n                          </v-btn>\n                        </template>\n                        <span> Continue Test </span>\n                      </v-tooltip>\n                      <v-tooltip v-if=\"row.item.status == 'Finished'\" right>\n                        <template v-slot:activator=\"{ on, attrs }\">\n                          <v-btn v-bind=\"attrs\" v-on=\"on\" plain class=\"pa-1\" \n                          icon :ripple=\"false\" @click=\"viewResults(row.item)\">\n                              <v-icon color=\"text\">\n                                  mdi-file-eye-outline\n                              </v-icon>\n                          </v-btn>\n                        </template>\n                        <span> View Result </span>\n                      </v-tooltip>\n                    </td>\n                </tr>\n            </template>\n\n        </v-data-table>\n\n        </v-card>\n\n        <v-dialog v-model=\"startDialog\" width=\"325\">\n            <v-card>\n                <v-card-title class=\"text-h5 lighten-2\"> Start task </v-card-title>\n\n                <v-card-text> You will have exactly \n                    <span class=\"font-weight-medium text-body-1\">\n                        {{ selectedTest.timeLimit }} minutes\n                    </span> \n                    to complete this test. Do not close the browser window during \n                    the test or you will lose your data and will need to start over. \n                </v-card-text>\n\n                <v-divider></v-divider>\n\n                <v-card-actions>\n                    <v-spacer></v-spacer>\n                    <v-btn color=\"black\" outlined text @click=\"startDialog = false\"> Cancel </v-btn>\n                    <v-btn color=\"primary\" @click=\"startTest(selectedTest.id)\"> Start </v-btn>\n                </v-card-actions>\n                \n            </v-card>\n        </v-dialog>\n\n        <v-dialog v-model=\"resultsDialog\" width=\"450\">\n            <v-card>\n                <v-card-title class=\"text-h5 lighten-2\"> Test results </v-card-title>\n\n                <v-card-text class=\"text-body-1\"> \n                    You overall score: {{ calculatedPercentage }} <br>\n                    Correct answers: {{ calculatedFraction }}\n                </v-card-text>\n\n                <v-divider></v-divider>\n\n                <v-card-actions>\n                    <v-spacer></v-spacer>\n                    <v-btn color=\"primary\" outlined text @click=\"resultsDialog = false\"> Close </v-btn>\n                </v-card-actions>\n                \n            </v-card>\n        </v-dialog>\n\n    </v-container>\n</template>\n\n<script>\nimport concreteTestDataService from '../services/concreteTestDataService';\n    import TaskDataService from \"../services/taskDataService\";\nimport userDataService from '../services/userDataService';\n\n    export default {\n        data() {\n            return { \n                selectedTest: {}, // Which test was selected to begin or view result of\n                startDialog: false, // Show 'Are you sure' dialog before starting test\n                resultsDialog: false,\n                calculatedFraction: '',\n                calculatedPercentage: '',\n                \n                search: \"\",\n                headers: [\n                    {text: \"Test name\", value: \"test_name\", width: \"45ch\"},\n                    {text: \"Assigned by\", value: \"assignedBy\", width: \"50ch\"},\n                    {text: \"Time limit\", value: \"time_limit\", width: \"25ch\"},\n                    {text: \"Action\", value: \"action\", align: \"center\", sortable: false, width: \"10ch\"},\n                ],\n                assignments: [ ]\n            };\n        },\n\n        computed: { },\n\n        created() { },\n\n        // This function runs before the UI loads\n        beforeMount() {\n            // Load tasks from the database\n            this.retrieveTasks();\n        },\n\n        methods: { \n            testResult() {\n                // If a test is selected\n                if( this.selectedTest ) {\n                    let answersTotal = 0;\n                    let correctAnswers = 0;\n                    for(let task of this.selectedTest.content) {\n                        for(let question of task.content.questions) {\n                            for(let answer of question.answers) {\n                                // Increment total answer count\n                                answersTotal = answersTotal + 1;\n\n                                // Check if answer is correct\n                                if(answer.correct[0] == answer.selected)\n                                    correctAnswers = correctAnswers + 1;\n                            }\n                        }\n                    }\n\n                    this.calculatedPercentage = (correctAnswers/answersTotal) * 100;\n                    this.calculatedFraction = `${correctAnswers}/${answersTotal}`;\n                }\n            },\n\n            startTest(id) {\n                this.$router.push({name: \"takeTest\", params: {id: id}})\n            },\n\n            async viewResults(test) {\n                this.selectedTest = test;\n                await this.getResults(test.id);\n                this.resultsDialog = true;\n            },\n\n            // delete selected task\n            showDeleteDialog(item) {\n                this.currentId = item.id;\n                this.deleteDialog = true;\n            },\n            deleteTask(id) {\n                TaskDataService.delete(id)\n                .then((res) => {\n                    this.message = res.data.message;\n                    this.success = true;\n                    this.infoMessage = true;\n                    this.retrieveTasks();\n                    this.deleteDialog = false;\n                })\n                .catch((err) => {\n                    this.message = err.response.data.message;\n                    this.success = false;\n                    this.infoMessage = true;\n                    this.retrieveTasks();\n                    this.deleteDialog = false;\n                })\n            },\n\n            // Setup mapping of tasks\n            getDisplayTask(task) {\n                return {\n                    id: task.id,\n                    name: task.name,\n                    last_mod: task.updatedAt\n                };\n            },\n            // Get tasks from database\n            retrieveTasks() {\n                userDataService.getStudentAssignments(this.$store.state.app.userID).then(({data}) => {    \n\n                    console.log(\"CONTENT: \", data);\n\n                    this.assignments = data.assignments.map((test) => {\n                        return {\n                            id: test.id,\n                            name: test.name,\n                            assignedBy: `${test.assignedBy.name}  ${test.assignedBy.surname}`,\n                            timeLimit: test.timeLimit,\n                            status: test.status,\n                            content: test.content\n                        }\n                    });\n                });\n            },\n\n            // Get results\n            async getResults(id) {\n                let results = await concreteTestDataService.getResults(id);\n                this.calculatedPercentage = results.data.percentage;\n                this.calculatedFraction = `${results.data.correct}/${results.data.total}`;\n            },\n        },\n    }\n</script>\n\n<style>\n    .b-g {\n        background-color: var(--green-background-color);\n        height: 90%;\n    }\n    .r-g {\n        height: 90%;\n    }\n    .h-g {\n        border: solid 2px hotpink;\n    }\n\n    [text-narrow] {\n        line-height: 1.1 !important;\n        font-size: 1rem;\n    }\n\n    .pointer {\n        cursor: pointer !important;\n    }\n</style>"]}]}