{"remainingRequest":"/home/dc/Documents/BP/vue-bp-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dc/Documents/BP/vue-bp-web/src/components/createTestPage.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/dc/Documents/BP/vue-bp-web/src/components/createTestPage.vue","mtime":1649107643953},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/css-loader/dist/cjs.js","mtime":1642114937836},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1642114939216},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/postcss-loader/src/index.js","mtime":1642114938300},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/cache-loader/dist/cjs.js","mtime":1642114936856},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/vue-loader/lib/index.js","mtime":1642114938760}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmItZyB7CiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZ3JlZW4tYmFja2dyb3VuZC1jb2xvcik7Cn0K"},{"version":3,"sources":["createTestPage.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgeA;AACA;AACA","file":"createTestPage.vue","sourceRoot":"src/components","sourcesContent":["<template>\n\n    <!-- Show step completion and content of each step -->\n    <v-stepper v-model=\"$store.state.test.stepCounter\" class=\"px-2 mt-6 mx-14 b-g\" style=\"height: calc(100% - 2.5rem);\">\n\n    <!-- Steps at the top -->\n    <v-stepper-header class=\"mx-6 mt-2 pa-0 elevation-0\">\n      <v-stepper-step :complete=\"$store.state.test.stepCounter > 1\" step=\"1\"> Select grade </v-stepper-step>\n      <v-divider></v-divider>\n      <v-stepper-step :complete=\"$store.state.test.stepCounter > 2\" step=\"2\"> Select category </v-stepper-step>\n      <v-divider></v-divider>\n      <v-stepper-step :complete=\"$store.state.test.stepCounter > 3\" step=\"3\"> Select tasks </v-stepper-step>\n      <v-divider></v-divider>\n      <v-stepper-step :complete=\"$store.state.test.stepCounter > 4\" step=\"4\"> Configure tasks </v-stepper-step>\n    </v-stepper-header>\n\n    <!-- Content of each step -->\n    <v-stepper-items style=\"height: 100%\">\n\n      <!-- Select task grade from given list -->\n      <v-stepper-content step=\"1\" style=\"height: calc(100%-2rem)\">\n        <v-container fluid class=\"\">\n            <v-row align=\"center\" justify=\"center\">\n                <v-col align=\"center\" justify=\"center\" cols=\"4\" v-for=\"(grade, i) in $store.state.test.grades\" :key=\"i\">\n                    <v-badge :value=\"$store.state.test.grade == grade\" color=\"primary\" icon=\"mdi-check\" overlap>\n                        <!-- Applies style when given grade was selected, disables other grades, set grade on click -->\n                        <v-hover v-slot=\"{ hover }\">\n                          <v-card\n                              class=\"py-6 px-12\"\n                              :outlined=\"$store.state.test.grade != grade && hover\"\n                              :elevation=\"$store.state.test.grade == grade ? 2 : 0\"\n                              :plain=\"$store.state.test.grade != '0' || $store.state.test.grade != grade\"\n                              :disabled=\"$store.state.test.grade != '0' && $store.state.test.grade != grade\" \n                              :class=\"{ 'my-n1': $store.state.test.grade != grade && hover }\"\n                              @click=\"setGrade({value: grade})\">\n                              <h4> {{ grade }}. grade </h4>\n                          </v-card>\n                        </v-hover>\n                    </v-badge>\n                </v-col>\n            </v-row>\n            \n            <!-- Action buttons -->\n            <v-row class=\"d-flex justify-end pa-2 px-6 mt-2\">\n              <v-btn \n                @click=\"populateDatabase()\"\n                class=\"my-2 mx-2 align-self-end\" text> \n                Cancel \n              </v-btn>\n              <v-btn \n                :disabled=\"$store.state.test.grade == '0'\" \n                class=\"my-2 align-self-end\" color=\"primary\"\n                @click=\"moveToNextStep()\"> \n                Continue \n              </v-btn>\n            </v-row>\n        </v-container>\n\n      </v-stepper-content>\n\n      <!-- Select task categories from list -->\n      <v-stepper-content step=\"2\" style=\"height: calc(100% - 6rem);\">\n        <v-container fluid class=\"d-flex flex-column justify-end ma-0\" style=\"height: 100%; width: 100%\">\n          \n          <!-- Categories -->\n          <v-row>\n            <v-col align=\"center\" justify=\"center\" cols=\"4\" v-for=\"(category, i) in $store.state.test.categories\" :key=\"i\">\n              <v-badge :value=\"isCategorySelected(category.id)\" color=\"primary\" icon=\"mdi-check\" overlap>\n                  <v-card @click=\"setSelectedCategory({ category: category })\" class=\"pa-4 d-flex justify-center align-center\" style=\"width: 150px; height: 75px\">\n                      <h4> {{ category.name }} </h4>\n                  </v-card>\n              </v-badge>\n            </v-col>\n          </v-row>\n\n          <!-- Action buttons-->\n          <v-row class=\"d-flex justify-end pa-2 px-6 mt-2\">\n            <v-btn outlined text class=\"my-2 mx-2 align-self-end\" @click=\"moveToPrevStep()\"> \n              Back \n            </v-btn>\n            <v-btn \n              :disabled=\"$store.state.test.selectedTaskCategories.length == 0\"\n              class=\"my-2 align-self-end\" color=\"primary\"\n              @click=\"getTasks(); moveToNextStep();\">  \n              Continue \n            </v-btn>\n          </v-row>\n        </v-container>\n\n      </v-stepper-content>\n\n      <!-- Select task from the list -->\n      <v-stepper-content step=\"3\">\n\n        <!-- Tasks -->\n        <v-container class=\"d-flex flex-column\"> \n          <v-badge \n            v-for=\"(task, index) in $store.state.test.tasks\" :key=\"index\" \n            :value=\"isTaskSelected(task.id)\" color=\"primary\" icon=\"mdi-check\" overlap>\n            <v-card @click=\"setSelectedTask({ task })\" class=\"px-4\">\n              <h4 class=\"py-1 pt-3\"> {{ task.name }} </h4>\n              <p class=\"pb-3\"> {{ task.content.slice(0, 64)+\"...\" }} </p>\n          </v-card>\n          </v-badge>\n        </v-container>\n\n        <!-- Action buttons -->\n        <v-row class=\"d-flex justify-end pa-2 px-6 mt-2\">\n          <v-btn \n            outlined text class=\"my-2 mx-2 align-self-end\"\n            @click=\"moveToPrevStep()\"> Back </v-btn>\n          <v-btn \n            class=\"my-2 align-self-end\" color=\"primary\" \n            @click=\"generateConcreteTasks(); moveToNextStep()\">\n            Continue \n          </v-btn>\n        </v-row>\n\n      </v-stepper-content>\n\n      <!-- See preview of each task, modify render options -->\n      <v-stepper-content step=\"4\">\n        <v-container class=\"d-flex flex-column\">\n          <p class=\"text-h4 align-self-center\" @blur=\"setTestName($event)\" contenteditable=\"true\"> \n            {{ testName }} \n          </p>\n\n          <!-- Time for task -->\n          <v-card outlined width=\"max-content\" class=\"d-flex flex-row mx-6 my-2 px-6 align-center\">\n            <p class=\"ma-0 py-2\"> Grade: {{ $store.state.test.grade }}. </p>\n          </v-card>\n          <v-card outlined class=\"d-flex flex-row justify-start mx-6 my-2 px-6 py-6\">\n            <p class=\"ma-0 py-2 text-body-1\" style=\"width: 12.5rem\"> \n              Test duration: <span class=\"font-weight-medium text-subtitle-1\">{{ timer }}</span> minutes \n            </p> \n            <v-slider class=\"d-flex align-center ma-0\" hide-details v-model=\"timer\" :min=\"5\" :max=\"45\"></v-slider>\n          </v-card>\n\n          <!-- Cards with task details, render options preview -->\n          <v-card v-for=\"(task, tIndex) in $store.state.test.concreteTasks\"\n            :key=\"tIndex\" flat hover class=\"my-2 mx-6 px-3\">\n            <!-- Task name -->\n            <v-card-title class=\"d-flex justify-space-between text-h5 font-weight-medium\">\n              Task #{{ tIndex + 1 }}\n              <!-- Task options -->\n              <v-card-actions>\n                <!-- Edit asnwer type button -->\n                <v-tooltip bottom>\n                  <template v-slot:activator=\"{ on, attrs }\">\n                    <v-btn \n                      @click=\"selectedTaskId = tIndex; selectedAnswerType = answerTypes.findIndex((option) => option == task.renderOption); setAnswerOptionDialog = true\"\n                      icon v-bind=\"attrs\" v-on=\"on\">\n                      <v-icon color=\"primary\"> mdi-tune </v-icon>\n                    </v-btn>\n                  </template>\n                  <span class=\"font-weight-light\">Edit answer type</span>\n                </v-tooltip>\n                <!-- Modify task button -->\n                <v-tooltip bottom>\n                  <template v-slot:activator=\"{ on, attrs }\">\n                    <v-btn @click=\"modifyTask(task.abstractTaskId)\" icon v-bind=\"attrs\" v-on=\"on\">\n                      <v-icon color=\"var(--main-text-color)\">\n                        mdi-pencil-outline\n                      </v-icon>\n                    </v-btn>\n                  </template>\n                  <span class=\"font-weight-light\">Edit task</span>\n                </v-tooltip>\n                <!-- Remove concrete task -->\n                <v-tooltip bottom>\n                  <template v-slot:activator=\"{ on, attrs }\">\n                    <v-btn \n                      @click.stop=\"selectedTaskId = task.abstractTaskId; removeDialog = true\"\n                      icon v-bind=\"attrs\" v-on=\"on\">\n                      <v-icon color=\"error\">\n                        mdi-close-circle-outline\n                      </v-icon>\n                    </v-btn>\n                  </template>\n                  <span class=\"font-weight-light\">Remove task</span>\n                </v-tooltip>\n              </v-card-actions>\n            </v-card-title>\n            \n            <!-- Task text -->\n            <v-card-subtitle class=\"mt-1 text-body-1\"> \n              <p> {{ task.content.text }} </p> \n            </v-card-subtitle>\n            \n            <!-- Task questions, answers -->\n            <v-card-text>\n              <div \n                class=\"d-flex flex-column justify-center align-start\"  \n                v-for=\"(question, i) in task.content.questions\" :key=\"i\">\n\n                <!-- Question -->\n                <div class=\"d-flex flex-row justify-flex-start align-center\">\n                  <p\n                    class=\"font-weight-black align-self-center ma-0 text-subtitle-1\"> \n                    <span class=\"font-weight-medium text-body-1\"> Question #{{ i+1 }}: </span><br>\n                    {{ question.text }}\n                  </p>\n                </div>\n\n                <!-- Answers -->\n                <!-- type == 'select' -->\n                <div v-if=\"task.renderOption == 'select'\"\n                  class=\"d-flex flex-row justify-space-between mb-1\"> \n                  <!-- Answer options -->\n                  <div v-for=\"(answer, index) in question.answers\" :key=\"index\"\n                    class=\"d-flex flex-column py-1\">\n                      <v-select \n                        dense :items=\"answer.correct.concat(answer.incorrect)\" \n                        :label=\"answer.name\" outlined>\n                      </v-select>\n                  </div>\n                </div>\n\n                <!-- type == 'radio' -->\n                <div class=\"d-flex flex-row justify-space-between mb-1\" v-if=\"task.renderOption == 'radio'\">  \n                  <div class=\"d-flex flex-column py-1 px-2\" v-for=\"(answer, index) in question.answers\" :key=\"index\">\n                    <p> {{ answer.name }} </p>\n                    <v-radio-group v-model=\"placeholderModel\">\n                      <v-radio dense class=\"py-1\"\n                        v-for=\"(value, i) in answer.correct.concat(answer.incorrect)\"\n                        :key=\"value.toString() + i\" :label=\"value.toString()\" :value=\"i\">\n                      </v-radio>\n                    </v-radio-group>\n                  </div>\n                </div>\n\n                <!-- type == 'checkbox' -->\n                <div class=\"d-flex flex-row justify-space-between mb-1\" v-if=\"task.renderOption == 'checkbox'\"> \n                  <div class=\"d-flex flex-column py-1 px-2\" v-for=\"(answer, index) in question.answers\" :key=\"index\">\n                    <p> {{ answer.name }} </p>\n                      <v-checkbox dense class=\"pa-0 ma-0\" \n                        v-for=\"(value, i) in answer.correct.concat(answer.incorrect)\"\n                        :key=\"value.toString()\" :label=\"value.toString()\" :value=\"i\">\n                      </v-checkbox>\n                  </div>\n                </div>\n\n                <!-- type == 'text' -->\n                <div class=\"d-flex flex-row justify-space-between mb-1\" v-if=\"task.renderOption == 'text'\">\n                  <div class=\"dflex flex-column py-1 mx-1\" v-for=\"(answer, index) in question.answers\" :key=\"index\">\n                      <v-text-field dense :label=\"answer.name\" outlined></v-text-field>\n                  </div>\n                </div>\n\n              </div>\n            </v-card-text>\n          </v-card>\n        </v-container>\n\n        <!-- Action buttons -->\n        <v-row class=\"d-flex justify-center align-center pa-2 px-6 mt-2\">\n          <v-btn outlined text class=\"my-2 mb-4 mx-2 align-self-end\"\n            @click=\"moveToPrevStep()\"> \n            Back \n          </v-btn>\n          <v-btn class=\"my-2 mb-4 mx-2 align-self-end\" color=\"primary\" \n            @click=\"createAndSaveTest()\"> \n            Finish & Save\n          </v-btn>\n        </v-row>\n\n        <!-- Remove task from test dialog -->\n        <v-dialog v-model=\"removeDialog\" width=\"350\" :retain-focus=\"false\">\n          <v-card>\n            <v-card-title class=\"text-h5 lighten-2\"> Remove Task </v-card-title>\n\n            <v-card-text> Are you sure you want to remove this task? </v-card-text>\n\n            <v-divider></v-divider>\n\n            <v-card-actions>\n              <v-btn color=\"black\" outlined text @click=\"removeDialog = false\"> Cancel </v-btn>\n              <v-btn dark color=\"red\" @click=\"removeConcreteTask({index: selectedTaskId}); removeDialog = false\"> Remove </v-btn>\n            </v-card-actions> \n          </v-card>\n        </v-dialog>\n\n        <!-- Answer Type Options Dialog -->\n        <v-dialog v-model=\"setAnswerOptionDialog\" width=\"500\" :retain-focus=\"false\">\n          <v-card>\n              <v-card-title class=\"text-h5 lighten-2\">\n                Task #{{selectedTaskId+1}} Answer Options\n              </v-card-title>\n\n              <v-card-text> \n                <p>Select answer type</p>\n                <v-slider \n                  v-model=\"selectedAnswerType\" \n                  :tick-labels=\"answerTypes\" :max=\"3\"\n                  step=\"1\" ticks=\"always\" tick-size=\"6\"\n                  >\n                </v-slider>\n              </v-card-text>\n\n              <v-divider></v-divider>\n\n              <v-card-actions>\n                  <v-spacer></v-spacer>\n                  <v-btn color=\"black\" outlined text @click=\"setAnswerOptionDialog = false\"> Back </v-btn>\n                  <v-btn dark color=\"primary\"\n                    @click=\"setRenderOption({index: selectedTaskId, renderOption: answerTypes[selectedAnswerType]}); setAnswerOptionDialog = false\"> \n                    Save \n                  </v-btn>\n              </v-card-actions>\n              \n          </v-card>\n        </v-dialog>\n\n      </v-stepper-content>\n\n    </v-stepper-items>\n  </v-stepper>\n</template>\n\n<script>\nimport { mapActions, mapGetters } from \"vuex\";\nimport { parseMathLang } from \"../myfiles/taskHandler\";\nimport TaskDataService from \"../services/taskDataService\";\nimport TestDataService from '../services/testDataService';\nimport GeneratorService from \"../services/generatorService\";\nimport CategoryDataService from \"../services/categoryDataService\";\n\nexport default {\n    data() {\n        return {\n            // stepper completion and list items on each page\n            selectedTaskId: -1,\n            timer: 15,\n            testName: 'New Test Name',\n\n            // task handling\n            tasks: [],\n            concreteTasks: [],\n            categories: [],\n\n            // answer types and rendering\n            answerTypes: [ 'text', 'radio', 'select', 'checkbox' ],\n            answerOptions: [],\n            selectedAnswerType: 'text',\n            setAnswerOptionDialog: false,\n\n            // remove task dialog\n            removeDialog: false,\n            \n            placeholderModel: 0,\n        }\n    },\n    methods: {\n\n        // function from testData Vuex store \n        ...mapActions({\n          setGrade: 'test/setGrade',\n          setSelectedCategory: 'test/setSelectedCategory',\n          setSelectedTask: 'test/setSelectedTask',\n          moveToNextStep: 'test/moveToNextStep',\n          moveToPrevStep: 'test/moveToPrevStep',\n          getTasks: 'test/getTasks',\n          generateConcreteTasks: 'test/generateConcreteTasks',\n          setRenderOption: 'test/setRenderOption',\n          removeConcreteTask: 'test/removeConcreteTask'\n        }),\n\n        setTestName(event) {\n            this.testName = event.target.innerHTML;\n            console.log(this.testName);\n        },\n\n        // remove selected task\n        removeTask(i) {\n          this.removeDialog = false;\n          this.concreteTasks.splice(i, 1);\n        },\n\n        // choose from items in the list\n        setSelected(selection, i) {\n            selection.splice(i, 1, !selection[i]);\n        },\n\n        // setup mapping of tasks\n        getDisplayTask(task) {\n            return {\n                id: task.id,\n                name: task.name,\n                content: task.content,\n                last_mod: task.updatedAt\n            };\n        },\n\n        // setup mapping of categories\n        getDisplayCategory(category) {\n            return {\n                id: category.id,\n                name: category.name\n            };\n        },\n\n        // get Tasks from database\n        retrieveTasks() {\n          TaskDataService.getAll()\n            .then((response) => {\n              this.tasks = response.data.map(this.getDisplayTask);\n              console.log(response.data);\n\n              // Generate preview for each task that was loaded\n              this.tasks.forEach(task => {\n                let abstractTask = parseMathLang(task.content);\n\n                GeneratorService.generate({content: abstractTask}).then((res) => {\n                  // Save id of task and add to concreteTasks array\n                  this.concreteTasks.push({id: task.id, content: res.data.content});\n                  this.answerOptions.push('text');\n                  console.log(this.concreteTasks);\n                })\n              });\n\n            })\n            .catch((e) => {\n              console.log(e);\n            });\n        },\n\n        // get Categories from database\n        retrieveCategories() {\n          CategoryDataService.getAll()\n            .then((response) => {\n              this.categories = response.data.map(this.getDisplayCategory);\n              console.log(response.data);\n            })\n            .catch((e) => {\n              console.log(e);\n            });\n        },\n\n        // Create new test and add selected tasks or update existing text\n        createOrSaveTest() {\n          TestDataService.create(\n            {name: this.testName, timeLimit: this.timer, createdBy: this.$store.state.app.userID }\n          )\n          .then(async (response) => {\n            let testId = response.data.id;\n\n            // Add each selected to the test\n            for(let task of this.$store.state.test.concreteTasks) {\n              await TestDataService.addTask({\n                testId: testId,\n                taskId: task.abstractTaskId,\n                taskRenderOption: task.renderOption\n              })\n              .then((res) => console.log(res))\n              .catch((err) => console.log(err));\n            }\n            \n            this.$router.push({ name: \"yourTests\" });\n          });\n        },\n    },\n\n    // This function runs before the UI loads\n    beforeMount() {\n        // Load categories and tasks from the database\n        this.retrieveCategories();\n        this.retrieveTasks();\n        this.generateConcreteTasks();\n    },\n\n    computed: {\n      ...mapGetters({\n        isCategorySelected: 'test/isCategorySelected',\n        isTaskSelected: 'test/isTaskSelected'\n      })\n    }\n}\n</script>\n\n<style>\n  .b-g {\n    background-color: var(--green-background-color);\n  }\n</style>"]}]}