{"remainingRequest":"/home/dc/Documents/BP/vue-bp-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dc/Documents/BP/vue-bp-web/src/components/yourtasks.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/dc/Documents/BP/vue-bp-web/src/components/yourtasks.vue","mtime":1644353100412},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/css-loader/dist/cjs.js","mtime":1642114937836},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1642114939216},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/postcss-loader/src/index.js","mtime":1642114938300},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/cache-loader/dist/cjs.js","mtime":1642114936856},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/vue-loader/lib/index.js","mtime":1642114938760}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmItZyB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ncmVlbi1iYWNrZ3JvdW5kLWNvbG9yKTsKICAgIGhlaWdodDogOTAlOwp9Ci5yLWcgewogICAgaGVpZ2h0OiA5MCU7Cn0KLmgtZyB7CiAgICBib3JkZXI6IHNvbGlkIDJweCBob3RwaW5rOwp9CgpbdGV4dC1uYXJyb3ddIHsKICAgIGxpbmUtaGVpZ2h0OiAxLjEgIWltcG9ydGFudDsKICAgIGZvbnQtc2l6ZTogMXJlbTsKfQoKLnBvaW50ZXIgewogICAgY3Vyc29yOiBwb2ludGVyICFpbXBvcnRhbnQ7Cn0K"},{"version":3,"sources":["yourtasks.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"yourtasks.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <v-container \n        class=\"d-flex flex-column justify-start align-center mt-10 rounded-lg\">\n        \n        <h3 class=\"t-t-color text-h4 my-4 font-weight-medium\"> All your tasks </h3>\n\n        <v-card elevation=\"0\" class=\"ml-0\">\n            <v-card-title>\n            <v-spacer></v-spacer>\n            <v-spacer></v-spacer>\n            <v-spacer></v-spacer>\n            <v-text-field\n                v-model=\"search\"\n                append-icon=\"mdi-magnify\"\n                label=\"Search\"\n                single-line\n                hide-details\n            ></v-text-field>\n            <v-spacer></v-spacer>\n            <v-spacer></v-spacer>\n            <v-spacer></v-spacer>\n            </v-card-title>\n            \n            <v-data-table\n            :headers=\"headers\"\n            :items=\"tasks\"\n            :items-per-page=\"5\"\n            :search=\"search\"\n            width=\"80%\"\n        >\n             <template v-slot:item=\"row\">\n                <tr>\n                    <td>{{ row.item.name }}</td>\n                    <td>{{ row.item.last_mod }}</td>\n\n                    <td>\n                    <v-btn plain class=\"pa-1\" :ripple=\"false\" @click=\"modifyTask(row.item)\">\n                        <v-icon color=\"var(--main-text-color)\">\n                            mdi-pencil-outline\n                        </v-icon>\n                    </v-btn>\n                    </td>\n                    <td>\n                    <v-btn plain class=\"pa-0\" :ripple=\"false\" @click.stop=\"showDeleteDialog(row.item)\">\n                        <v-icon class=\"pa-0\" color=\"orange\">\n                            mdi-close-circle-outline\n                        </v-icon>\n                    </v-btn>\n                    </td>\n                </tr>\n            </template>\n\n        </v-data-table>\n\n        </v-card>\n\n        <!-- Display quick message for the user -->\n            <v-snackbar v-model=\"infoMessage\" :timeout=\"2500\" outlined :color=\"this.success ? 'green' : 'red'\" top>\n                <!-- text message -->\n                {{ message }}\n                <!-- close icon -->\n                <template v-slot:action=\"{ attrs }\">\n                    <v-btn plain v-bind=\"attrs\" @click=\"infoMessage = false\">\n                        <v-icon>mdi-close</v-icon>\n                    </v-btn>\n                </template>\n            </v-snackbar>\n        <!-- Display quick message for the user -->\n\n        <v-dialog v-model=\"deleteDialog\" width=\"325\">\n                        <v-card>\n                            <v-card-title class=\"text-h5 lighten-2\"> Delete task? </v-card-title>\n\n                            <v-card-text>\n                                Are you sure you want to delete this task?\n                            </v-card-text>\n\n                            <v-divider></v-divider>\n\n                            <v-card-actions>\n                            <v-spacer></v-spacer>\n                            <v-btn\n                                color=\"black\"\n                                text\n                                @click=\"deleteDialog = false\"\n                            >\n                                Cancel\n                            </v-btn>\n                            <v-btn\n                                color=\"red\"\n                                text\n                                @click=\"deleteTask(currentId)\"\n                            >\n                                Delete\n                            </v-btn>\n                            </v-card-actions>\n                        </v-card>\n                    </v-dialog>\n\n    </v-container>\n</template>\n\n<script>\n    import TaskDataService from \"../services/taskDataService\";\n\n    export default {\n        data() {\n            return { \n                message: \"\",\n                success: false,\n                infoMessage: false,\n\n                currentId: -1, // which task was selected to modify or delete from the table\n\n                deleteDialog: false, // show 'Are you sure' dialog for deletion\n                search: \"\",\n                headers: [\n                    {text: \"Task name\", value: \"name\", width: \"60ch\"},\n                    {text: \"Last Modified\", value: \"last_mod\", width: \"50ch\"},\n                    {text: \"Modify\", value: \"modify\", align: \"center\", sortable: false, width: \"10ch\"},\n                    {text: \"Delete\", value: \"delete\", align: \"center\", sortable: false, width: \"10ch\"},\n                ],\n\n                tasks: [ ]\n            };\n        },\n        computed: { },\n\n        created() { },\n\n        methods: { \n\n            // modify selected task in next window\n            modifyTask(item) {\n                console.log(\"ITEM DATA: \", item);\n                // pass id paramter to the router\n                this.$router.push({name: \"createTask\", params: {taskId: item.id}})\n            },\n            \n            // delete selected task\n            showDeleteDialog(item) {\n                this.currentId = item.id\n                this.deleteDialog = true;\n            },\n            deleteTask(id) {\n                TaskDataService.delete(id)\n                .then((res) => {\n                    this.message = res.data.message\n                    this.success = true\n                    this.infoMessage = true\n                    //this.retrieveTasks()\n                    this.deleteDialog = false\n                })\n                .catch((err) => {\n                    this.message = err.response.data.message;\n                    this.success = false\n                    this.infoMessage = true\n                    this.retrieveTasks()\n                    this.deleteDialog = false\n                })\n            },\n\n            // setup mapping of tasks\n            getDisplayTask(task) {\n                return {\n                    id: task.id,\n                    name: task.name,\n                    last_mod: task.updatedAt\n                };\n            },\n            // get tasks from database\n            retrieveTasks() {\n            TaskDataService.getAll()\n                    .then((response) => {\n                    this.tasks = response.data.map(this.getDisplayTask);\n                    console.log(response.data);\n                    })\n                    .catch((e) => {\n                    console.log(e);\n                });\n            },\n        },\n        beforeMount() {\n                this.retrieveTasks();\n        }\n    }\n</script>\n\n<style>\n    .b-g {\n        background-color: var(--green-background-color);\n        height: 90%;\n    }\n    .r-g {\n        height: 90%;\n    }\n    .h-g {\n        border: solid 2px hotpink;\n    }\n\n    [text-narrow] {\n        line-height: 1.1 !important;\n        font-size: 1rem;\n    }\n\n    .pointer {\n        cursor: pointer !important;\n    }\n</style>"]}]}