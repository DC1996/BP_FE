{"remainingRequest":"/home/dc/Documents/BP/vue-bp-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dc/Documents/BP/vue-bp-web/src/components/createtaskpage.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/dc/Documents/BP/vue-bp-web/src/components/createtaskpage.vue","mtime":1647293880643},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/cache-loader/dist/cjs.js","mtime":1642114936856},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/babel-loader/lib/index.js","mtime":1642114938312},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/cache-loader/dist/cjs.js","mtime":1642114936856},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/vue-loader/lib/index.js","mtime":1642114938760}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["createtaskpage.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+SA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA","file":"createtaskpage.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <v-container \n        class=\"d-flex flex-column justify-start align-center mt-10 b-g rounded-lg\">\n        \n        <h4 \n            class=\"t-t-color text-h5 my-4 font-weight-medium\" \n            contenteditable spellcheck=\"false\" @blur=\"setName\"> \n            {{ this.name }} \n        </h4>\n\n        <v-container fluid rounded label=\"Task\" class=\"d-flex flex-row\" style=\"height: 100%;\">\n            <v-col cols=\"16\" class=\"mx-2 py-0 px-2 ma-0 d-flex flex-column justify-space-between\">\n            <div class=\"d-flex flex-column justify-start flex-grow-0\">\n                <h3 class=\"ml-2 mb-1\"> Task text </h3>\n                <v-textarea text-narrow\n                    spellcheck=\"false\"\n                    background-color=\"white\" \n                    color=\"black\"\n                    id=\"task-text\" class=\"text-caption pb-1\"\n                    v-model=\"text\" \n                    solo no-resize hide-details rows=\"4\">\n                </v-textarea>\n                <h3 class=\"ml-2 mb-0 mt-2\"> Questions </h3>\n                <div class=\"d-flex flex-column justify-start\" style=\"height: 220px; overflow-y: auto\">\n                    <div\n                        class=\"d-flex flex-row align-center\" \n                        v-for=\"(question, i) in ext_text.task.questions\" :key=\"i\">\n                        <v-text-field\n                            :label=\"'Task question #' + i\"\n                            placeholder=\"eq.: What is the result? @res\"\n                            solo hide-details\n                            class=\"my-1 d-flex flex-grow-1\"\n                            v-model=\"ext_text.task.questions[i].text\"\n                        ></v-text-field>\n                        <v-btn \n                            @click=\"removeQuestion(i)\"\n                            icon plain class=\"mx-2\">\n                            <v-icon color=\"red\">mdi-delete-empty</v-icon>\n                        </v-btn>\n                    </div>\n                    <v-btn \n                        @click=\"addQuestion\"\n                        depressed class=\"my-1 mr-2\">\n                        <v-icon>mdi-plus</v-icon> Add question \n                    </v-btn>\n                </div>\n            </div>\n            <div class=\"d-flex flex-row mt-2 mb-1 justify-self-end\">\n                <v-btn class=\"mx-1\" @click=\"parseText\">Parse</v-btn>\n                <v-btn class=\"mx-1\" @click=\"previewTask\">Preview</v-btn>\n                <v-btn class=\"mx-1\" @click=\"saveText\">Save</v-btn>\n                <!-- <v-btn class=\"mx-1\" @click=\"restoreText\">Restore</v-btn> -->\n            </div>\n\n            <v-overlay :value=\"taskOverlay\" :light=\"true\" :dark=\"false\" >\n                    <v-sheet \n                        elevation=\"4\" width=\"650\"\n                        style=\"height: 600px; overflow-y: auto\"\n                        class=\"pa-4 ma-2 d-flex flex-column justify-flex-start align-flex-start rounded-lg\"\n                    >\n                    <v-btn plain icon @click=\"taskOverlay = false\" class=\"close-button mt-4 mr-6 pa-0 shrink\">\n                            <v-icon color=\"danger\">mdi-close</v-icon>\n                        </v-btn>\n\n                    <h3 class=\"ma-2 pa-1\"> {{ preview.text }} </h3>\n                    <div class=\"d-flex flex-column ma-2 pa-1\" v-for=\"(q, i) in preview.questions\" :key=\"'q' + i\">\n                        \n                        \n                        <h4 id=\"qLatex\" class=\"ma-1\"> {{ q.text }} </h4>\n\n\n                        <div class=\"ma-1 pa-1\" v-for=\"(a, i) in q.answers\" :key=\"'a' + i\">\n                            <p v-for=\"(item, index) in a.correct\" :key=\"index\"> a) {{item}} </p>\n                            <p v-for=\"(item, index) in a.incorrect\" :key=\"'ia' + index\"> \n                                {{ String.fromCharCode(98 + index) + ')'}} {{item}} \n                            </p>\n                        </div>\n                    </div>\n\n                    <!-- <v-btn @click=\"taskOverlay = false\">Close</v-btn> -->\n                    </v-sheet>\n            </v-overlay>\n\n            </v-col>\n            <v-col cols=\"16\" class=\"mx-2 pa-0\">\n                <h3 class=\"ml-2 mb-1\"> Variables </h3>          \n                <div class=\"d-flex flex-row flex-wrap align-center ma-0 pa-0 minus\">\n                    <div v-for=\"(variable, ind) in ext_text.task.variables\" :key=\"ind + 'v'\" class=\"ma-0 pa-0\">\n                        <v-chip\n                            v-if=\"variable.visible\"\n                            @click=\"variableInfo(ind)\"\n                            color=\"primary\"\n                            class=\"mx-2 my-1 px-6 py-4 pointer elevation-1\">\n                            {{ variable.name.substr(1) }}\n                        </v-chip>\n                    </div>                    \n                    <v-chip \n                        v-for=\"(variable, i) in ext_text.addedVariables\" :key=\"i + 'av'\"\n                        color=\"primary\"\n                        @click=\"addedVariableInfo(i)\"\n                        class=\"d-flex flex-row justify-center align-center mx-2 my-1 px-3 py-4 pointer elevation-1\">\n                        {{ variable.name.substr(1) }}\n                    </v-chip>\n                    <div>\n                    <v-tooltip right>\n                        <template v-slot:activator=\"{ on, attrs }\">\n                            <v-chip \n                            v-bind=\"attrs\"\n                            v-on=\"on\"\n                            @click=\"addVariable()\"\n                            color=\"secondary\"\n                            class=\"mx-2 my-1 px-2 py-2 pointer elevation-2\">\n                            <v-icon small>mdi-plus</v-icon>\n                            </v-chip>\n                        </template>\n                        <span>Add a variable</span>\n                    </v-tooltip>\n                    </div>\n                </div>\n                <v-overlay\n                    tabindex=\"0\"\n                    @keydown.esc=\"overlayV = false\"\n                    :value=\"overlayV\" :light=\"true\" :dark=\"false\" v-if=\"ext_text.task.variables.length != 0\">\n                    <v-sheet \n                        elevation=\"4\" width=\"500\" \n                        class=\"pa-4 ma-2 mt-0 pt-2 d-flex flex-column justify-flex-start align-flex-start rounded-lg\"\n                    >\n                        <v-btn plain icon @click=\"overlayV = false\" class=\"close-button mt-4 mr-6 pa-0 shrink\">\n                            <v-icon color=\"danger\">mdi-close</v-icon>\n                        </v-btn>\n                        <h2 class=\"ma-2 mt-3\"> {{ ext_text.task.variables[indexV].name }} </h2>\n                        <p class=\"ma-2\"> Definition </p>\n                        <v-text-field \n                            label=\"\" placeholder=\"e.g.: ( $a * 2 ) + 1\" \n                            v-model=\"ext_text.task.variables[indexV].definition\" \n                            outlined dense class=\"shrink mx-2\"> \n                            {{ ext_text.task.variables[indexV].definition }} \n                        </v-text-field>\n                        <p class=\"ma-2 mt-0\"> Range {{ ext_text.task.variables[indexV].range.fullRange() }} </p>\n                        <v-row class=\"d-flex flex-row flex-nowrap px-3\">\n                            <v-text-field \n                                label=\"Start\" v-model=\"ext_text.task.variables[indexV].range.start\" \n                                outlined dense class=\"shrink mx-2 mt-3\">\n                            </v-text-field>\n                            <v-text-field \n                                label=\"End\" v-model=\"ext_text.task.variables[indexV].range.end\" \n                                outlined dense class=\"shrink mx-2 mt-3\">\n                            </v-text-field>\n                            <v-text-field \n                                label=\"Step\" v-model=\"ext_text.task.variables[indexV].range.step\"\n                                outlined dense class=\"shrink mx-2 mt-3\">\n                            </v-text-field>\n                        </v-row>\n                    </v-sheet>\n                </v-overlay>\n                <v-overlay \n                    :value=\"overlayAddV\" :light=\"true\" :dark=\"false\" v-if=\"ext_text.addedVariables.length != 0\">\n                    <v-sheet \n                        elevation=\"4\" width=\"500\" \n                        class=\"pa-4 ma-2 mt-0 pt-2 d-flex flex-column justify-flex-start align-flex-start rounded-lg\">\n                        <v-btn plain icon @click=\"overlayAddV = false\" class=\"close-button mt-4 mr-6 pa-0 shrink\">\n                            <v-icon color=\"danger\">mdi-close</v-icon>\n                        </v-btn>\n                        <h2 class=\"ma-2 mt-3\" contenteditable spellcheck=\"false\" @blur=\"setVariableName\"> \n                            {{ ext_text.addedVariables[indexAV].name }}\n                        </h2>\n                        <p class=\"ma-2\"> Definition </p>\n                        <v-text-field \n                            label=\"\" \n                            placeholder=\"e.g.: ( $a * 2 ) + 1\" \n                            v-model=\"ext_text.addedVariables[indexAV].definition\" \n                            outlined dense class=\"shrink mx-2\"> \n                            {{ ext_text.addedVariables[indexAV].definition }}\n                        </v-text-field>\n                        <p class=\"ma-2 mt-0\"> Range {{ ext_text.addedVariables[indexAV].testRange.fullRange() }} </p>\n                        <v-row class=\"d-flex flex-row flex-nowrap px-3\">\n                            <v-text-field \n                                label=\"Start\" v-model=\"ext_text.addedVariables[indexAV].testRange.start\" \n                                outlined dense class=\"shrink mx-2 mt-3\">\n                            </v-text-field>\n                            <v-text-field \n                                label=\"End\" v-model=\"ext_text.addedVariables[indexAV].testRange.end\"\n                                outlined dense class=\"shrink mx-2 mt-3\">\n                            </v-text-field>\n                            <v-text-field \n                                label=\"Step\" v-model=\"ext_text.addedVariables[indexAV].testRange.step\" \n                                outlined dense class=\"shrink mx-2 mt-3\">\n                            </v-text-field>\n                        </v-row>\n                    </v-sheet>\n                </v-overlay>\n\n                <h3 class=\"ml-2\">Answers</h3>\n                    <div class=\"d-flex flex-row flex-wrap align-center ma-0 pa-0 minus\">\n                        <div v-for=\"(answer, i) in ext_text.task.answers\" :key=\"i + 'a'\" class=\"ma-0 pa-0\">\n                            <v-chip\n                                v-if=\"answer.visible\"\n                                @click=\"answerInfo(i)\"\n                                :elevation=\"6\" color=\"primary\"\n                                class=\"mx-2 my-1 px-6 py-4 pointer\">\n                                {{ answer.name.substr(1) }}\n                            </v-chip>\n                        </div>\n                    </div>\n                    <v-overlay \n                        :light=\"true\" :dark=\"false\"\n                        :value=\"overlayA\" v-if=\"ext_text.task.answers.length != 0\">\n                        <v-sheet \n                        elevation=\"4\" width=\"500\" \n                        height=\"500px\"\n                        class=\"pa-4 ma-2 mt-0 pt-2 d-flex flex-column justify-flex-start align-flex-start rounded-lg overflow-y-auto\"\n                    >\n                        <v-btn plain icon @click=\"overlayA = false\" class=\"close-button mt-4 mr-6 pa-0 shrink\">\n                            <v-icon color=\"danger\">mdi-close</v-icon>\n                        </v-btn>\n                        <h2 class=\"ma-2 mt-3\" contenteditable spellcheck=\"false\" @blur=\"setVariableName\"> \n                            {{ ext_text.task.answers[indexA].name }}\n                        </h2>\n\n                        <p class=\"ma-2 mt-0\"> Range {{ ext_text.task.answers[indexA].range.fullRange() }} </p>\n                        <v-row class=\"d-flex flex-row flex-nowrap px-3\">\n                            <v-text-field \n                                label=\"Start\" v-model=\"ext_text.task.answers[indexA].range.start\" \n                                outlined dense class=\"shrink mx-2 mt-3\">\n                            </v-text-field>\n                            <v-text-field \n                                label=\"End\" v-model=\"ext_text.task.answers[indexA].range.end\" \n                                outlined dense class=\"shrink mx-2 mt-3\">\n                            </v-text-field>\n                            <!-- <v-text-field \n                                label=\"Step\" v-model=\"ext_text.task.answers[indexA].range.step\"\n                                outlined dense class=\"shrink mx-2 mt-3\">\n                            </v-text-field> -->\n                        </v-row>\n\n                        <p class=\"ma-2 mt-0\">Correct</p>\n                        <div \n                            class=\"d-flex flex-row\" \n                            v-for=\"(el, i) in ext_text.task.answers[indexA].correct\" :key=\"'el_c' + i\">\n                            <v-text-field \n                                label=\"\" \n                                placeholder=\"e.g.: ( $a * 2 ) + 1\" \n                                v-model=\"ext_text.task.answers[indexA].correct[i]\" \n                                outlined dense class=\"mx-2 my-0\"> \n                                {{ el }}\n                            </v-text-field>\n                            <v-btn\n                                @click=\"removeCorrect(i)\" \n                                icon plain color=\"red\" class=\"mx-2\">\n                                <v-icon>mdi-delete-empty</v-icon>\n                            </v-btn>\n                        </div>\n                        <v-btn depressed class=\"mx-2\" @click=\"addCorrect\">\n                            <v-icon>mdi-plus</v-icon>\n                            Add correct answer\n                        </v-btn>\n\n                        \n                        <p class=\"ma-2\">Incorrect</p>\n                        <div \n                            class=\"d-flex flex-row\" \n                            v-for=\"(el, i) in ext_text.task.answers[indexA].incorrect\" :key=\"'el_ic' + i\">\n                            <v-text-field \n                                label=\"\" \n                                placeholder=\"e.g.: ( $a * 2 ) + 1\" \n                                v-model=\"ext_text.task.answers[indexA].incorrect[i]\" \n                                outlined dense class=\"mx-2 my-0\"> \n                                {{ ext_text.task.answers[indexA].incorrect }}\n                            </v-text-field>\n                            <v-btn \n                                @click=\"removeIncorrect(i)\"\n                                icon plain color=\"red\" class=\"mx-2\">\n                                <v-icon>mdi-delete-empty</v-icon>\n                            </v-btn>\n                        </div>\n                        <v-btn depressed class=\"mx-2\" @click=\"addIncorrect\">\n                            <v-icon>mdi-plus</v-icon>\n                            Add incorrect answer\n                        </v-btn>\n                        \n                        </v-sheet>\n                    </v-overlay>\n            </v-col>\n\n            <!-- Display quick message for the user -->\n            <v-snackbar v-model=\"infoMessage\" :timeout=\"messageTimeout\" :color=\"this.success ? 'green' : 'red'\" top>\n                <!-- text message -->\n                {{ message }}\n                <!-- close icon -->\n                <template v-slot:action=\"{ attrs }\">\n                    <v-btn plain v-bind=\"attrs\" @click=\"infoMessage = false\">\n                        <v-icon>mdi-close</v-icon>\n                    </v-btn>\n                </template>\n            </v-snackbar>\n            <!-- Display quick message for the user -->\n\n        </v-container>\n\n    </v-container>\n</template>\n\n<script>\n    import { tokenize } from \"../myfiles/tokenizer.js\"\n    import { variableInfo, parseMathLang, Question, Generator, ConcreteTask, Variable } from \"../myfiles/taskHandler\"\n    import { randomInt, evaluate } from \"mathjs\";\n    import { Extractor } from \"../myfiles/extractorModule\";\n    import { MQ } from 'mathquill-build'\n\n    import TaskDataService from \"../services/taskDataService\";\n    import GeneratorService from \"../services/generatorService\";\n\n    var htmlElement = document.getElementById('some_id');\n    var config = {\n        restrictMismatchedBrackets: true\n    };\n    var mathField = MQ.MathField(htmlElement, config);\n\n    mathField.latex('2^{\\\\frac{3}{2}}'); // Renders the given LaTeX in the MathQuill field\nmathField.latex(); // => '2^{\\\\frac{3}{2}}'\n\n    export default {\n        data() {\n            return {\n                message: \"\",\n                success: false,\n                infoMessage: false,\n                messageTimeout: 2500,\n                \n                name: \"New Task\",\n                text: \"\",\n                task_text: \"\",\n\n                ext_text: new Extractor(),\n                preview: new ConcreteTask(),\n                \n                variables: [],\n                questions: [],\n                answers: [],\n\n                overlayV: false,\n                overlayA: false,\n                overlayAddV: false,\n                taskOverlay: false,\n                indexV: 0,\n                indexAV: 0,\n                indexA: 0,\n            };\n        },\n        computed: {\n            getText() { return this.text; }\n        },\n\n        // Load task depending on navigation origin\n        beforeMount() {\n            console.log(\"taskId from route params\", localStorage.getItem('taskId'))\n\n            // Modify was selected from task history\n            if( this.$route.params.taskId ) \n            {\n                // Save id to localStorage, so we can reload page without lossing the id\n                localStorage.setItem('taskId', this.$route.params.taskId)\n            }\n\n            // Id was saved from route params or if the page was reloaded\n            if ( localStorage.getItem('taskId') )\n            {\n                // Load the task content from the database\n                TaskDataService.get(localStorage.getItem('taskId'))\n                    .then((res) => {\n                        console.log(res);\n\n                        try {\n                            this.name = res.data.name\n                            this.ext_text.task = parseMathLang(res.data.content);\n\n                            console.log('OUTPUT: ', this.ext_text.task);\n                            this.successHandler('Parsing Successful!');\n\n                        } catch (error) {\n                            this.errorHandler(error.message);\n                        }\n                        // this.ext_text.task = parseMathLang(res.data.content);\n\n                        this.text = this.ext_text.task.text.trim();\n                    })\n                    .catch((error) => { \n                        this.errorHandler(error); \n                    });\n            }\n        },\n\n        created() {\n            window.addEventListener('beforeunload', function(event) {\n                event.returnValue = 'Write something';\n                alert(\"wait\");\n            });\n        },\n\n        methods: {\n\n            /* SNACK BAR */\n            // Display error message on snackbar\n            errorHandler(message) {\n                console.log(\"ERROR: \", message)\n                this.messageTimeout = 8000;\n                this.message = message;\n                this.success = false;\n                this.infoMessage = true;\n            },\n            // Display success message on snackbar\n            successHandler(message) {\n                this.messageTimeout = 8000;\n                this.message = message\n                this.success = true;\n                this.infoMessage = true;\n            },\n\n            setName(e) {\n                this.name = e.target.innerText\n                console.log(\"NAME\",this.name)\n            },\n\n            testext() {\n                // Test extraction\n                this.ext_text.extractVariable(tokenize(this.text));\n            },\n\n            createNewTask() \n            {\n                // Prepare data for sending\n                var data = { name: this.name, content: this.ext_text.generateText() };\n\n                // Create new entry in database\n                if ( localStorage.getItem('taskId') == null) {\n                    \n                    TaskDataService.create(data)\n                        .then((res) => { \n                            console.log(res); \n                            this.successHandler(\"Task saved successfuly.\");\n                            localStorage.setItem('taskId', res.data.id)\n                        })\n                        .catch((err) => { \n                            this.errorHandler(err.response.data.message);\n                        });\n                    }\n\n                // Update existing entry\n                else {\n                    TaskDataService.update( localStorage.getItem('taskId'), data ) \n                        .then((res) => {\n                            console.log(res);\n                            this.successHandler(res.data.message);\n                        })\n                        .catch((err) => {\n                            this.errorHandler(err.response.data.message);\n                        })\n                }\n            },\n\n            variableInfo : function(i) {\n                this.indexV = i\n                this.overlayV = true\n            },\n            addedVariableInfo: function(i) {\n                this.indexAV = i\n                this.overlayAddV = true;\n            },\n            answerInfo: function(i) {\n                this.indexA = i\n                this.overlayA = true\n            },\n            previewTask: function () {\n\n                GeneratorService\n                    .generate( { content: this.ext_text.task } )\n                    .then((res) => {\n                        console.log('RESUUUULTS CAME BACK: ', res.data.content);\n                        this.preview = res.data.content;\n                        this.message = res.data.message;\n                        this.success = true;\n                        this.infoMessage = true;\n\n                        this.taskOverlay = true\n                        localStorage.setItem('data', this.ext_text.generateText() );\n                    })\n                    .catch((err) => {\n                        this.message = err?.reposnse?.data?.message || err.message;\n                        this.success = false;\n                        this.infoMessage = true;\n                    });\n            },\n            saveText: function() {\n                localStorage.setItem('data', this.text);\n\n                this.createNewTask();\n            },\n            restoreText: function() {\n                // TODO ?\n            },\n\n\n            // Variables\n            addVariable: function() {\n                let newVariable = new Variable(\"$newVar\");\n                newVariable.added = true;\n                \n                this.ext_text.task.variables.push(newVariable);\n            },\n            setVariableName: function(e) {\n                this.ext_text.addedVariables[this.indexAV].name = e.target.innerText;\n            },\n            removeVariable: function(i) {\n                this.ext_text.addedVariables.splice(i, 1);\n            },\n\n            // Questions\n            addQuestion: function() {\n                this.ext_text.task.questions.push(new Question());\n            },\n            removeQuestion: function(i) {\n                this.ext_text.task.questions.splice(i, 1);\n            },\n\n            // Answers\n            addCorrect: function() {\n                this.ext_text.task.answers[this.indexA].correct.push(new String(\"\"));\n            },\n            removeCorrect: function(i) {\n                this.ext_text.task.answers[this.indexA].correct.splice(i, 1);\n            },\n            addIncorrect: function() {\n                this.ext_text.task.answers[this.indexA].incorrect.push(new String(\"\"));\n            },\n            removeIncorrect: function(i) {\n                this.ext_text.task.answers[this.indexA].incorrect.splice(i, 1);\n            },\n\n            parseText : function () {\n\n                // TEXT\n                this.ext_text.task.text = this.text;\n\n                let tokens = tokenize(this.text);\n\n                // VARIABLES\n                this.variables = this.ext_text.extractVariables(tokens);\n\n                // ANSWERS\n                this.answers = this.ext_text.extractAnswers(tokens);\n\n                // Extract answer from each question\n                \n                // Assume list of variables has changed\n                // and set visiblity to false for all variables\n                this.ext_text.task.answers.forEach((answer) => {\n                    answer.visible = false;\n                });\n                // QUESTIONS\n                this.ext_text.task.questions.forEach((question) => {\n\n                    console.log('Q',question);\n                    console.log(tokenize(\"Q: \", question.text));\n\n                    this.ext_text.extractAnswers(tokenize(question.text));\n                });\n\n                let generated_text = this.ext_text.generateText();\n\n                console.log(generated_text);\n            }     \n        }\n    }\n</script>\n\n<style>\n    .b-g {\n        background-color: var(--green-background-color);\n        height: 90%;\n    }\n    .r-g {\n        height: 90%;\n    }\n    .h-g {\n        border: solid 2px hotpink;\n    }\n\n    [text-narrow] {\n        line-height: 1.1 !important;\n        font-size: 1rem;\n    }\n\n    .message-red {\n        border: 1px solid red;\n    }\n    .message-green {\n        border: 1px solid green;\n    }\n\n    .pointer {\n        cursor: pointer !important;\n    }\n\n    .close-button {\n        position: absolute !important;\n        top: 0rem !important;\n        right: 0rem !important;\n    }\n\n</style>"]}]}