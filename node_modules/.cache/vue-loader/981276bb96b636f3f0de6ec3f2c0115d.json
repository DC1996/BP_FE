{"remainingRequest":"/home/dc/Documents/BP/vue-bp-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dc/Documents/BP/vue-bp-web/src/components/createtaskpage.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/dc/Documents/BP/vue-bp-web/src/components/createtaskpage.vue","mtime":1649228006582},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/css-loader/dist/cjs.js","mtime":1642114937836},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1642114939216},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/postcss-loader/src/index.js","mtime":1642114938300},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/cache-loader/dist/cjs.js","mtime":1642114936856},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/vue-loader/lib/index.js","mtime":1642114938760}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgpbdGV4dC1uYXJyb3ddIHsKICAgIGxpbmUtaGVpZ2h0OiAxLjEgIWltcG9ydGFudDsKICAgIGZvbnQtc2l6ZTogMXJlbTsKfQoKLnBvaW50ZXIgewogICAgY3Vyc29yOiBwb2ludGVyICFpbXBvcnRhbnQ7Cn0KCi5jbG9zZS1idXR0b24gewogICAgcG9zaXRpb246IGFic29sdXRlICFpbXBvcnRhbnQ7CiAgICB0b3A6IDByZW0gIWltcG9ydGFudDsKICAgIHJpZ2h0OiAwcmVtICFpbXBvcnRhbnQ7Cn0KCg=="},{"version":3,"sources":["createtaskpage.vue"],"names":[],"mappingssmBA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"createtaskpage.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <v-container id=\"task\" class=\"d-flex flex-column justify-start align-center mt-2 pb-0 b-g rounded-lg\">\n\n        <!-- Task name -->        \n        <h4 class=\"text-h5 custom-font my-4 font-weight-medium\"> {{ this.name }} </h4>\n\n        <v-container fluid rounded label=\"Task\" class=\"d-flex flex-row\" style=\"height: 100%;\">\n\n            <!-- Left side -->\n            <v-col cols=\"16\" class=\"mx-2 py-0 px-2 ma-0 d-flex flex-column justify-start\">\n\n            <!-- Task text text-field -->\n            <div class=\"d-flex flex-column justify-start flex-grow-0\">\n                <h3 class=\"ml-2 mb-1\"> Task text </h3>\n                <v-textarea text-narrow spellcheck=\"false\" background-color=\"white\" color=\"black\"\n                    id=\"task-text\" class=\"text-h3 pb-2\" v-model=\"text\" solo no-resize hide-details rows=\"5\">\n                </v-textarea>\n            </div>\n\n            <!-- Variables chips section -->\n            <h3 class=\"ml-2 mb-1\"> Variables </h3>          \n                <div class=\"d-flex flex-row flex-wrap align-center ma-0 pa-0 minus\">\n                    <div v-for=\"(variable, ind) in ext_text.task.variables\" :key=\"ind + 'v'\" class=\"ma-0 pa-0\">\n                        <v-chip v-if=\"variable.visible\" @click=\"variableInfo(ind)\"\n                            color=\"primary\" label class=\"mx-2 my-1 px-6 py-4 pointer elevation-1\">\n                            {{ variable.name.substr(1) }}\n                        </v-chip>\n                    </div>                    \n                    \n                    <!-- Add variable icon -->\n                    <div>\n                        <v-btn @click=\"addVariable()\" depressed class=\"no-uppercase\">\n                            <v-icon>mdi-plus</v-icon>\n                            Add Variable\n                        </v-btn>\n                    </div>\n                </div>\n\n                <!-- Answers chips section -->\n                <h3 class=\"ml-2\">Answers</h3>\n                    <div class=\"d-flex flex-row flex-wrap align-center ma-0 pa-0 minus\">\n                        <div v-for=\"(answer, i) in ext_text.task.answers\" :key=\"i + 'a'\" class=\"ma-0 pa-0\">\n                            <v-chip v-if=\"answer.visible\" @click=\"answerInfo(i)\"\n                                color=\"primary\" label class=\"mx-2 my-1 px-6 py-4 pointer\">\n                                {{ answer.name.substr(1) }}\n                            </v-chip>\n                        </div>\n                    </div>\n\n            <!-- PREVIEW -->\n            <v-overlay id=\"latexMath\" :value=\"taskOverlay\" :light=\"true\" :dark=\"false\">\n                <v-sheet \n                    elevation=\"4\" width=\"650\"\n                    style=\"height: 600px; overflow-y: auto\"\n                    class=\"pa-4 ma-2 d-flex flex-column justify-flex-start align-flex-start rounded-lg\">\n                    \n                    <v-btn plain icon @click=\"taskOverlay = false\" class=\"close-button mt-4 mr-6 pa-0 shrink\">\n                        <v-icon color=\"danger\">mdi-close</v-icon>\n                    </v-btn>\n\n                    <h3 class=\"ma-2 pa-1\"> {{ preview.text.trim() }} </h3>\n                    <div class=\"d-flex flex-column ma-2 pa-1\" v-for=\"(q, i) in preview.questions\" :key=\"'q' + i\">\n                        \n                        <h4 id=\"qLatex\" class=\"ma-1\"> {{ replaceAnswers(q.text.trim()) }} </h4>\n                        <math-jax :latex=\"replaceAnswers(q.text.trim())\"></math-jax>\n\n                        <div class=\"ma-1 pa-1\" v-for=\"(a, i) in q.answers\" :key=\"'a' + i\">\n                            <p v-for=\"(item, index) in a.correct\" :key=\"index\"> a) {{item}} </p>\n                            <p v-for=\"(item, index) in a.incorrect\" :key=\"'ia' + index\"> \n                                {{ String.fromCharCode(98 + index) + ')'}} {{item}} \n                            </p>\n                        </div>\n                    </div>\n                </v-sheet>\n            </v-overlay>\n\n            </v-col>\n            \n            <!-- Right side -->\n            <v-col cols=\"16\" class=\"mx-2 pa-0 d-flex flex-column justify-space-between\">\n\n            <!-- Questions section -->\n            <div class=\"d-flex flex-column justify-start flex-grow-0\">\n                <h3 class=\"ml-2 mb-0\"> Questions </h3>\n                <div class=\"d-flex flex-column justify-start\" style=\"height: 220px; overflow-y: auto\">\n                    <div\n                        class=\"d-flex flex-row align-center\" \n                        v-for=\"(question, i) in ext_text.task.questions\" :key=\"i\">\n                        <v-text-field\n                            :label=\"'Task question #' + i\"\n                            placeholder=\"eq.: What is the result? @res\"\n                            solo hide-details color=\"error\"\n                            class=\"my-1 d-flex flex-grow-1\"\n                            v-model=\"ext_text.task.questions[i].text\">\n                            <template v-slot:append>\n                                <v-icon color=\"error\" @click=\"removeQuestion(i)\">mdi-delete-empty</v-icon>\n                            </template>\n                        \n                        </v-text-field>\n                    </div>\n                    <!-- Add question button -->\n                    <v-btn @click=\"addQuestion\" depressed class=\"my-1 no-uppercase align-self-start\">\n                        <v-icon>mdi-plus</v-icon>  \n                        Add Question \n                    </v-btn>\n                </div>\n            </div>\n            <div class=\"d-flex flex-row mt-2 mb-1 justify-self-end\">\n                <v-btn class=\"mx-1\" @click=\"parseText\">Parse</v-btn>\n                <v-btn class=\"mx-1\" @click=\"previewTask\">Preview</v-btn>\n                <v-tooltip right>\n                        <template v-slot:activator=\"{ on, attrs }\">\n                            <v-btn v-bind=\"attrs\" v-on=\"on\" large icon\n                            @click=\"previewTask\"\n                            class=\"mx-2 my-1 px-2 py-2 pointer elevation-2\">\n                            <v-icon small> mdi-plus </v-icon>\n                            </v-btn>\n                        </template>\n                        <span> Preview task </span>\n                    </v-tooltip>\n                <v-btn elevation=\"2\" large color=\"white\"\n                class=\"px-6 py-2 mx-2 no-uppercase\" @click=\"getCategories(); overlaySave = true\"> Save\n                </v-btn>\n                <!-- <v-btn class=\"mx-1\" @click=\"restoreText\">Restore</v-btn> -->\n            </div>\n\n            </v-col>\n        </v-container>\n\n        <!-- Make this a dialog...variale dialog -->\n        <v-overlay tabindex=\"0\" @keydown.esc=\"overlayV = false\"\n            :value=\"overlayV\" :light=\"true\" :dark=\"false\" v-if=\"ext_text.task.variables.length != 0\">\n            <v-sheet \n                elevation=\"4\" width=\"500\" \n                class=\"pa-4 ma-2 mt-0 pt-2 d-flex flex-column justify-flex-start align-flex-start rounded-lg\">\n                <!-- Close icon -->\n                <v-btn plain icon @click=\"overlayV = false\" class=\"close-button mt-4 mr-6 pa-0 shrink\">\n                    <v-icon color=\"danger\">mdi-close</v-icon>\n                </v-btn>\n                <!-- Delete variable -->\n                <v-btn \n                    v-if=\"ext_text.task.variables[indexV].added\"\n                    icon @click=\"overlayV = false; removeVariable(indexV)\"\n                    class=\"close-button mt-4 mr-14 pa-0 shrink\">\n                    <v-icon color=\"red\">mdi-delete</v-icon>\n                </v-btn>\n\n                <h2 class=\"ma-2 mt-3\" :contenteditable=\"ext_text.task.variables[indexV].added\"> \n                    {{ ext_text.task.variables[indexV].name }} \n                </h2>\n                \n                <p class=\"ma-2\"> Definition </p>\n                <v-text-field \n                    label=\"\" placeholder=\"e.g.: ( $a * 2 ) + 1\" \n                    v-model=\"ext_text.task.variables[indexV].definition\" \n                    outlined dense class=\"shrink mx-2\"> \n                    {{ ext_text.task.variables[indexV].definition }} \n                </v-text-field>\n                \n                <p class=\"ma-2 mt-0\"> Range {{ ext_text.task.variables[indexV].range.fullRange() }} </p>\n                <v-row class=\"d-flex flex-row flex-nowrap px-3\">\n                    <v-text-field \n                        label=\"Start\" v-model=\"ext_text.task.variables[indexV].range.start\" \n                        outlined dense class=\"shrink mx-2 mt-3\">\n                    </v-text-field>\n                    <v-text-field \n                        label=\"End\" v-model=\"ext_text.task.variables[indexV].range.end\" \n                        outlined dense class=\"shrink mx-2 mt-3\">\n                    </v-text-field>\n                    <v-text-field \n                        label=\"Step\" v-model=\"ext_text.task.variables[indexV].range.step\"\n                        outlined dense class=\"shrink mx-2 mt-3\">\n                    </v-text-field>\n                </v-row>\n            </v-sheet>\n        </v-overlay>\n\n        <!-- Answer overlay -->\n        <v-overlay\n            :light=\"true\" :dark=\"false\"\n            :value=\"overlayA\" v-if=\"ext_text.task.answers.length != 0\">\n            <v-sheet \n            elevation=\"4\" width=\"500\" \n            height=\"500px\"\n            class=\"pa-4 ma-2 mt-0 pt-2 d-flex flex-column justify-flex-start align-flex-start rounded-lg overflow-y-auto\">\n            <!-- Close icon -->\n            <v-btn plain icon @click=\"overlayA = false\" class=\"close-button mt-4 mr-6 pa-0 shrink\">\n                <v-icon color=\"danger\">mdi-close</v-icon>\n            </v-btn>\n            <h2 class=\"ma-2 mt-3\"> \n                {{ ext_text.task.answers[indexA].name }}\n            </h2>\n\n            <p class=\"ma-2 mt-0\"> Range {{ ext_text.task.answers[indexA].range.fullRange() }} </p>\n            <v-row class=\"d-flex flex-row flex-nowrap px-3 shrink\">\n                <v-text-field \n                    label=\"Start\" v-model=\"ext_text.task.answers[indexA].range.start\" \n                    outlined dense class=\"shrink mx-2 mt-3\">\n                </v-text-field>\n                <v-text-field \n                    label=\"End\" v-model=\"ext_text.task.answers[indexA].range.end\" \n                    outlined dense class=\"shrink mx-2 mt-3\">\n                </v-text-field>\n            </v-row>\n\n            <p class=\"ma-2 mt-0\">Correct</p>\n            <div \n                class=\"d-flex flex-row\" \n                v-for=\"(el, i) in ext_text.task.answers[indexA].correct\" :key=\"'el_c' + i\">\n                <v-text-field \n                    label=\"\" \n                    placeholder=\"e.g.: ( $a * 2 ) + 1\" \n                    v-model=\"ext_text.task.answers[indexA].correct[i]\" \n                    outlined dense class=\"mx-2 my-0\"> \n                    {{ el }}\n                </v-text-field>\n                <v-btn\n                    @click=\"removeCorrect(i)\" \n                    icon plain color=\"red\" class=\"mx-2\">\n                    <v-icon>mdi-delete-empty</v-icon>\n                </v-btn>\n            </div>\n            <v-btn depressed class=\"mx-2\" @click=\"addCorrect\">\n                <v-icon>mdi-plus</v-icon>\n                Add correct answer\n            </v-btn>\n\n            \n            <p class=\"ma-2\">Incorrect</p>\n            <div \n                class=\"d-flex flex-row\" \n                v-for=\"(el, i) in ext_text.task.answers[indexA].incorrect\" :key=\"'el_ic' + i\">\n                <v-text-field \n                    label=\"\" \n                    placeholder=\"e.g.: ( $a * 2 ) + 1\" \n                    v-model=\"ext_text.task.answers[indexA].incorrect[i]\" \n                    outlined dense class=\"mx-2 my-0\"> \n                    {{ ext_text.task.answers[indexA].incorrect }}\n                </v-text-field>\n                <v-btn \n                    @click=\"removeIncorrect(i)\"\n                    icon plain color=\"red\" class=\"mx-2\">\n                    <v-icon>mdi-delete-empty</v-icon>\n                </v-btn>\n            </div>\n            <v-btn depressed class=\"mx-2\" @click=\"addIncorrect\">\n                <v-icon>mdi-plus</v-icon>\n                Add incorrect answer\n            </v-btn>\n            \n            </v-sheet>\n        </v-overlay>\n\n        <!-- Answer type options dialog -->\n        <v-dialog v-model=\"overlaySave\" width=\"450\" :retain-focus=\"false\">\n            <v-card class=\"d-flex flex-column rounded-lg pt-2\">\n                <p class=\"pb-4 my-2 font-weight-medium text-h5 align-self-center\"> Task details</p>\n\n                <!-- Set task name -->\n                <v-text-field \n                    class=\"px-4\" v-model=\"taskName\" outlined label=\"Task name\" placeholder=\"Enter task name\">\n                </v-text-field>\n\n                <!-- Select grade -->\n                <v-select \n                    class=\"px-4\" :items=\"$store.state.test.grades\" v-model=\"taskGrade\" outlined label=\"Grade\">\n                </v-select>\n\n                <!-- Set categories to task -->\n                <v-combobox class=\"px-4\" label=\"Categories\" v-model=\"selectedTaskCategories\" \n                    :items=\"taskCategories\" multiple chips outlined>\n                    <template v-slot:selection=\"data\">\n                        <v-chip color=\"primary\" class=\"pa-2\" v-bind=\"data.attrs\">\n                        {{ data.item }}\n                        </v-chip>\n                    </template>\n                </v-combobox>\n\n                <v-divider></v-divider>\n\n                <v-card-actions>\n                    <v-spacer></v-spacer>\n                    <v-btn color=\"black\" outlined text @click=\"overlaySave= false\"> Cancel </v-btn>\n                    <v-btn dark color=\"primary\" @click=\"saveText(); overlaySave = false\"> Save </v-btn>\n                </v-card-actions>\n                \n            </v-card>\n        </v-dialog>\n\n    </v-container>\n</template>\n\n<script>\n    import { tokenize, Token } from \"../myfiles/tokenizer.js\"\n    import { parseMathLang, Question, ConcreteTask, Variable } from \"../myfiles/taskHandler\"\n    import { Extractor } from \"../myfiles/extractorModule\";\n\n    import TaskDataService from \"../services/taskDataService\";\n    import GeneratorService from \"../services/generatorService\";\n    import CategoryDataService from \"../services/categoryDataService.js\";\n\n    import * as math from 'mathjs';\nimport testDataService from '../services/testDataService.js';\n\n    export default {\n        data() {   \n            return {\n                taskCategories: [],\n                selectedTaskCategories: [],\n                \n                name: \"New Task\",\n                taskName: \"\",\n                taskGrade: null,\n                text: \"\",\n                task_text: \"\",\n\n                formula: '$$x = {-b \\\\pm \\\\sqrt{b^2-4ac} \\\\over 2a}.$$',\n\n                ext_text: new Extractor(),\n                preview: new ConcreteTask(),\n                \n                variables: [],\n                questions: [],\n                answers: [],\n\n                overlayV: false,\n                overlayA: false,\n                overlayAddV: false,\n                overlaySave: false,\n                taskOverlay: false,\n                indexV: 0,\n                indexAV: 0,\n                indexA: 0,\n            };\n        },\n        computed: {\n            getText() { return this.text; }\n        },\n\n        // Load task depending on navigation origin\n        beforeMount() {\n            console.log(\"taskId from route params\", localStorage.getItem('taskId'))\n\n            // Modify was selected from task history\n            if( this.$route.params.taskId ) \n            {\n                // Save id to localStorage, so we can reload page without lossing the id\n                localStorage.setItem('taskId', this.$route.params.taskId)\n            }\n\n            // Id was saved from route params or if the page was reloaded\n            if ( localStorage.getItem('taskId') )\n            {\n                // Load the task content from the database\n                TaskDataService.get(localStorage.getItem('taskId'))\n                    .then((res) => {\n                        console.log(res);\n\n                        try {\n                            this.name = res.data.name;\n                            this.taskName = res.data.name;\n                            this.taskGrade = res.data.grade;\n                            this.ext_text.task = parseMathLang(res.data.content);\n                            res.data.categories.forEach(({name}) => {\n                                this.selectedTaskCategories.push(name);\n                            });\n\n                            console.log('RECIEVED: ', res.data);\n                            this.$store.dispatch('showMessage', { message: \"Parsing successful!\" });\n\n                        } catch (error) {\n                            this.$store.dispatch('showMessage', { message: error.message, success: false });\n                        }\n                        // this.ext_text.task = parseMathLang(res.data.content);\n\n                        this.text = this.ext_text.task.text.trim();\n                    })\n                    .catch((error) => { \n                        this.errorHandler(error); \n                    });\n            }\n\n            // Get categories\n            CategoryDataService.getAll().then(({data}) => {\n                this.taskCategories = data.map(({name}) => name);\n            })\n        },\n\n        mounted() { },\n\n        created() { },\n\n        methods: {\n\n            getCategories() {\n                CategoryDataService.getAll().then(({data}) => {\n                    this.taskCategories = data.map(({name}) => name);\n                });\n            },\n\n            replaceAnswers(_qText) {\n\n                try {\n                    let cleanText = _qText.replaceAll(Token.types.gAnswer, \"\").replaceAll(\"=\", \"\").trim();\n                    return math.parse(cleanText).toTex();\n                } catch(error) {\n                    return _qText;\n                }\n            },\n\n            testext() {\n                // Test extraction\n                this.ext_text.extractVariable(tokenize(this.text));\n            },\n\n            async createNewTask() \n            {\n                // Prepare data for sending\n                var data = { name: this.taskName, grade: this.taskGrade, content: this.ext_text.generateText() };\n\n                // Create new entry in database\n                if ( localStorage.getItem('taskId') == null) {\n                    \n                    try{\n                        let newTask = await TaskDataService.create(data);\n\n                        localStorage.setItem('taskId', newTask.data.id);\n\n                        console.log(this.selectedTaskCategories);\n\n                        for(let selectedCategory of this.selectedTaskCategories) {\n                            let category = await CategoryDataService.find({name: selectedCategory});\n\n                            // check\n                        }\n\n                        this.$store.dispatch('showMessage', { message: \"Task saved successfuly\" });\n                    } catch(error) {\n                        // log\n                        this.$store.dispatch('showMessage', { message: error.response.data.message, success: false });\n                    }\n                    }\n\n                // Update existing entry\n                else {    \n\n                    let taskId = localStorage.getItem('taskId');\n                    let task = await TaskDataService.get(taskId);\n\n                    try{\n                        // Delete each category on the task\n                        for(let category of task.data.categories) {\n                            TaskDataService.removeCategory({ taskId: taskId, categoryId: category.id });\n                        }\n                    } catch(error) {\n                        //\n                        console.log(\"Error while deleting categories from task\");\n                    }\n\n                    // Add each selectedCategory to task\n                    for(let selectedCategory of this.selectedTaskCategories) {\n\n                        try {\n                            // Find category id in DB\n                            let category = await CategoryDataService.find({name: selectedCategory}); \n                            \n                            // Add category to task\n                            await TaskDataService.addCategory(\n                                { taskId: taskId, categoryId: category.data.id }\n                            )\n                        } catch(error) {\n\n                            // Create category\n                            let category = await CategoryDataService.create({name: selectedCategory});\n                            \n                            // Add category to task\n                            await TaskDataService.addCategory(\n                                { taskId: taskId, categoryId: category.data.id }\n                            )\n\n                            console.log(\"Added\");\n                        }\n                    }\n\n\n                    TaskDataService.update( localStorage.getItem('taskId'), data ) \n                        .then((res) => {\n                            console.log(res);\n                            this.$router.push({name: \"yourTasks\"});\n                            this.$store.dispatch('showMessage', { message: res.data.message });\n                        })\n                        .catch((err) => {\n                            this.$store.dispatch('showMessage', { message: err.response.data.message, success: false });\n                        })\n                }\n            },\n\n            variableInfo : function(i) {\n                this.indexV = i\n                this.overlayV = true\n            },\n            addedVariableInfo: function(i) {\n                this.indexAV = i\n                this.overlayAddV = true;\n            },\n            answerInfo: function(i) {\n                this.indexA = i\n                this.overlayA = true\n            },\n            previewTask: function () {\n\n                GeneratorService\n                    .generate( { content: this.ext_text.task } )\n                    .then((res) => {\n                        this.preview = res.data.content;\n                        this.message = res.data.message;\n                        this.success = true;\n                        this.infoMessage = true;\n\n                        this.taskOverlay = true\n\n                        //initMathJax({}, () => { renderByMathjax(document.getElementById('task')); });\n                        localStorage.setItem('data', this.ext_text.generateText() );\n                    })\n                    .catch((err) => {\n                        this.message = err?.response?.data?.message || err.message;\n                        this.success = false;\n                        this.infoMessage = true;\n                    });\n            },\n            saveText: function() {\n                localStorage.setItem('data', this.text);\n\n                this.createNewTask();\n            },\n            restoreText: function() {\n                // TODO ?\n            },\n\n\n            // Variables\n            addVariable: function() {\n                let newVariable = new Variable(\"$newVar\");\n                newVariable.added = true;\n                \n                this.ext_text.task.variables.push(newVariable);\n            },\n            setVariableName: function(e) {\n                this.ext_text.task.variables[this.indexV].name = e.target.innerText;\n            },\n            removeVariable: function(i) {\n                this.ext_text.task.variables.splice(i, 1);\n            },\n\n            // Questions\n            addQuestion: function() {\n                this.ext_text.task.questions.push(new Question());\n            },\n            removeQuestion: function(i) {\n                this.ext_text.task.questions.splice(i, 1);\n            },\n\n            // Answers\n            addCorrect: function() {\n                this.ext_text.task.answers[this.indexA].correct.push(new String(\"\"));\n            },\n            removeCorrect: function(i) {\n                this.ext_text.task.answers[this.indexA].correct.splice(i, 1);\n            },\n            addIncorrect: function() {\n                this.ext_text.task.answers[this.indexA].incorrect.push(new String(\"\"));\n            },\n            removeIncorrect: function(i) {\n                this.ext_text.task.answers[this.indexA].incorrect.splice(i, 1);\n            },\n\n            parseText : function () {\n\n                // TEXT\n                this.ext_text.task.text = this.text;\n\n                let tokens = tokenize(this.text);\n\n                // VARIABLES\n                this.variables = this.ext_text.extractVariables(tokens);\n\n                // ANSWERS\n                this.answers = this.ext_text.extractAnswers(tokens);\n\n                // Extract answer from each question\n                \n                // Assume list of variables has changed\n                // and set visiblity to false for all variables\n                this.ext_text.task.answers.forEach((answer) => {\n                    answer.visible = false;\n                });\n                // QUESTIONS\n                this.ext_text.task.questions.forEach((question) => {\n\n                    console.log('Q',question);\n                    console.log(tokenize(\"Q: \", question.text));\n\n                    this.ext_text.extractAnswers(tokenize(question.text));\n                });\n\n                let generated_text = this.ext_text.generateText();\n\n                console.log(generated_text);\n            }     \n        }\n    }\n</script>\n\n<style>\n    [text-narrow] {\n        line-height: 1.1 !important;\n        font-size: 1rem;\n    }\n\n    .pointer {\n        cursor: pointer !important;\n    }\n\n    .close-button {\n        position: absolute !important;\n        top: 0rem !important;\n        right: 0rem !important;\n    }\n\n</style>"]}]}