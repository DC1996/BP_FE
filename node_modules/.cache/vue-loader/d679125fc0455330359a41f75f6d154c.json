{"remainingRequest":"/home/dc/Documents/BP/vue-bp-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dc/Documents/BP/vue-bp-web/src/components/createtaskpage.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/dc/Documents/BP/vue-bp-web/src/components/createtaskpage.vue","mtime":1649980520913},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/css-loader/dist/cjs.js","mtime":1642114937836},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1642114939216},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/postcss-loader/src/index.js","mtime":1642114938300},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/cache-loader/dist/cjs.js","mtime":1642114936856},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/vue-loader/lib/index.js","mtime":1642114938760}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgpbdGV4dC1uYXJyb3ddIHsKICAgIGxpbmUtaGVpZ2h0OiAxLjEgIWltcG9ydGFudDsKICAgIGZvbnQtc2l6ZTogMXJlbTsKfQoKLnBvaW50ZXIgewogICAgY3Vyc29yOiBwb2ludGVyICFpbXBvcnRhbnQ7Cn0KCi5jbG9zZS1idXR0b24gewogICAgcG9zaXRpb246IGFic29sdXRlICFpbXBvcnRhbnQ7CiAgICB0b3A6IDByZW0gIWltcG9ydGFudDsKICAgIHJpZ2h0OiAwcmVtICFpbXBvcnRhbnQ7Cn0KCg=="},{"version":3,"sources":["createtaskpage.vue"],"names":[],"mappingsy4BA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"createtaskpage.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <v-container id=\"task\" class=\"d-flex flex-column justify-start align-center mt-2 pb-0 b-g rounded-lg\" style=\"position: relative;\">\n\n        <v-btn elevation=\"1\" large color=\"primary\" icon style=\"position: absolute; left: 0.5rem; background-color: white\"\n            class=\"px-6 py-2 mx-2 no-uppercase\" @click=\"helpDialog = true\"> \n            <v-icon>mdi-help-circle-outline</v-icon>\n        </v-btn>\n\n        <!-- Task name -->        \n        <h4 class=\"text-h5 custom-font my-4 font-weight-bold\"> {{ this.name }} </h4>\n\n        <v-container fluid rounded label=\"Task\" class=\"d-flex flex-row\" style=\"height: 100%;\">\n\n            <!-- Left side -->\n            <v-col cols=\"16\" class=\"mx-2 py-0 px-2 ma-0 d-flex flex-column justify-start\">\n\n            <!-- Task text text-field -->\n            <div class=\"d-flex flex-column justify-start flex-grow-0\">\n                <h3 class=\"ml-2 mb-1\"> Task text </h3>\n                <v-textarea text-narrow spellcheck=\"false\" background-color=\"white\" color=\"black\"\n                    id=\"task-text\" class=\"text-h3 pb-2\" v-model=\"text\" solo no-resize hide-details rows=\"5\">\n                </v-textarea>\n            </div>\n\n            <div style=\"height: 220px; overflow-y: auto\">\n            <!-- Variables chips section -->\n            <h3 class=\"ml-2 mb-1\"> Variables </h3>          \n                <div class=\"d-flex flex-row flex-wrap align-center ma-0 pa-0 minus\">\n                    <div v-for=\"(variable, ind) in ext_text.task.variables\" :key=\"ind + 'v'\" class=\"ma-0 pa-0\">\n                        <v-chip v-if=\"variable.visible\" @click=\"variableInfo(ind)\"\n                            color=\"primary\" label class=\"mx-2 my-1 px-6 py-4 pointer elevation-1\">\n                            {{ variable.name.substr(1) }}\n                        </v-chip>\n                    </div>                    \n                    \n                    <!-- Add variable button -->\n                    <div class=\"mx-2 my-1\">\n                        <v-btn @click=\"addVariable()\" depressed class=\"no-uppercase\">\n                            <v-icon>mdi-plus</v-icon>\n                            Add Variable\n                        </v-btn>\n                    </div>\n                </div>\n\n                <!-- Answers chips section -->\n                <h3 class=\"ml-2\">Answers</h3>\n                    <div class=\"d-flex flex-row flex-wrap align-center ma-0 pa-0 minus\">\n                        <p class=\"text-body-2 mx-2\" v-if=\"ext_text.task.answers.length == 0\" >No Answers found. Add answers to questions. </p>\n                        <div v-for=\"(answer, i) in ext_text.task.answers\" :key=\"i + 'a'\" class=\"ma-0 pa-0\">\n                            <v-chip v-if=\"answer.visible\" @click=\"answerInfo(i)\"\n                                color=\"primary\" label class=\"mx-2 my-1 px-6 py-4 pointer\">\n                                {{ answer.name.substr(1) }}\n                            </v-chip>\n                        </div>\n                    </div>\n            </div>\n\n            <!-- PREVIEW -->\n            <v-overlay :value=\"taskOverlay\" :light=\"true\" :dark=\"false\">\n                <v-sheet\n                    elevation=\"4\" width=\"650\"\n                    style=\"height: 600px; overflow-y: auto\"\n                    class=\"pa-4 ma-2 d-flex flex-column justify-flex-start align-flex-start rounded-lg\">\n\n                    <h4 class=\"mx-2 pa-1 text-h5 d-flex justify-space-between text-h5\">\n                        Task preview \n                        <v-btn plain icon @click=\"taskOverlay = false\" class=\"pa-0 shrink\">\n                        <v-icon color=\"danger\">mdi-close</v-icon>\n                    </v-btn>\n                    </h4>\n\n                    <h3 class=\"ma-2 pa-1\"> {{ preview.text.trim() }} </h3>\n                    <div id=\"latex-task\" class=\"d-flex flex-column ma-2 pa-1\" v-for=\"(q, i) in preview.questions\" :key=\"'q' + i\">\n                        \n                        <h4 class=\"ma-1\"> {{ replaceAnswers(q.text.trim()) }} </h4>\n\n                        <div id=\"latex-task\" class=\"ma-1 pa-1\" v-for=\"(a, i) in q.answers\" :key=\"'a' + i\">\n                            <p v-for=\"(item, index) in a.correct\" :key=\"index\"> a) {{item}} </p>\n                            <p v-for=\"(item, index) in a.incorrect\" :key=\"'ia' + index\"> \n                                {{ String.fromCharCode(98 + index) + ')'}} {{item}}\n                            </p>\n                        </div>\n                    </div>\n                </v-sheet>\n            </v-overlay>\n\n            </v-col>\n            \n            <!-- Right side -->\n            <v-col cols=\"16\" class=\"mx-2 pa-0 d-flex flex-column justify-space-between\">\n\n            <!-- Questions section -->\n            <div class=\"d-flex flex-column justify-start flex-grow-0\">\n                <h3 class=\"ml-2 mb-0\"> Questions </h3>\n                <div class=\"d-flex flex-column justify-start\" style=\"height: 300px; overflow-y: auto\">\n                    <div\n                        class=\"d-flex flex-row align-center\" \n                        v-for=\"(question, i) in ext_text.task.questions\" :key=\"i\">\n                        <v-text-field\n                            :label=\"'Task question #' + i\"\n                            placeholder=\"eq.: What is the result? @res\"\n                            solo hide-details color=\"error\"\n                            class=\"my-1 d-flex flex-grow-1\"\n                            v-model=\"ext_text.task.questions[i].text\">\n                            <template v-slot:append>\n                                <v-icon color=\"error\" @click=\"removeQuestion(i)\">mdi-delete-empty</v-icon>\n                            </template>\n                        \n                        </v-text-field>\n                    </div>\n                    <!-- Add question button -->\n                    <v-btn @click=\"addQuestion\" depressed class=\"my-1 no-uppercase align-self-start\">\n                        <v-icon>mdi-plus</v-icon>  \n                        Add Question \n                    </v-btn>\n                </div>\n            </div>\n            <div class=\"d-flex flex-row mt-2 mb-1 justify-self-end justify-end\">\n                <v-btn depressed elevation=\"0\" large class=\"px-3 py-1 mx-2 no-uppercase\" @click=\"parseText\">Evaluate</v-btn>\n                <v-btn depressed elevation=\"0\" large class=\"px-3 py-1 mx-2 no-uppercase\" @click=\"previewTask\">Preview</v-btn>\n                <v-btn elevation=\"2\" large color=\"primary\"\n                    class=\"px-6 py-2 mx-2 no-uppercase\" @click=\"getCategories(); overlaySave = true\"> Save\n                </v-btn>\n                <!-- <v-btn class=\"mx-1\" @click=\"restoreText\">Restore</v-btn> -->\n            </div>\n\n            </v-col>\n        </v-container>\n\n        <!-- Make this a dialog...variable dialog -->\n        <v-overlay tabindex=\"0\" @keydown.esc=\"overlayV = false\"\n            :value=\"overlayV\" :light=\"true\" :dark=\"false\" v-if=\"ext_text.task.variables.length != 0\">\n            <v-sheet \n                elevation=\"4\" width=\"500\" \n                class=\"pa-4 ma-2 mt-0 pt-2 d-flex flex-column justify-flex-start align-flex-start rounded-lg\">\n                <v-form v-model=\"variableOk\">\n                \n                <div v-if=\"variable.added\" class=\"ma-2 mt-3 d-flex justify-space-between\">\n                    <v-text-field :rules=\"[v => (v.trim().length != 0) || 'Name must have atleast 1 character', v => (/^[0-9a-zA-Z_]+$/.test(v)) || 'Name must contain only letters, numbers and underscores']\" outlined label=\"Name\" dense v-model=\"variable.name\"></v-text-field>\n                    <v-btn plain icon @click=\"overlayV = false\" class=\"ml-2 pa-0 shrink\">\n                        <v-icon color=\"danger\">mdi-close</v-icon>\n                    </v-btn>\n                </div>\n                <h2 class=\"ma-2 mt-3 d-flex justify-space-between\" v-if=\"!variable.added\"> \n                    {{ variable.name.length != 0 ? variable.name.toString().substr(1) : null}} \n                    <v-btn plain icon @click=\"overlayV = false\" class=\"ml-2 pa-0 shrink\">\n                        <v-icon color=\"danger\">mdi-close</v-icon>\n                    </v-btn>\n                </h2>\n                \n                <p class=\"ma-2\"> Definition </p>\n                <v-text-field \n                    label=\"\" placeholder=\"E.g.: ( $a * 2 ) + 1\" \n                    \n                    v-model=\"variable.definiton\"\n                    outlined dense class=\"shrink mx-2\"> \n                    {{ variable.definition }} \n                </v-text-field>\n                \n                <p class=\"ma-2 mt-0\"> Range {{ variable.range.fullRange() }} </p>\n                <v-row class=\"d-flex flex-row flex-nowrap px-3\">\n                    <v-text-field \n                        label=\"Start\" v-model=\"variable.range.start\" \n                        outlined dense class=\"shrink mx-2 mt-3\">\n                    </v-text-field>\n                    <v-text-field \n                        label=\"End\" v-model=\"variable.range.end\" \n                        outlined dense class=\"shrink mx-2 mt-3\">\n                    </v-text-field>\n                    <v-text-field \n                        label=\"Step\" v-model=\"variable.range.step\"\n                        outlined dense class=\"shrink mx-2 mt-3\">\n                    </v-text-field>\n                </v-row>\n\n                <v-row class=\"d-flex justify-self-end mx-1\">\n                    <!-- Remove variable icon -->\n                    <v-tooltip right>\n                        <template v-slot:activator=\"{ on, attrs }\">\n                            <v-btn color=\"error\" @click=\"removeVariable(indexV); overlayV = false\" v-bind=\"attrs\" v-on=\"on\" icon class=\"mb-2 no-uppercase\" depressed text> \n                                <v-icon>mdi-delete-empty</v-icon>\n                            </v-btn>\n                        </template>\n                        <span>Delete variable</span>\n                    </v-tooltip>\n                    \n                    <v-spacer></v-spacer>\n                    <v-btn color=\"black\" class=\"mx-2 mb-2 no-uppercase\" outlined text @click=\"overlayV= false\"> Cancel </v-btn>\n                    <v-btn color=\"primary\" :disabled=\"!variableOk\" class=\"mx-1 mb-2 no-uppercase\" @click=\"setVariableInfo()\"> Save </v-btn>\n                </v-row>\n                </v-form>\n            </v-sheet>\n        </v-overlay>\n\n        <!-- Answer overlay -->\n        <v-overlay\n            :light=\"true\" :dark=\"false\"\n            :value=\"overlayA\" v-if=\"ext_text.task.answers.length != 0\">\n            <v-sheet elevation=\"4\" width=\"500\" height=\"80vh\"\n            class=\"pa-4 ma-2 mt-0 pt-2 d-flex flex-column justify-flex-start align-flex-start rounded-lg overflow-y-auto\">\n            <!-- Close icon -->\n            <h2 class=\"d-flex justify-space-between ma-2 mt-3\"> \n                {{ answer.name.substr(1) }}\n                <v-btn plain icon @click=\"overlayA = false\" class=\"pa-0 mr-n2 shrink\">\n                    <v-icon color=\"danger\">mdi-close</v-icon>\n                </v-btn>\n            </h2>\n\n            <p class=\"ma-2 mt-0\"> Range {{ answer.range.fullRange() }} </p>\n            <v-row class=\"d-flex flex-row flex-nowrap px-3 shrink\">\n                <v-text-field \n                    label=\"Start\" v-model=\"answer.range.start\" \n                    outlined dense class=\"shrink mx-2 mt-3\">\n                </v-text-field>\n                <v-text-field \n                    label=\"End\" v-model=\"answer.range.end\" \n                    outlined dense class=\"shrink mx-2 mt-3\">\n                </v-text-field>\n            </v-row>\n\n            <p class=\"ma-2 mt-0\">Correct</p>\n            <div \n                class=\"d-flex flex-row\" \n                v-for=\"(el, i) in answer.correct\" :key=\"'el_c' + i\">\n                <v-text-field \n                    label=\"\" \n                    placeholder=\"E.g.: ( $a * 2 ) + 1\" \n                    v-model=\"answer.correct[i]\"\n                    outlined dense class=\"mx-2 my-0\"> \n                    {{ el }}\n                </v-text-field>\n                <v-btn\n                    @click=\"removeCorrect(i)\" \n                    icon plain color=\"red\" class=\"mx-2\">\n                    <v-icon>mdi-delete-empty</v-icon>\n                </v-btn>\n            </div>\n            <v-btn depressed class=\"mx-2\" @click=\"addCorrect\">\n                <v-icon>mdi-plus</v-icon>\n                Add correct answer\n            </v-btn>\n\n            \n            <p class=\"ma-2\">Incorrect</p>\n            <div \n                class=\"d-flex flex-row\" \n                v-for=\"(el, i) in answer.incorrect\" :key=\"'el_ic' + i\">\n                <v-text-field \n                    label=\"\" \n                    placeholder=\"E.g.: ( $a * 2 ) + 1\" \n                    v-model=\"answer.incorrect[i]\" \n                    outlined dense class=\"mx-2 my-0\"> \n                    {{ answer.incorrect }}\n                </v-text-field>\n                <v-btn \n                    @click=\"removeIncorrect(i)\"\n                    icon plain color=\"red\" class=\"mx-2\">\n                    <v-icon>mdi-delete-empty</v-icon>\n                </v-btn>\n            </div>\n            <v-btn depressed class=\"mx-2\" @click=\"addIncorrect()\">\n                <v-icon>mdi-plus</v-icon>\n                Add incorrect answer\n            </v-btn>\n            \n            <v-row class=\"d-flex justify-self-end align-end mx-1\">\n                <!-- Delete answer icon -->\n                <v-tooltip right>\n                    <template v-slot:activator=\"{ on, attrs }\">\n                        <v-btn color=\"error\" @click=\"removeAnswer(indexA); overlayA = false\" v-bind=\"attrs\" v-on=\"on\" icon class=\"mb-4 no-uppercase\" depressed text> \n                            <v-icon>mdi-delete-empty</v-icon>\n                        </v-btn>\n                    </template>\n                    <span>Delete answer</span>\n                </v-tooltip>\n                <v-spacer></v-spacer>\n                <v-btn color=\"black\" class=\"mx-2 my-4 mt-6 no-uppercase\" outlined text @click=\"overlayA= false\"> Cancel </v-btn>\n                <v-btn dark color=\"primary\" class=\"mx-1 my-4 mt-6 no-uppercase\" @click=\"setAnswerInfo()\"> Save </v-btn>\n            </v-row>\n\n            </v-sheet>\n        </v-overlay>\n\n        <!-- Answer type options dialog -->\n        <v-dialog v-model=\"overlaySave\" width=\"450\" :retain-focus=\"false\">\n            <v-card class=\"d-flex flex-column rounded-lg pt-2\">\n                <p class=\"pb-4 my-2 font-weight-bold text-h5 align-self-center\"> Task details</p>\n\n                <!-- Set task name -->\n                <v-text-field \n                    class=\"px-4\" v-model=\"taskName\" outlined label=\"Task name\" placeholder=\"Enter task name\">\n                </v-text-field>\n\n                <!-- Select grade -->\n                <v-select \n                    class=\"px-4\" :items=\"$store.state.test.grades\" v-model=\"taskGrade\" outlined label=\"Grade\">\n                </v-select>\n\n                <!-- Set categories to task -->\n                <v-combobox class=\"px-4\" label=\"Categories\" v-model=\"selectedTaskCategories\" \n                    :items=\"taskCategories\" multiple chips outlined>\n                    <template v-slot:selection=\"data\">\n                        <v-chip color=\"primary\" class=\"pa-2\" v-bind=\"data.attrs\">\n                        {{ data.item }}\n                        </v-chip>\n                    </template>\n                </v-combobox>\n\n                <v-divider></v-divider>\n\n                <v-card-actions>\n                    <v-spacer></v-spacer>\n                    <v-btn color=\"black\" outlined text @click=\"overlaySave= false\"> Cancel </v-btn>\n                    <v-btn dark color=\"primary\" @click=\"saveText(); overlaySave = false\"> Save </v-btn>\n                </v-card-actions>\n                \n            </v-card>\n        </v-dialog>\n\n        <!-- Task creation explanation dialog -->\n        <v-dialog v-model=\"helpDialog\" width=\"80vw\" :retain-focus=\"false\">\n            <v-card class=\"d-flex flex-column rounded-lg pt-2\">\n                <v-card-title class=\"text-h5 d-flex justify-space-between\"> \n                    How to write tasks? \n                    <v-btn plain icon @click=\"helpDialog = false\" class=\"pa-0 mr-n2 shrink\">\n                    <v-icon color=\"danger\">mdi-close</v-icon>\n                </v-btn>\n                </v-card-title>\n                <v-card-text> Task creation can be divided into four parts. Each part is explained below and can be observed in the example tasks. <br>\n                The example tasks can be found in the <span class=\"font-weight-bold\">Your tasks</span> page.</v-card-text>\n                <v-container class=\"py-0 my-0\">\n                    <v-row class=\"py-0 my-0\">\n                        <v-col cols=\"6\" class=\"py-0 my-0\">\n                            <v-card-text>\n                                <span class=\"text-underline text-body-1\">1. Task text </span>  <br>\n                                You start by writing the text that describes the problem, \n                                gives instructions and provides context. <br>\n                                It can contain any amount of characters (including zero) and <span class=\"font-weight-bold\">Variables</span>. <br>\n                            </v-card-text>\n                            <v-textarea readonly text-narrow spellcheck=\"false\" background-color=\"white\" color=\"black\"\n                                placeholder=\"Jamie has a big house and a barn. In his barn he has $x horses and $y cows. He sells two cows and one horse.'\"\n                                class=\"text-h3 pb-2 mx-4\" solo no-resize hide-details rows=\"4\">\n                            </v-textarea>\n                        </v-col>\n                        <v-col cols=\"6\" class=\"py-0 my-0\">\n                            <v-card-text>\n                                <span class=\"text-underline text-body-1\">2. Questions</span> <br>\n                                Then you continue by writing questions to which you expect \n                                your students to know the answer. <br>\n                                A task can have an unlimited number of questions. <br>\n                                Questions can contain any amount of characters, \n                                <span class=\"font-weight-bold\">Variables</span> and \n                                <span class=\"font-weight-bold\">must contain one or more Answers</span>. <br>\n                                <v-text-field readonly\n                                    placeholder=\"How many horses does Jamie have? @horses\"\n                                    solo hide-details color=\"error\"\n                                    class=\"my-1 d-flex flex-grow-1\">\n                                    <template v-slot:append>\n                                        <v-icon color=\"error\">mdi-delete-empty</v-icon>\n                                    </template>\n                                </v-text-field>\n                            </v-card-text>\n                        </v-col>\n                        <v-col cols=\"12\" class=\"py-0 my-0\">\n                            <v-card-text>\n                                <span class=\"text-underline text-body-1\">3. Variables </span>  <br>\n                                After writing down your questions it's time to define Variables.\n                                Variables represent the core of task creation. <br>\n                                A Variable is identified with the <span class=\"font-weight-bold\">$</span> (dollar sign) \n                                starting character and can be followed by letters, numbers and underscores. <br>\n                                It acts as a placeholder for an actual value. <br>\n                                All these represent valid Variables: \n                                <span class=\"font-weight-bold\"> $x, $y1, $new_var, $long_variable_name123, ...</span> <br>\n                                Few important things to know about <span class=\"font-weight-bold\"> Variables: </span> <br>\n                                <span style=\"text-decoration: underline\">Each occurrence</span> of a \n                                <span class=\"font-weight-bold\">Variable</span> in the task text or question\n                                <span style=\"text-decoration: underline\">will be replaced by an actual value</span> \n                                when the task is used in a test later on.\n                                <span class=\"text-underline\">Variables</span> that are used <span class=\"text-underline\"> in the task text are automatically \n                                added into the list of Variables</span> and that is why it's recommended \n                                to start by defining the task text first. <br>\n                                <span style=\"font-style: italic\">Example: If Task text = \"Jamie has $x horses\" then Variables = \"$x\"</span> <br><br>\n                                You can configure what values will be susbstituted \n                                for a given variable by clicking on a <v-chip label color=\"primary\"> Variable </v-chip> under the Variables section \n                                which opens a dialog where you can set the following properties. <br>\n\n                                <v-row>\n                                <v-col cols=\"6\" class=\"d-flex justify-center align-center\">\n                                <v-sheet elevation=\"3\" width=\"400\" class=\"pa-4 ma-2 mt-0 pt-2 d-flex flex-column justify-flex-start align-flex-start rounded-lg\">\n\n                                    <h2 class=\"ma-2 mt-3\"> \n                                        Variable name\n                                    </h2>\n                                    \n                                    <p class=\"ma-2\"> Definition </p>\n                                    <v-text-field \n                                        label=\"\" placeholder=\"E.g.: ( $x * 2 ) + 1\" \n                                        outlined dense class=\"shrink mx-2\"> \n                                    </v-text-field>\n                                    \n                                    <p class=\"ma-2 mt-0\"> Range </p>\n                                    <v-row class=\"d-flex flex-row flex-nowrap px-3\">\n                                        <v-text-field readonly\n                                            label=\"Start\" placeholder=\"1\"\n                                            outlined dense class=\"shrink mx-2 mt-3\">\n                                        </v-text-field>\n                                        <v-text-field readonly\n                                            label=\"End\" placeholder=\"100\"\n                                            outlined dense class=\"shrink mx-2 mt-3\">\n                                        </v-text-field>\n                                        <v-text-field readonly\n                                            label=\"Step\" placeholder=\"E.g.: 100, 1, 0.1\"\n                                            outlined dense class=\"shrink mx-2 mt-3\">\n                                        </v-text-field>\n                                    </v-row>\n                                </v-sheet>\n                                </v-col>\n                                <v-col cols=\"6\">\n                                    <span class=\"font-weight-bold text-underline\">Definition</span> - a predefined value or expression to be calculated. <br>\n                                Expressions can contain other Variables.<br>  \n                                Example: We have a variable named $x, if we set its definiton to: <br>\n                                <ul>\n                                    <li>\"2\" - each occurrence of $x in a text will be replaced by the value \"2\" </li>\n                                    <li>\"$y + 2\" - each occurrence of $x in a text will be replaced by the value which will be \n                                        substituted for the variable $y plus 2, that means if $y is 2, $x will be replaced \n                                        by the value 4 </li>\n                                    <li>\"sin($z) + 2\" - each occurrence of $x will be replaced by the sinus value of $z + 2</li>\n                                </ul>\n                                <br>\n                                <span class=\"font-weight-bold text-underline\">Range</span> - a randomly selected number within the specified range. <br>\n                                Range is defined by a Start, End and Step value.\n                                The Start and End values define the limits of the range. \n                                The Step value defines the precision of the resulting number.\n                                <span style=\"font-style: italic\">\n                                Example: Setting the following configuration (1, 10, 0.1)(start, end, step) \n                                will yield numbers in the range 1, 10 (included) rounded to nearest decimal value with the specified precision.\n                                (1.1, 2.3, 5.0, 3.8, ...)\n                                \n                                </span>\n                                </v-col>\n                                </v-row>\n                            </v-card-text>\n                        </v-col>\n                        <v-col cols=\"12\" class=\"py-0 my-0\">\n                            <v-card-text>\n                                <span class=\"text-underline text-body-1\">4. Answers </span>  <br>\n                                After defining the necessary variables you can move onto defining Answers. <br>\n                                Answers are identified by the <span class=\"font-weight-bold\">@</span> (at) starting character, which can be followed by letters, numbers and underscores (same as Variables). <br>\n                                All these represent valid Answers: <span class=\"font-weight-bold\"> @answer, @horse_count, @result1, ... </span> <br>\n                                It serve as a way to identify which answer options should belong to a given question. <br>\n                                In the actual task, the Answer is not visible in the text. <br>\n                                An Answer should always be used in a question. After specifying an Answer in a question it is added under the Answers section. <br>\n                                By clicking on an <v-chip label color=\"primary\"> Answer </v-chip> you open a dialog with the following options. <br><br>\n\n                                <v-row>\n                                <v-col cols=\"6\">\n                                    <span class=\"font-weight-bold text-underline\">Range</span> - defines the limits of the generated correct answer. <br>\n                                All generated correct answers must confine into the defined limits.\n                                When left empty, no restrictions will apply to the generated answers.<br><br>\n\n                                <span class=\"font-weight-bold text-underline\">Correct</span><br>\n                                In this section you define the value or expression that represents the correct answer or answers.\n                                The expression should correspond to the equation that yields the correct answer to the question asked.<br>\n                                You can use Variables to build the expression, or use static values.<br>\n                                <span style=\"font-style: italic\"> Following the example problem, the equation $x - 1, would yield the correct answer option to the question 'How many horses does Jamie have?'</span>\n                                <br><br>\n\n\n                                <span class=\"font-weight-bold text-underline\">Incorrect</span><br>\n                                In this section you define the values or expressions that represent the incorrect answers.\n                                The expressions can include equations that yield an answer with an error the student could have made.\n                                You can use Variables to build the expression, or use static values.<br>\n                                <span style=\"font-style: italic\"> Following the example problem, the equation $x - 2, would yield an incorrect answer option to the question 'How many horses does Jamie have?'. 'Simulating' a less atentive student that mixes up the number of sold horses with the number of sold cows.<br><br> \n                                Static values can be used to create tasks with questions that focus on testing the students knowledge about certain facts or definitions. <br>\n                                Task 'Example2 - Static' demonstrates such a task.\n                                </span>\n\n\n                                \n                                </v-col>\n                                <v-col cols=\"6\" class=\"d-flex justify-center align-center\">\n                                <v-sheet elevation=\"3\" width=\"500\" height=\"500px\"\n                                    class=\"pa-4 ma-2 mt-0 pt-2 d-flex flex-column justify-flex-start align-flex-start rounded-lg overflow-y-auto\">\n                                    <h2 class=\"ma-2 mt-3\"> \n                                        Answer name\n                                    </h2>\n\n                                    <p class=\"ma-2 mt-0\"> Range </p>\n                                    <v-row class=\"d-flex flex-row flex-nowrap px-3 shrink\">\n                                        <v-text-field readonly \n                                            label=\"Start\" placeholder=\"10\"\n                                            outlined dense class=\"shrink mx-2 mt-3\">\n                                        </v-text-field>\n                                        <v-text-field readonly\n                                            label=\"End\" placeholder=\"100\"\n                                            outlined dense class=\"shrink mx-2 mt-3\">\n                                        </v-text-field>\n                                    </v-row>\n\n                                    <p class=\"ma-2 mt-0\">Correct</p>\n                                    <div class=\"d-flex flex-row\">\n                                        <v-text-field \n                                            label=\"\" placeholder=\"$x - 1\" outlined dense class=\"mx-2 my-0\"> \n                                        </v-text-field>\n                                        <v-btn icon plain color=\"red\" class=\"mx-2\"><v-icon>mdi-delete-empty</v-icon></v-btn>\n                                    </div>\n                                    <v-btn depressed class=\"mx-2\">\n                                        <v-icon>mdi-plus</v-icon>Add correct answer\n                                    </v-btn>\n\n                                    \n                                    <p class=\"ma-2\">Incorrect</p>\n                                    <div \n                                        class=\"d-flex flex-row\" \n                                        v-for=\"(el, i) in ['$x - 2', 'E.g.: $x + 2, Pythagoras']\" :key=\"'el_ic' + i\">\n                                        <v-text-field \n                                            label=\"\" readonly\n                                            :placeholder=\"el\"\n                                            outlined dense class=\"mx-2 my-0\">\n                                        </v-text-field>\n                                        <v-btn icon plain color=\"red\" class=\"mx-2\">\n                                            <v-icon>mdi-delete-empty</v-icon>\n                                        </v-btn>\n                                    </div>\n                                    <v-btn depressed class=\"mx-2\" @click=\"addIncorrect\">\n                                        <v-icon>mdi-plus</v-icon> Add incorrect answer\n                                    </v-btn>\n                                    \n                                    </v-sheet>\n                                </v-col>\n                                </v-row>\n                            </v-card-text>\n                        </v-col>\n                    </v-row>\n                </v-container>\n                <v-divider></v-divider>\n                <v-card-actions>\n                    <v-spacer></v-spacer>\n                    <v-btn dark class=\"no-uppercase\" color=\"primary\" @click=\"helpDialog = false\"> Close </v-btn>\n                </v-card-actions>\n            </v-card>\n        </v-dialog>\n\n    </v-container>\n</template>\n\n<script>\n    import { tokenize, Token } from \"../myfiles/tokenizer.js\"\n    import { parseMathLang, Question, ConcreteTask, Variable, Answer } from \"../myfiles/taskHandler\"\n    import { Extractor } from \"../myfiles/extractorModule\";\n\n    import MathJax, { initMathJax, renderByMathjax } from \"mathjax-vue\";\n    import { cloneDeep } from 'lodash';\n\n    import TaskDataService from \"../services/taskDataService\";\n    import GeneratorService from \"../services/generatorService\";\n    import CategoryDataService from \"../services/categoryDataService.js\";\n\n    import * as math from 'mathjs';\n\n    export default {\n        data() {   \n            return {\n                taskCategories: [],\n                selectedTaskCategories: [],\n\n                variableOk: false,\n                \n                name: \"New Task\",\n                taskName: \"\",\n                taskGrade: null,\n                text: \"\",\n                task_text: \"\",\n\n                formula: '$$x = {-b \\\\pm \\\\sqrt{b^2-4ac} \\\\over 2a}.$$',\n\n                ext_text: new Extractor(),\n                preview: new ConcreteTask(),\n                \n                variables: [],\n                variable: new Variable(''),\n                answer: new Answer(''),\n                questions: [],\n                answers: [],\n\n                overlayV: false,\n                overlayA: false,\n                overlayAddV: false,\n                overlaySave: false,\n                taskOverlay: false,\n                helpDialog: false,\n                indexV: 0,\n                indexAV: 0,\n                indexA: 0,\n            };\n        },\n        computed: {\n            getText() { return this.text; }\n        },\n\n        // Load task depending on navigation origin\n        beforeMount() {\n            console.log(\"taskId from route params\", localStorage.getItem('taskId'))\n\n            // Modify was selected from task history\n            if( this.$route.params.taskId ) \n            {\n                // Save id to localStorage, so we can reload page without lossing the id\n                localStorage.setItem('taskId', this.$route.params.taskId)\n            }\n\n            // Id was saved from route params or if the page was reloaded\n            if ( localStorage.getItem('taskId') )\n            {\n                // Load the task content from the database\n                TaskDataService.get(localStorage.getItem('taskId'))\n                    .then((res) => {\n                        console.log(res);\n\n                        try {\n                            this.name = res.data.name;\n                            this.taskName = res.data.name;\n                            this.taskGrade = res.data.grade;\n                            this.ext_text.task = parseMathLang(res.data.content);\n                            res.data.categories.forEach(({name}) => {\n                                this.selectedTaskCategories.push(name);\n                            });\n\n                            console.log('RECIEVED: ', res.data);\n                            this.$store.dispatch('showMessage', { message: \"Parsing successful!\" });\n\n                        } catch (error) {\n                            this.$store.dispatch('showMessage', { message: error.message, success: false });\n                        }\n                        // this.ext_text.task = parseMathLang(res.data.content);\n\n                        this.text = this.ext_text.task.text.trim();\n                    })\n                    .catch((error) => { \n                        this.errorHandler(error); \n                    });\n            }\n\n            // Get categories\n            CategoryDataService.getAll().then(({data}) => {\n                this.taskCategories = data.map(({name}) => name);\n            })\n        },\n\n        mounted() { },\n\n        created() { },\n\n        methods: {\n\n            getCategories() {\n                CategoryDataService.getAll().then(({data}) => {\n                    this.taskCategories = data.map(({name}) => name);\n                });\n            },\n\n            replaceAnswers(_qText) {\n\n                let cleanText = \"\";\n                try {\n                    cleanText = _qText.replaceAll(Token.types.gAnswer, \"\").replaceAll(\"=\", \"\").trim();\n                    setTimeout( () => renderByMathjax(document.getElementById(\"task\")), 100 ) ;\n                    return '$'.concat(math.parse(cleanText).toTex()).concat('$');\n                    //return cleanText;\n                } catch(error) {\n                    //return _qText;\n                    return cleanText;\n                }\n            },\n\n            testext() {\n                // Test extraction\n                this.ext_text.extractVariable(tokenize(this.text));\n            },\n\n            async createNewTask() \n            {\n                // Prepare data for sending\n                var data = { name: this.taskName, grade: this.taskGrade, content: this.ext_text.generateText() };\n\n                // Create new entry in database\n                if ( localStorage.getItem('taskId') == null) {\n                    \n                    try{\n                        let newTask = await TaskDataService.create(data);\n\n                        localStorage.setItem('taskId', newTask.data.id);\n\n                        console.log(this.selectedTaskCategories);\n\n                        for(let selectedCategory of this.selectedTaskCategories) {\n                            let category = await CategoryDataService.find({name: selectedCategory});\n\n                            // check\n                        }\n\n                        this.$store.dispatch('showMessage', { message: \"Task saved successfuly\" });\n                    } catch(error) {\n                        // log\n                        this.$store.dispatch('showMessage', { message: error.response.data.message, success: false });\n                    }\n                    }\n\n                // Update existing entry\n                else {    \n\n                    let taskId = localStorage.getItem('taskId');\n                    let task = await TaskDataService.get(taskId);\n\n                    try{\n                        // Delete each category on the task\n                        for(let category of task.data.categories) {\n                            TaskDataService.removeCategory({ taskId: taskId, categoryId: category.id });\n                        }\n                    } catch(error) {\n                        //\n                        console.log(\"Error while deleting categories from task\");\n                    }\n\n                    // Add each selectedCategory to task\n                    for(let selectedCategory of this.selectedTaskCategories) {\n\n                        try {\n                            // Find category id in DB\n                            let category = await CategoryDataService.find({name: selectedCategory}); \n                            \n                            // Add category to task\n                            await TaskDataService.addCategory(\n                                { taskId: taskId, categoryId: category.data.id }\n                            )\n                        } catch(error) {\n\n                            // Create category\n                            let category = await CategoryDataService.create({name: selectedCategory});\n                            \n                            // Add category to task\n                            await TaskDataService.addCategory(\n                                { taskId: taskId, categoryId: category.data.id }\n                            )\n\n                            console.log(\"Added\");\n                        }\n                    }\n\n\n                    TaskDataService.update( localStorage.getItem('taskId'), data ) \n                        .then((res) => {\n                            console.log(res);\n                            this.$router.push({name: \"yourTasks\"});\n                            this.$store.dispatch('showMessage', { message: res.data.message });\n                        })\n                        .catch((err) => {\n                            this.$store.dispatch('showMessage', { message: err.response.data.message, success: false });\n                        })\n                }\n            },\n\n            // opens variable setting dialog\n            variableInfo : function(i) {\n                this.indexV = i;\n                this.variable = cloneDeep(this.ext_text.task.variables[i]);\n                if(this.variable.added) {\n                    this.variable.name = this.variable.name.substr(1);\n                }\n                this.overlayV = true;\n            },\n            // close and save edited values\n            setVariableInfo: function() {\n                if(this.variable.added) {\n                    this.variable.name = '$'.concat(this.variable.name);\n                }\n                this.ext_text.task.variables[this.indexV] = cloneDeep(this.variable);\n                this.overlayV = false;\n            },\n            // opens answers setting dialog\n            answerInfo: function(i) {\n                this.indexA = i\n                this.answer = cloneDeep(this.ext_text.task.answers[i]);\n                this.overlayA = true;\n            },\n            // close and save edited values\n            setAnswerInfo: function() {\n                this.ext_text.task.answers[this.indexA] = cloneDeep(this.answer);\n                this.overlayA = false;\n            },\n            // opens preview task dialog\n            previewTask: function () {\n\n                GeneratorService\n                    .generate( { content: this.ext_text.task } )\n                    .then((res) => {\n                        this.preview = res.data.content;\n                        this.message = res.data.message;\n                        this.$store.dispatch('showMessage', {message: this.message});\n\n                        this.taskOverlay = true\n\n                        renderByMathjax(document.getElementById(\"latex-task\"));\n                        localStorage.setItem('data', this.ext_text.generateText() );\n                    })\n                    .catch((err) => {\n                        this.message = err?.response?.data?.message || err.message;\n                        this.$store.dispatch('showMessage', {message: this.message, success: false});\n                    });\n            },\n            saveText: function() {\n                localStorage.setItem('data', this.text);\n\n                this.createNewTask();\n            },\n            restoreText: function() {\n                // TODO ?\n            },\n\n\n            // Variables\n            addVariable: function() {\n                let newVariable = new Variable(\"$newVar\");\n                newVariable.added = true;\n                \n                this.ext_text.task.variables.push(newVariable);\n            },\n            removeVariable: function(i) {\n                this.ext_text.task.variables.splice(i, 1);\n            },\n\n            // Questions\n            addQuestion: function() {\n                this.ext_text.task.questions.push(new Question());\n            },\n            removeQuestion: function(i) {\n                this.ext_text.task.questions.splice(i, 1);\n            },\n\n            // Answers\n            removeAnswer(i) {\n                this.ext_text.task.answers.splice(i, 1);\n            },\n            addCorrect: function() {\n                this.answer.correct.push(new String(\"\"));\n            },\n            removeCorrect: function(i) {\n                this.answer.correct.splice(i, 1);\n            },\n            addIncorrect: function() {\n                this.answer.incorrect.push(new String(\"\"));\n            },\n            removeIncorrect: function(i) {\n                this.answer.incorrect.splice(i, 1);\n            },\n\n            parseText : function () {\n\n                // TEXT\n                this.ext_text.task.text = this.text;\n\n                let tokens = tokenize(this.text);\n\n                console.log(\"TOKENS: \",tokens);\n\n                // ANSWERS\n                this.answers = this.ext_text.extractAnswers(tokens);\n\n                // Extract answer from each question\n                \n                // Assume list of variables has changed\n                // and set visiblity to false for all variables\n                this.ext_text.task.answers.forEach((answer) => {\n                    answer.visible = false;\n                });\n                // QUESTIONS\n                this.ext_text.task.questions.forEach((question) => {\n\n                    //console.log('Q',question);\n                    //console.log(tokenize(\"Q: \", question.text));\n\n                    let questionTokens = tokenize(question.text);\n\n                    this.ext_text.extractAnswers(questionTokens);\n                    tokens = tokens.concat(questionTokens);\n                });\n\n                console.log(\"ALL TOKENS: \", tokens);\n\n                // VARIABLES\n                this.variables = this.ext_text.extractVariables(tokens);\n\n                try{\n                    let generated_text = this.ext_text.generateText();\n                    this.$store.dispatch('showMessage', {message: \"Successfuly evaluated!\"});\n                    console.log(generated_text);\n                } catch(err) {\n                    this.$store.dispatch('showMessage', {message: err.message, success: false});\n                }\n            }     \n        }\n    }\n</script>\n\n<style>\n    [text-narrow] {\n        line-height: 1.1 !important;\n        font-size: 1rem;\n    }\n\n    .pointer {\n        cursor: pointer !important;\n    }\n\n    .close-button {\n        position: absolute !important;\n        top: 0rem !important;\n        right: 0rem !important;\n    }\n\n</style>"]}]}