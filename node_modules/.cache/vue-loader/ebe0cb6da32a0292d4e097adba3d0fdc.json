{"remainingRequest":"/home/dc/Documents/BP/vue-bp-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dc/Documents/BP/vue-bp-web/src/components/takeTestPage.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/dc/Documents/BP/vue-bp-web/src/components/takeTestPage.vue","mtime":1649097901813},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/cache-loader/dist/cjs.js","mtime":1642114936856},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/babel-loader/lib/index.js","mtime":1642114938312},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/cache-loader/dist/cjs.js","mtime":1642114936856},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/vue-loader/lib/index.js","mtime":1642114938760}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBjb25jcmV0ZVRlc3REYXRhU2VydmljZSBmcm9tICIuLi9zZXJ2aWNlcy9jb25jcmV0ZVRlc3REYXRhU2VydmljZSI7CgpleHBvcnQgZGVmYXVsdCB7CiAgICBkYXRhKCkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHRlc3ROYW1lOiAnTmV3IFRlc3QgTmFtZScsCgogICAgICAgICAgICAvLyB0YXNrcwogICAgICAgICAgICB0ZXN0OiB7fSwKICAgICAgICAgICAgdGltZXI6ICIiLAoKICAgICAgICAgICAgLy8gcmVtb3ZlIHRhc2sgZGlhbG9nCiAgICAgICAgICAgIGV4aXREaWFsb2c6IGZhbHNlLAoKICAgICAgICAgICAgcGxhY2Vob2xkZXJNb2RlbDoge30KICAgICAgICB9CiAgICB9LAogICAgbWV0aG9kczogewogICAgICAgIC8vIFNhdmUgc2VsZWN0ZWQgb3IgdHlwZWQgYW5zd2VycyB0byB0ZXN0CiAgICAgICAgc2F2ZUFuc3dlcnMoKSB7CiAgICAgICAgICBjb25jcmV0ZVRlc3REYXRhU2VydmljZS51cGRhdGUodGhpcy4kcm91dGUucGFyYW1zLmlkLCB7CiAgICAgICAgICAgIGNvbnRlbnQ6IHRoaXMudGVzdC5jb250ZW50CiAgICAgICAgICB9KS50aGVuKCh7ZGF0YX0pID0+IHsKICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7CiAgICAgICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdzaG93TWVzc2FnZScsIHttZXNzYWdlOiAiQW5zd2VycyBzYXZlZCEifSk7CiAgICAgICAgICB9KS5jYXRjaCgoZXJyKSA9PiB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7CiAgICAgICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdzaG93TWVzc2FnZScsIHttZXNzYWdlOiAiRXJyb3Igb2NjdXJlZCB3aGlsZSBzYXZpbmcgYW5zd2Vycy4uLiIsIHN1Y2Nlc3M6IGZhbHNlfSk7CiAgICAgICAgICB9KQogICAgICAgIH0sCgogICAgICAgIC8vIFNhdmUgYW5zd2VycyBhbmQgc2V0IHRlc3QgYXMgZmluaXNoZWQKICAgICAgICBhc3luYyBmaW5pc2hUZXN0KCkgewogICAgICAgICAgY29uY3JldGVUZXN0RGF0YVNlcnZpY2UudXBkYXRlKHRoaXMuJHJvdXRlLnBhcmFtcy5pZCwgewogICAgICAgICAgICBjb250ZW50OiB0aGlzLnRlc3QuY29udGVudCwKICAgICAgICAgICAgc3RhdHVzOiAiRmluaXNoZWQiLCAKICAgICAgICAgICAgZmluaXNoZWRBdDogbmV3IERhdGUoKQogICAgICAgICAgfSkudGhlbihhc3luYyAoe2RhdGF9KSA9PiB7CiAgICAgICAgICAgIC8vIFRlc3QgY29tcGxldGVkCiAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEpOwoKICAgICAgICAgICAgdGhpcy4kcm91dGVyLnB1c2goe25hbWU6ICd5b3VyQXNzaWdubWVudHMnfSk7CiAgICAgICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdzaG93TWVzc2FnZScsIHttZXNzYWdlOiAiVGVzdCBjb21wbGV0ZWQhIn0pOwogICAgICAgICAgfSkuY2F0Y2goKGVycikgPT4gewogICAgICAgICAgICAvLyBlcnJvcgogICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpOwogICAgICAgICAgICAKICAgICAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ3Nob3dNZXNzYWdlJywge21lc3NhZ2U6ICJFcnJvciBvY2N1cmVkIHdoaWxlIHNhdmluZyBhbnN3ZXJzLi4uIiwgc3VjY2VzczogZmFsc2V9KTsKICAgICAgICAgICAgdGhpcy4kcm91dGVyLnB1c2goe25hbWU6ICd5b3VyQXNzaWdubWVudHMnfSk7CiAgICAgICAgICB9KQogICAgICAgIH0sCgogICAgICAgIGFzeW5jIHN5bmNUaW1lKCkgewoKICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy50ZXN0LmNvbnRlbnQpOwoKICAgICAgICAgICAgLy8gSWYgdGhlIHRpbWVzdGFtcHMgYXJlIG91dCBvZiBsaW5lLCB0ZXN0IGlzIG92ZXIKICAgICAgICAgICAgbGV0IGNvbmNyZXRlVGVzdCA9IGF3YWl0IGNvbmNyZXRlVGVzdERhdGFTZXJ2aWNlLmdldCh0aGlzLiRyb3V0ZS5wYXJhbXMuaWQpOwoKICAgICAgICAgICAgLy8gU2F2ZSB0aW1lc3RhbXBzIAogICAgICAgICAgICBsZXQgc2hvdWxkRmluaXNoQmVmb3JlID0gbmV3IERhdGUoY29uY3JldGVUZXN0LmRhdGEuc2hvdWxkRmluaXNoQmVmb3JlKTsKICAgICAgICAgICAgbGV0IG5vdyA9IG5ldyBEYXRlKCk7CgogICAgICAgICAgICAvLyBDaGVjayBpZiB0aW1lciBzaG91bGQgcmFuIG91dAogICAgICAgICAgICBpZiggbm93ID49IHNob3VsZEZpbmlzaEJlZm9yZSApIHsKICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSB0ZXN0IHN0YXR1cyB0byBmaW5pc2hlZCBhbmQgZW5kaW5nIHRpbWVzdGFtcAogICAgICAgICAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgY29uY3JldGVUZXN0RGF0YVNlcnZpY2UudXBkYXRlKHRoaXMuJHJvdXRlLnBhcmFtcy5pZCwgeyAKICAgICAgICAgICAgICAgICAgc3RhdHVzOiAiRmluaXNoZWQiLCAKICAgICAgICAgICAgICAgICAgZmluaXNoZWRBdDogbm93CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAvLyBSZXR1cm4gYmFjayB0byB5b3VyQXNzaWdubWVudHMgcGFnZSBhbmQgc2hvdyBzbmFja2JhciBtZXNzYWdlCiAgICAgICAgICAgICAgICBpZiggcmVzcG9uc2UgKSB7CiAgICAgICAgICAgICAgICAgIHRoaXMuJHJvdXRlci5wdXNoKHtuYW1lOiAieW91ckFzc2lnbm1lbnRzIn0pOwogICAgICAgICAgICAgICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnc2hvd01lc3NhZ2UnLCB7bWVzc2FnZTogIlRpbWUgbGltaXQgcmVhY2hlZCEiLCBzdWNjZXNzOiBmYWxzZX0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgLy8gR2V0IG1pbnV0ZXMgYW5kIHNlY29uZHMgcmVtYWluaW5nCiAgICAgICAgICAgICAgICBsZXQgbWludXRlcyA9IE1hdGgudHJ1bmMoICgoc2hvdWxkRmluaXNoQmVmb3JlIC0gbm93KSAvICgxMDAwICogNjApKSApOwogICAgICAgICAgICAgICAgbGV0IHNlY29uZHMgPSBNYXRoLnRydW5jKCAoKHNob3VsZEZpbmlzaEJlZm9yZSAtIG5vdykgLyAoMTAwMCkpICUgNjAgKTsKCiAgICAgICAgICAgICAgICAvLyBBZGQgMCBiZWZvcmUKICAgICAgICAgICAgICAgIG1pbnV0ZXMgPSBtaW51dGVzLnRvU3RyaW5nKCkubGVuZ3RoID09IDEgPyBgMCR7bWludXRlc31gIDogYCR7bWludXRlc31gOwogICAgICAgICAgICAgICAgc2Vjb25kcyA9IHNlY29uZHMudG9TdHJpbmcoKS5sZW5ndGggPT0gMSA/IGAwJHtzZWNvbmRzfWAgOiBgJHtzZWNvbmRzfWA7CgogICAgICAgICAgICAgICAgLy8gU2F2ZSB2YWx1ZQogICAgICAgICAgICAgICAgdGhpcy50aW1lciA9ICBgJHttaW51dGVzfW0gOiAke3NlY29uZHN9c2A7CiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KHRoaXMuc3luY1RpbWUsIDEwMDApOwogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgLy8gR2V0IHNlbGVjdGVkIHRlc3QgZm9yIHN0YXJ0aW5nCiAgICAgICAgYXN5bmMgcmV0cmlldmVUZXN0KCkgewogICAgICAgICAgICAvLyBHZXQgQ29uY3JldGVUZXN0IGJ5IElEIGZyb20gVVJMCiAgICAgICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IGNvbmNyZXRlVGVzdERhdGFTZXJ2aWNlLmdldCh0aGlzLiRyb3V0ZS5wYXJhbXMuaWQpOyAKICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIFNhdmUgdGVzdCBsb2NhbGx5CiAgICAgICAgICAgIHRoaXMudGVzdCA9IHJlc3BvbnNlLmRhdGE7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCJURVNUIiwgdGhpcy50ZXN0KTsKCiAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBzdHVkZW50IHN0YXJ0ZWQgd29ya2luZyBvbiB0aGUgdGVzdCBvciByZWxvYWRlZCB0aGUgd2luZG93L2Jyb3dzZXIKICAgICAgICAgICAgaWYoIHRoaXMudGVzdC5zdGF0dXMgPT0gJ0hhbmRlZCBPdXQnICkgewogICAgICAgICAgICAgICAgY29uY3JldGVUZXN0RGF0YVNlcnZpY2UudXBkYXRlKAogICAgICAgICAgICAgICAgICAgIHRoaXMuJHJvdXRlLnBhcmFtcy5pZCwgeyAKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiAiSW4gUHJvZ3Jlc3MiLCAKICAgICAgICAgICAgICAgICAgICAgICAgc2hvdWxkRmluaXNoQmVmb3JlOiBuZXcgRGF0ZSggKG5ldyBEYXRlKCkpLmdldFRpbWUoKSArIHRoaXMudGVzdC50aW1lTGltaXQgKiA2MDAwMCkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvLyBXYWl0IHVudGlsIHRoZSBzaG91bGRGaW5pc2hCZWZvcmUgdmFsdWUgdXBkYXRlcyBpbiB0aGUgREIKICAgICAgICAgICAgICAgICkudGhlbigocmVzcG9uc2UpID0+IHsKICAgICAgICAgICAgICAgICAgICAvLyBFYWNoIHN1YnNlcXVlbnQgc2Vjb25kLCBzeW5jIHJlbWFpbmluZyB0aW1lIHRvIHNob3VsZEZpbmlzaEJlZm9yZSBpbiBEQgogICAgICAgICAgICAgICAgICAgIHRoaXMuc3luY1RpbWUoKTsKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgLy8gU3RhcnQgcmVtYWluaW5nIHRpbWUgY291bnRlcgogICAgICAgICAgICAgIHRoaXMuc3luY1RpbWUoKTsKICAgICAgICAgICAgfQogICAgICAgIH0sCiAgICB9LAoKICAgIG1vdW50ZWQoKSB7CiAgICAgICAgLy8gTG9hZCB0ZXN0IGZyb20gdGhlIGRhdGFiYXNlCiAgICAgICAgdGhpcy5yZXRyaWV2ZVRlc3QoKTsKICAgIH0sCgogICAgY29tcHV0ZWQ6IHsgfQp9Cg=="},{"version":3,"sources":["takeTestPage.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqfile":"takeTestPage.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <v-container class=\"d-flex flex-column\">\n        <p class=\"text-h4 align-self-center\"> {{ testName }} </p>\n\n        <!-- Time for task -->\n        <v-card outlined class=\"mx-6 my-2 px-6 py-3\">\n        <p class=\"ma-0 py-2 text-body-1\"> \n            Time remaining: <span class=\"font-weight-medium text-subtitle-1\">{{ timer }}</span>\n        </p>\n        </v-card>\n\n        <!-- Cards with task details, render options preview -->\n        <v-card v-for=\"(task, tIndex) in test.content\"\n            :key=\"tIndex\" hover outlined class=\"my-2 mx-6 px-3\">\n            <!-- Task name -->\n            <v-card-title class=\"d-flex justify-space-between text-h5 font-weight-medium\">\n              Task #{{ tIndex + 1 }}\n            </v-card-title>\n            \n            <!-- Task text -->\n            <v-card-subtitle class=\"mt-1 text-body-1\"> \n              <p> {{ task.content.text }} </p> \n            </v-card-subtitle>\n            \n            <!-- Task questions, answers -->\n            <v-card-text>\n              <div \n                class=\"d-flex flex-column justify-center align-start\"  \n                v-for=\"(question, i) in task.content.questions\" :key=\"i\">\n\n                <!-- Question -->\n                <div class=\"d-flex flex-row justify-flex-start align-center\">\n                  <p\n                    class=\"font-weight-black align-self-center ma-0 text-subtitle-1\"> \n                    <span class=\"font-weight-medium text-body-1\"> Question #{{ i+1 }}: </span><br>\n                    {{ question.text }}\n                  </p>\n                </div>\n\n                <!-- Answers -->\n                <!-- type == 'select' -->\n                <div v-if=\"task.renderOption == 'select'\"\n                  class=\"d-flex flex-row justify-space-between mb-1\"> \n                  <!-- Answer options -->\n                  <div v-for=\"(answer, optIndex) in question.answers\" :key=\"optIndex\"\n                    class=\"d-flex flex-column py-1\">\n                      <v-select \n                        dense :items=\"answer.correct.concat(answer.incorrect)\" \n                        :value=\"test.content[tIndex].content.questions[i].answers[optIndex].selected\" :label=\"answer.name\" outlined>\n                      </v-select>\n                  </div>\n                </div>\n\n                <!-- type == 'radio' -->\n                <div class=\"d-flex flex-row justify-space-between mb-1\" v-if=\"task.renderOption == 'radio'\">  \n                  <div class=\"d-flex flex-column py-1 px-2\" v-for=\"(answer, optIndex) in question.answers\" :key=\"optIndex\">\n                    <p> {{ answer.name }} </p>\n                    <v-radio-group v-model=\"test.content[tIndex].content.questions[i].answers[optIndex].selected\">\n                      <v-radio dense class=\"py-1\"\n                        v-for=\"(value, r_i) in answer.correct.concat(answer.incorrect)\" :value=\"value\"\n                        :key=\"r_i\" :label=\"value.toString()\">\n                      </v-radio>\n                    </v-radio-group>\n                  </div>\n                </div>\n\n                <!-- type == 'checkbox' -->\n                <div class=\"d-flex flex-row justify-space-between mb-1\" v-if=\"task.renderOption == 'checkbox'\"> \n                  <div class=\"d-flex flex-column py-1 px-2\" v-for=\"(answer, optIndex) in question.answers\" :key=\"optIndex\">\n                    <p> {{ answer.name }} </p>\n                      <v-checkbox dense class=\"pa-0 ma-0\" v-for=\"(value) in answer.correct.concat(answer.incorrect)\"\n                        :key=\"value\" :label=\"value.toString()\" v-model=\"test.content[tIndex].content.questions[i].answers[optIndex].selected\">\n                      </v-checkbox>\n                  </div>\n                </div>\n\n                <!-- type == 'text' -->\n                <div class=\"d-flex flex-row justify-space-between mb-1\" v-if=\"task.renderOption == 'text'\"> \n                  <div class=\"dflex flex-column py-1 mr-4\" v-for=\"(answer, optIndex) in question.answers\" :key=\"optIndex\">\n                      <v-text-field dense\n                        :label=\"answer.name\"\n                        v-model=\"test.content[tIndex].content.questions[i].answers[optIndex].selected\"\n                        outlined\n                      ></v-text-field>\n                  </div>\n                </div>\n\n              </div>\n            </v-card-text>\n          </v-card>\n\n          <!-- Action buttons -->\n          <v-row class=\"d-flex justify-end align-center pa-2 px-6 mt-2\">\n            <v-btn outlined class=\"my-2 mb-4 mx-2 align-self-end\" text @click=\"$router.push({name: 'yourAssignments'})\"> Back </v-btn>\n            <v-btn outlined color=\"primary\" class=\"my-2 mb-4 mx-2 align-self-end\" @click=\"saveAnswers()\"> Save answers </v-btn>\n            <v-btn class=\"my-2 mb-4 mx-2 align-self-end\" color=\"primary\" @click=\"finishTest()\"> Finish test </v-btn>\n          </v-row>\n        </v-container>\n</template>\n\n<script>\n  import concreteTestDataService from \"../services/concreteTestDataService\";\n\n  export default {\n      data() {\n          return {\n              testName: 'New Test Name',\n\n              // tasks\n              test: {},\n              timer: \"\",\n\n              // remove task dialog\n              exitDialog: false,\n\n              placeholderModel: {}\n          }\n      },\n      methods: {\n          // Save selected or typed answers to test\n          saveAnswers() {\n            concreteTestDataService.update(this.$route.params.id, {\n              content: this.test.content\n            }).then(({data}) => {\n              console.log(data);\n              this.$store.dispatch('showMessage', {message: \"Answers saved!\"});\n            }).catch((err) => {\n              console.log(err);\n              this.$store.dispatch('showMessage', {message: \"Error occured while saving answers...\", success: false});\n            })\n          },\n\n          // Save answers and set test as finished\n          async finishTest() {\n            concreteTestDataService.update(this.$route.params.id, {\n              content: this.test.content,\n              status: \"Finished\", \n              finishedAt: new Date()\n            }).then(async ({data}) => {\n              // Test completed\n              console.log(data);\n\n              this.$router.push({name: 'yourAssignments'});\n              this.$store.dispatch('showMessage', {message: \"Test completed!\"});\n            }).catch((err) => {\n              // error\n              console.log(err);\n              \n              this.$store.dispatch('showMessage', {message: \"Error occured while saving answers...\", success: false});\n              this.$router.push({name: 'yourAssignments'});\n            })\n          },\n\n          async syncTime() {\n\n              console.log(this.test.content);\n\n              // If the timestamps are out of line, test is over\n              let concreteTest = await concreteTestDataService.get(this.$route.params.id);\n\n              // Save timestamps \n              let shouldFinishBefore = new Date(concreteTest.data.shouldFinishBefore);\n              let now = new Date();\n\n              // Check if timer should ran out\n              if( now >= shouldFinishBefore ) {\n                  // Update test status to finished and ending timestamp\n                  let response = await concreteTestDataService.update(this.$route.params.id, { \n                    status: \"Finished\", \n                    finishedAt: now\n                  });\n\n                  // Return back to yourAssignments page and show snackbar message\n                  if( response ) {\n                    this.$router.push({name: \"yourAssignments\"});\n                    this.$store.dispatch('showMessage', {message: \"Time limit reached!\", success: false});\n                  }\n              } else {\n                  // Get minutes and seconds remaining\n                  let minutes = Math.trunc( ((shouldFinishBefore - now) / (1000 * 60)) );\n                  let seconds = Math.trunc( ((shouldFinishBefore - now) / (1000)) % 60 );\n\n                  // Add 0 before\n                  minutes = minutes.toString().length == 1 ? `0${minutes}` : `${minutes}`;\n                  seconds = seconds.toString().length == 1 ? `0${seconds}` : `${seconds}`;\n\n                  // Save value\n                  this.timer =  `${minutes}m : ${seconds}s`;\n                  setTimeout(this.syncTime, 1000);\n              }\n          },\n\n          // Get selected test for starting\n          async retrieveTest() {\n              // Get ConcreteTest by ID from URL\n              let response = await concreteTestDataService.get(this.$route.params.id); \n              \n              // Save test locally\n              this.test = response.data;\n              console.log(\"TEST\", this.test);\n\n              // Check if the student started working on the test or reloaded the window/browser\n              if( this.test.status == 'Handed Out' ) {\n                  concreteTestDataService.update(\n                      this.$route.params.id, { \n                          status: \"In Progress\", \n                          shouldFinishBefore: new Date( (new Date()).getTime() + this.test.timeLimit * 60000)\n                      }\n                  // Wait until the shouldFinishBefore value updates in the DB\n                  ).then((response) => {\n                      // Each subsequent second, sync remaining time to shouldFinishBefore in DB\n                      this.syncTime();\n                  })\n              } else {\n                // Start remaining time counter\n                this.syncTime();\n              }\n          },\n      },\n\n      mounted() {\n          // Load test from the database\n          this.retrieveTest();\n      },\n\n      computed: { }\n  }\n</script>\n\n<style></style>"]}]}