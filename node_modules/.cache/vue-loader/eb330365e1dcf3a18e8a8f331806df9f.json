{"remainingRequest":"/home/dc/Documents/BP/vue-bp-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dc/Documents/BP/vue-bp-web/src/components/createTestPage.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/dc/Documents/BP/vue-bp-web/src/components/createTestPage.vue","mtime":1649285763343},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/cache-loader/dist/cjs.js","mtime":1642114936856},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/babel-loader/lib/index.js","mtime":1642114938312},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/cache-loader/dist/cjs.js","mtime":1642114936856},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/vue-loader/lib/index.js","mtime":1642114938760}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["createTestPage.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkfile":"createTestPage.vue","sourceRoot":"src/components","sourcesContent":["<template>\n\n    <!-- Show step completion and content of each step -->\n    <v-stepper v-model=\"$store.state.test.stepCounter\" class=\"px-2 mt-6 mx-14 b-g\" style=\"height: calc(100% - 2.5rem);\">\n\n    <!-- Steps at the top -->\n    <v-stepper-header class=\"mx-6 mt-2 pa-0 elevation-0\">\n      <v-stepper-step :complete=\"$store.state.test.stepCounter > 1\" step=\"1\"> Select grade </v-stepper-step>\n      <v-divider></v-divider>\n      <v-stepper-step :complete=\"$store.state.test.stepCounter > 2\" step=\"2\"> Select category </v-stepper-step>\n      <v-divider></v-divider>\n      <v-stepper-step :complete=\"$store.state.test.stepCounter > 3\" step=\"3\"> Select tasks </v-stepper-step>\n      <v-divider></v-divider>\n      <v-stepper-step :complete=\"$store.state.test.stepCounter > 4\" step=\"4\"> Configure tasks </v-stepper-step>\n    </v-stepper-header>\n\n    <!-- Content of each step -->\n    <v-stepper-items style=\"height: 100%\">\n\n      <!-- Select task grade from given list -->\n      <v-stepper-content step=\"1\" style=\"height: calc(100%-2rem)\">\n        <v-container fluid class=\"\">\n            <v-row align=\"center\" justify=\"center\">\n                <v-col align=\"center\" justify=\"center\" cols=\"4\" v-for=\"(grade, i) in $store.state.test.grades\" :key=\"i\">\n                    <v-badge :value=\"$store.state.test.grade == grade\" color=\"primary\" icon=\"mdi-check\" overlap>\n                        <!-- Applies style when given grade was selected, disables other grades, set grade on click -->\n                        <v-hover v-slot=\"{ hover }\">\n                          <v-card\n                              class=\"py-6 px-12\"\n                              :outlined=\"$store.state.test.grade != grade && hover\"\n                              :elevation=\"$store.state.test.grade == grade ? 2 : 0\"\n                              :plain=\"$store.state.test.grade != '0' || $store.state.test.grade != grade\"\n                              :disabled=\"$store.state.test.grade != '0' && $store.state.test.grade != grade\" \n                              :class=\"{ 'my-n1': $store.state.test.grade != grade && hover }\"\n                              @click=\"setGrade({value: grade})\">\n                              <h4> {{ grade }}. grade </h4>\n                          </v-card>\n                        </v-hover>\n                    </v-badge>\n                </v-col>\n            </v-row>\n            \n            <!-- Action buttons -->\n            <v-row class=\"d-flex justify-end pa-2 px-6 mt-2\">\n              <v-btn \n                @click=\"populateDatabase()\"\n                class=\"my-2 mx-2 align-self-end\" text> \n                Cancel \n              </v-btn>\n              <v-btn \n                :disabled=\"$store.state.test.grade == '0'\" \n                class=\"my-2 align-self-end\" color=\"primary\"\n                @click=\"moveToNextStep()\"> \n                Continue \n              </v-btn>\n            </v-row>\n        </v-container>\n\n      </v-stepper-content>\n\n      <!-- Select task categories from list -->\n      <v-stepper-content step=\"2\" style=\"height: calc(100% - 6rem);\">\n        <v-container fluid class=\"d-flex flex-column justify-end ma-0\" style=\"height: 100%; width: 100%\">\n          \n          <!-- Categories -->\n          <v-row>\n            <v-col align=\"center\" justify=\"center\" cols=\"4\" v-for=\"(category, i) in $store.state.test.categories\" :key=\"i\">\n              <v-badge :value=\"isCategorySelected(category.id)\" color=\"primary\" icon=\"mdi-check\" overlap>\n                  <v-card @click=\"setSelectedCategory({ category: category })\" class=\"pa-4 d-flex justify-center align-center\" style=\"width: 150px; height: 75px\">\n                      <h4> {{ category.name }} </h4>\n                  </v-card>\n              </v-badge>\n            </v-col>\n          </v-row>\n\n          <!-- Action buttons-->\n          <v-row class=\"d-flex justify-end pa-2 px-6 mt-2\">\n            <v-btn outlined text class=\"my-2 mx-2 align-self-end\" @click=\"moveToPrevStep()\"> \n              Back \n            </v-btn>\n            <v-btn \n              :disabled=\"$store.state.test.selectedTaskCategories.length == 0\"\n              class=\"my-2 align-self-end\" color=\"primary\"\n              @click=\"getTasks(); moveToNextStep();\">\n              Continue \n            </v-btn>\n          </v-row>\n        </v-container>\n\n      </v-stepper-content>\n\n      <!-- Select task from the list -->\n      <v-stepper-content step=\"3\">\n\n        <!-- Tasks -->\n        <v-container class=\"d-flex flex-column\"> \n          <v-badge \n            v-for=\"(task, index) in $store.state.test.tasks\" :key=\"index\"\n            :value=\"isTaskSelected(task.id)\" color=\"primary\" icon=\"mdi-check\" overlap>\n            <v-card @click=\"setSelectedTask({ task })\" class=\"px-4\">\n              <h4 class=\"py-1 pt-3\"> {{ task.name }} </h4>\n              <p class=\"pb-3\"> {{ task.content.slice(0, 64)+\"...\" }} </p>\n          </v-card>\n          </v-badge>\n        </v-container>\n\n        <!-- Action buttons -->\n        <v-row class=\"d-flex justify-end pa-2 px-6 mt-2\">\n          <v-btn \n            outlined text class=\"my-2 mx-2 align-self-end\"\n            @click=\"moveToPrevStep()\"> Back </v-btn>\n          <v-btn \n            class=\"my-2 align-self-end\" color=\"primary\" \n            @click=\"generateConcreteTasks(); moveToNextStep()\">\n            Continue \n          </v-btn>\n        </v-row>\n\n      </v-stepper-content>\n\n      <!-- See preview of each task, modify render options -->\n      <v-stepper-content step=\"4\">\n        <v-container class=\"d-flex flex-column\">\n          <p class=\"text-h4 align-self-center\" @blur=\"setTestName($event)\" contenteditable=\"true\"> \n            {{ $store.state.test.name }} \n          </p>\n\n          <!-- Time for task -->\n          <v-card outlined width=\"max-content\" class=\"d-flex flex-row mx-6 my-2 px-6 align-center\">\n            <p class=\"ma-0 py-2\"> Grade: {{ $store.state.test.grade }}. </p>\n          </v-card>\n          <v-card outlined class=\"d-flex flex-row justify-start mx-6 my-2 px-6 py-6\">\n            <p class=\"ma-0 py-2 text-body-1\" style=\"width: 12.5rem\"> \n              Test duration: <span class=\"font-weight-medium text-subtitle-1\">\n                {{ $store.state.test.timeLimit }}</span> minutes \n            </p> \n            <v-slider \n              class=\"d-flex align-center ma-0\" hide-details \n              v-model=\"$store.state.test.timeLimit\" :min=\"5\" :max=\"45\" @change=\"setTimer\">\n            </v-slider>\n          </v-card>\n\n          <!-- Cards with task details, render options preview -->\n          <v-card v-for=\"(task, tIndex) in $store.state.test.concreteTasks\"\n            :key=\"tIndex\" class=\"my-2 mx-6 px-3\">\n            <!-- Task name -->\n            <v-card-title class=\"d-flex justify-space-between text-h5 font-weight-medium\">\n              {{ tIndex + 1 }}) Task\n              <!-- Task options -->\n              <v-card-actions>\n                <!-- Edit asnwer type button -->\n                <v-tooltip bottom>\n                  <template v-slot:activator=\"{ on, attrs }\">\n                    <v-btn \n                      @click=\"selectedTaskId = tIndex; selectedAnswerType = answerTypes.findIndex((option) => option == task.renderOption); setAnswerOptionDialog = true\"\n                      icon v-bind=\"attrs\" v-on=\"on\">\n                      <v-icon color=\"primary\"> mdi-tune </v-icon>\n                    </v-btn>\n                  </template>\n                  <span class=\"font-weight-light\">Edit answer type</span>\n                </v-tooltip>\n                <!-- Modify task button -->\n                <v-tooltip bottom>\n                  <template v-slot:activator=\"{ on, attrs }\">\n                    <v-btn @click=\"modifyTask(task.abstractTaskId)\" icon v-bind=\"attrs\" v-on=\"on\">\n                      <v-icon color=\"var(--main-text-color)\">\n                        mdi-pencil-outline\n                      </v-icon>\n                    </v-btn>\n                  </template>\n                  <span class=\"font-weight-light\">Edit task</span>\n                </v-tooltip>\n                <!-- Remove concrete task -->\n                <v-tooltip bottom>\n                  <template v-slot:activator=\"{ on, attrs }\">\n                    <v-btn \n                      @click.stop=\"selectedTaskId = task.abstractTaskId; removeDialog = true\"\n                      icon v-bind=\"attrs\" v-on=\"on\">\n                      <v-icon color=\"error\">\n                        mdi-close-circle-outline\n                      </v-icon>\n                    </v-btn>\n                  </template>\n                  <span class=\"font-weight-light\">Remove task</span>\n                </v-tooltip>\n              </v-card-actions>\n            </v-card-title>\n            \n            <!-- Task text -->\n            <v-card-subtitle class=\"mt-1 text-body-1\">\n              <p> {{ task.content.text }} </p> \n            </v-card-subtitle>\n            \n            <!-- Task questions, answers -->\n            <v-card-text>\n              <div \n                class=\"d-flex flex-column justify-center align-start\"  \n                v-for=\"(question, i) in task.content.questions\" :key=\"i\">\n\n                <!-- Question -->\n                <div class=\"d-flex flex-row justify-flex-start align-center\">\n                  <p class=\"font-weight-bold align-self-center ma-0 mt-2 text-subtitle-1\"> \n                    <span class=\"font-weight-medium text-body-1\"> {{ i+1 }}. Question </span><br>\n                    {{ question.text.replace(/@.+/, '') }}\n                  </p>\n                </div>\n\n                <!-- Answers -->\n                <!-- type == 'select' -->\n                <div v-if=\"task.renderOption == 'select'\"\n                  class=\"d-flex flex-row justify-space-between mb-1\"> \n                  <!-- Answer options -->\n                  <div v-for=\"(answer, index) in question.answers\" :key=\"index\"\n                    class=\"d-flex flex-column py-4\">\n                      <v-select style=\"max-width: 200px\"\n                        dense :items=\"answer.correct.concat(answer.incorrect)\" \n                        label=\"Answer\" outlined>\n                      </v-select>\n                  </div>\n                </div>\n\n                <!-- type == 'radio' -->\n                <div class=\"d-flex flex-row justify-space-between mb-1\" v-if=\"task.renderOption == 'radio'\">  \n                  <div class=\"d-flex flex-column\" v-for=\"(answer, index) in question.answers\" :key=\"index\">\n                    <v-radio-group readonly v-model=\"placeholderModel\">\n                      <v-radio dense class=\"py-1\"\n                        v-for=\"(value, i) in answer.correct.concat(answer.incorrect)\"\n                        :key=\"value.toString() + i\" :label=\"value.toString()\" :value=\"i\">\n                      </v-radio>\n                    </v-radio-group>\n                  </div>\n                </div>\n\n                <!-- type == 'checkbox' -->\n                <div class=\"d-flex flex-row justify-space-between mb-1\" v-if=\"task.renderOption == 'checkbox'\"> \n                  <div class=\"d-flex flex-column py-1 px-2\" v-for=\"(answer, index) in question.answers\" :key=\"index\">\n                    <p> {{ answer.name }} </p>\n                      <v-checkbox dense class=\"pa-0 ma-0\" \n                        v-for=\"(value, i) in answer.correct.concat(answer.incorrect)\"\n                        :key=\"value.toString()\" :label=\"value.toString()\" :value=\"i\">\n                      </v-checkbox>\n                  </div>\n                </div>\n\n                <!-- type == 'text' -->\n                <div class=\"d-flex flex-row justify-space-between mb-1\" v-if=\"task.renderOption == 'text'\">\n                  <div class=\"dflex flex-column py-1 mr-2\" v-for=\"(answer, index) in question.answers\" :key=\"index\">\n                      <v-text-field dense label=\"Answer\" outlined></v-text-field>\n                  </div>\n                </div>\n\n              </div>\n            </v-card-text>\n          </v-card>\n        </v-container>\n\n        <!-- Action buttons -->\n        <v-row class=\"d-flex justify-center align-center pa-2 px-6 mt-2\">\n          <v-btn outlined text class=\"my-2 mb-4 mx-2 align-self-end\"\n            @click=\"moveToPrevStep()\"> \n            Back \n          </v-btn>\n          <v-btn class=\"my-2 mb-4 mx-2 align-self-end\" color=\"primary\" \n            @click=\"saveDialog = true\"> \n            Finish\n          </v-btn>\n        </v-row>\n\n        <!-- Remove task from test dialog -->\n        <v-dialog v-model=\"removeDialog\" width=\"350\" :retain-focus=\"false\">\n          <v-card>\n            <v-card-title class=\"text-h5 lighten-2\"> Remove Task </v-card-title>\n\n            <v-card-text> Are you sure you want to remove this task? </v-card-text>\n\n            <v-divider></v-divider>\n\n            <v-card-actions>\n              <v-btn color=\"black\" outlined text @click=\"removeDialog = false\"> Cancel </v-btn>\n              <v-btn dark color=\"red\" @click=\"removeConcreteTask({index: selectedTaskId}); removeDialog = false\"> Remove </v-btn>\n            </v-card-actions> \n          </v-card>\n        </v-dialog>\n\n        <!-- Answer Type Options Dialog -->\n        <v-dialog v-model=\"setAnswerOptionDialog\" width=\"500\" :retain-focus=\"false\">\n          <v-card>\n              <v-card-title class=\"text-h5 lighten-2\">\n                Task #{{selectedTaskId+1}} Answer Options\n              </v-card-title>\n\n              <v-card-text> \n                <p>Select answer type</p>\n                <v-slider \n                  v-model=\"selectedAnswerType\" \n                  :tick-labels=\"answerTypes\" :max=\"3\"\n                  step=\"1\" ticks=\"always\" tick-size=\"6\"\n                  >\n                </v-slider>\n              </v-card-text>\n\n              <v-divider></v-divider>\n\n              <v-card-actions>\n                  <v-spacer></v-spacer>\n                  <v-btn color=\"black\" outlined text @click=\"setAnswerOptionDialog = false\"> Back </v-btn>\n                  <v-btn dark color=\"primary\"\n                    @click=\"setRenderOption({index: selectedTaskId, renderOption: answerTypes[selectedAnswerType]}); setAnswerOptionDialog = false\"> \n                    Save \n                  </v-btn>\n              </v-card-actions>\n              \n          </v-card>\n        </v-dialog>\n\n        <!-- Answer type options dialog -->\n        <v-dialog v-model=\"saveDialog\" width=\"450\" :retain-focus=\"false\">\n            <v-card class=\"d-flex flex-column rounded-lg pt-2\">\n                <p class=\"pb-4 my-2 font-weight-medium text-h5 align-self-center\"> Test Details Overview </p>\n\n                <!-- Set task name -->\n                <v-text-field \n                    class=\"px-4\" v-model=\"testName\" outlined hide-details=\"\"\n                    label=\"Test name\" placeholder=\"Enter test name\" @change=\"setTestName\" >\n                </v-text-field>\n\n                <v-containter class=\"d-flex flex-row my-3\">\n                  <!-- Selected grade -->\n                  <v-text-field \n                      class=\"px-4\" v-model=\"$store.state.test.grade\" outlined readonly hide-details=\"\"\n                      label=\"Grade\">\n                  </v-text-field>\n\n                  <!-- Selected time limit -->\n                  <v-text-field\n                      class=\"px-4\" v-model=\"$store.state.test.timeLimit\" outlined readonly hide-details=\"\"\n                      label=\"Time limit\">\n                  </v-text-field>\n                </v-containter>\n                \n\n                <!-- Set categories to task -->\n                <v-combobox class=\"px-4\" label=\"Categories\" \n                    v-model=\"selectedTaskCategories\"\n                    readonly multiple chips outlined>\n                    <template v-slot:selection=\"data\">\n                        <v-chip color=\"primary\" class=\"pa-2\" v-bind=\"data.attrs\">\n                          {{ data.item }}\n                        </v-chip>\n                    </template>\n                </v-combobox>\n\n                <v-divider></v-divider>\n\n                <v-card-actions>\n                    <v-spacer></v-spacer>\n                    <v-btn color=\"black\" outlined text @click=\"saveDialog= false\"> Cancel </v-btn>\n                    <v-btn dark color=\"primary\" @click=\"createOrSaveTest(); saveDialog = false\"> Save </v-btn>\n                </v-card-actions>\n                \n            </v-card>\n        </v-dialog>\n\n      </v-stepper-content>\n\n    </v-stepper-items>\n  </v-stepper>\n</template>\n\n<script>\nimport { mapActions, mapGetters } from \"vuex\";\nimport TestDataService from '../services/testDataService';\n\nexport default {\n    data() {\n        return {\n            // stepper completion and list items on each page\n            selectedTaskId: -1,\n            timer: 15,\n\n            // task handling\n            tasks: [],\n            concreteTasks: [],\n            categories: [],\n\n            // answer types and rendering\n            answerTypes: [ 'text', 'radio', 'select', 'checkbox' ],\n            answerOptions: [],\n            selectedAnswerType: 'text',\n            setAnswerOptionDialog: false,\n\n            // remove task dialog\n            removeDialog: false,\n            \n            placeholderModel: 0,\n            saveDialog: false,\n        }\n    },\n    methods: {\n\n        // function from testData Vuex store \n        ...mapActions({\n          setName: 'test/setName',\n          setGrade: 'test/setGrade',\n          setTimeLimit: 'test/setTimeLimit',\n          setTestname: 'test/setTestName',\n          setSelectedCategory: 'test/setSelectedCategory',\n          setSelectedTask: 'test/setSelectedTask',\n          moveToNextStep: 'test/moveToNextStep',\n          moveToPrevStep: 'test/moveToPrevStep',\n          getTasks: 'test/getTasks',\n          generateConcreteTasks: 'test/generateConcreteTasks',\n          setRenderOption: 'test/setRenderOption',\n          removeConcreteTask: 'test/removeConcreteTask'\n        }),\n\n        setTestName() {\n            this.setName({name: this.testName});\n        },\n\n        // Create new test and add selected tasks || Update existing test\n        createOrSaveTest() {\n\n          try{\n\n            if( this.$store.state.test.id == 0 ) {\n              // Create a new test\n              TestDataService.create({\n                name: this.testName, \n                grade: this.$store.state.test.grade,\n                timeLimit: this.$store.state.test.timeLimit, \n                createdBy: this.$store.state.app.userID }\n              )\n              .then(async (response) => {\n                let testId = response.data.id;\n\n                // Add each selected to the test\n                for(let task of this.$store.state.test.concreteTasks) {\n                  await TestDataService.addTask({\n                    testId: testId,\n                    taskId: task.abstractTaskId,\n                    taskRenderOption: task.renderOption\n                  });\n                }\n                \n                // Return to test list with success message\n                this.$router.push({ name: \"yourTests\" });\n                this.$store.dispatch('showMessage', {message: 'Test created successfuly!'});\n              });\n            } else {\n              // Update an existing test\n              TestDataService.update(this.$store.state.test.id, {\n                name: this.$store.state.test.name, \n                grade: this.$store.state.test.grade,\n                timeLimit: this.$store.state.test.timeLimit,\n              }).then(() => {\n                // Get abstractTest by ID\n                TestDataService.get(this.$store.state.test.id).then(async (abstractTest) => {\n                  // Remove current tasks\n                  for(let abstractTask of abstractTest.data.tasks) {\n                    await TestDataService.removeTask({ testId: abstractTest.data.id, taskId: abstractTask.id });\n                  }\n\n                  // Add updated tasks to test\n                  for(let task of this.$store.state.test.concreteTasks) {\n                    await TestDataService.addTask({\n                      testId: abstractTest.data.id,\n                      taskId: task.abstractTaskId,\n                      taskRenderOption: task.renderOption\n                    });\n                  }\n\n                  // Return to test list with a success message\n                  this.$router.push({ name: \"yourTests\" });\n                  this.$store.dispatch('showMessage', {message: 'Test successfuly updated!'});\n                });\n              });\n            }\n        } catch(err) {\n          this.$store.dispatch('showMessage', {message: 'Error while saving test!', success: false});\n        }\n      },\n\n      setTimer(value) {\n        this.setTimeLimit({ timeLimit: value });\n      }\n    },\n\n    // This function runs before the UI loads\n    beforeMount() {\n        // Load categories and tasks from the database\n        this.generateConcreteTasks();\n        console.log(this.$store.state.test.selectedTaskCategories);\n    },\n\n    computed: {\n      ...mapGetters({\n        isCategorySelected: 'test/isCategorySelected',\n        isTaskSelected: 'test/isTaskSelected',\n        getCategories: 'test/getCategories'\n      }),\n      \n      testName: {\n        get () {\n          return this.$store.state.test.name;\n        },\n        set (value) {\n          this.$store.commit('test/SET_NAME', {name: value});\n        }\n      },\n\n      taskCategories: {\n        get () {\n          return this.$store.state.test.categories.map(({name}) => name);\n        },\n      },\n\n      selectedTaskCategories: {\n        get () {\n          return this.$store.state.test.selectedTaskCategories.map(({name}) => name);\n        },\n        set (value) {\n          this.$store.commit('test/SET_SELECTED_CATEGORY', \n            {category: this.$store.state.test.categories.find(({name}) => name == value)}\n          );\n        }\n      }\n    }\n}\n</script>\n\n<style></style>"]}]}