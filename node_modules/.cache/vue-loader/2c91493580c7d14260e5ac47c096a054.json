{"remainingRequest":"/home/dc/Documents/BP/vue-bp-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dc/Documents/BP/vue-bp-web/src/components/createtaskpage.vue?vue&type=template&id=3a233ca0&","dependencies":[{"path":"/home/dc/Documents/BP/vue-bp-web/src/components/createtaskpage.vue","mtime":1649937388992},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/cache-loader/dist/cjs.js","mtime":1642114936856},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1642114939268},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/cache-loader/dist/cjs.js","mtime":1642114936856},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/vue-loader/lib/index.js","mtime":1642114938760}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Cjx2LWNvbnRhaW5lciBpZD0idGFzayIgY2xhc3M9ImQtZmxleCBmbGV4LWNvbHVtbiBqdXN0aWZ5LXN0YXJ0IGFsaWduLWNlbnRlciBtdC0yIHBiLTAgYi1nIHJvdW5kZWQtbGciIHN0eWxlPSJwb3NpdGlvbjogcmVsYXRpdmU7Ij4KCiAgICA8di1idG4gZWxldmF0aW9uPSIxIiBsYXJnZSBjb2xvcj0icHJpbWFyeSIgaWNvbiBzdHlsZT0icG9zaXRpb246IGFic29sdXRlOyBsZWZ0OiAwLjVyZW07IGJhY2tncm91bmQtY29sb3I6IHdoaXRlIgogICAgICAgIGNsYXNzPSJweC02IHB5LTIgbXgtMiBuby11cHBlcmNhc2UiIEBjbGljaz0iaGVscERpYWxvZyA9IHRydWUiPiAKICAgICAgICA8di1pY29uPm1kaS1oZWxwLWNpcmNsZS1vdXRsaW5lPC92LWljb24+CiAgICA8L3YtYnRuPgoKICAgIDwhLS0gVGFzayBuYW1lIC0tPiAgICAgICAgCiAgICA8aDQgY2xhc3M9InRleHQtaDUgY3VzdG9tLWZvbnQgbXktNCBmb250LXdlaWdodC1ib2xkIj4ge3sgdGhpcy5uYW1lIH19IDwvaDQ+CgogICAgPHYtY29udGFpbmVyIGZsdWlkIHJvdW5kZWQgbGFiZWw9IlRhc2siIGNsYXNzPSJkLWZsZXggZmxleC1yb3ciIHN0eWxlPSJoZWlnaHQ6IDEwMCU7Ij4KCiAgICAgICAgPCEtLSBMZWZ0IHNpZGUgLS0+CiAgICAgICAgPHYtY29sIGNvbHM9IjE2IiBjbGFzcz0ibXgtMiBweS0wIHB4LTIgbWEtMCBkLWZsZXggZmxleC1jb2x1bW4ganVzdGlmeS1zdGFydCI+CgogICAgICAgIDwhLS0gVGFzayB0ZXh0IHRleHQtZmllbGQgLS0+CiAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4IGZsZXgtY29sdW1uIGp1c3RpZnktc3RhcnQgZmxleC1ncm93LTAiPgogICAgICAgICAgICA8aDMgY2xhc3M9Im1sLTIgbWItMSI+IFRhc2sgdGV4dCA8L2gzPgogICAgICAgICAgICA8di10ZXh0YXJlYSB0ZXh0LW5hcnJvdyBzcGVsbGNoZWNrPSJmYWxzZSIgYmFja2dyb3VuZC1jb2xvcj0id2hpdGUiIGNvbG9yPSJibGFjayIKICAgICAgICAgICAgICAgIGlkPSJ0YXNrLXRleHQiIGNsYXNzPSJ0ZXh0LWgzIHBiLTIiIHYtbW9kZWw9InRleHQiIHNvbG8gbm8tcmVzaXplIGhpZGUtZGV0YWlscyByb3dzPSI1Ij4KICAgICAgICAgICAgPC92LXRleHRhcmVhPgogICAgICAgIDwvZGl2PgoKICAgICAgICA8IS0tIFZhcmlhYmxlcyBjaGlwcyBzZWN0aW9uIC0tPgogICAgICAgIDxoMyBjbGFzcz0ibWwtMiBtYi0xIj4gVmFyaWFibGVzIDwvaDM+ICAgICAgICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXggZmxleC1yb3cgZmxleC13cmFwIGFsaWduLWNlbnRlciBtYS0wIHBhLTAgbWludXMiPgogICAgICAgICAgICAgICAgPGRpdiB2LWZvcj0iKHZhcmlhYmxlLCBpbmQpIGluIGV4dF90ZXh0LnRhc2sudmFyaWFibGVzIiA6a2V5PSJpbmQgKyAndiciIGNsYXNzPSJtYS0wIHBhLTAiPgogICAgICAgICAgICAgICAgICAgIDx2LWNoaXAgdi1pZj0idmFyaWFibGUudmlzaWJsZSIgQGNsaWNrPSJ2YXJpYWJsZUluZm8oaW5kKSIgOmNsb3NlPSJ2YXJpYWJsZS5hZGRlZCIKICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9InByaW1hcnkiIGxhYmVsIGNsYXNzPSJteC0yIG15LTEgcHgtNiBweS00IHBvaW50ZXIgZWxldmF0aW9uLTEiPgogICAgICAgICAgICAgICAgICAgICAgICB7eyB2YXJpYWJsZS5uYW1lLnN1YnN0cigxKSB9fQogICAgICAgICAgICAgICAgICAgIDwvdi1jaGlwPgogICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPCEtLSBBZGQgdmFyaWFibGUgaWNvbiAtLT4KICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgPHYtYnRuIEBjbGljaz0iYWRkVmFyaWFibGUoKSIgZGVwcmVzc2VkIGNsYXNzPSJuby11cHBlcmNhc2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uPm1kaS1wbHVzPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgICAgIEFkZCBWYXJpYWJsZQogICAgICAgICAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8IS0tIEFuc3dlcnMgY2hpcHMgc2VjdGlvbiAtLT4KICAgICAgICAgICAgPGgzIGNsYXNzPSJtbC0yIj5BbnN3ZXJzPC9oMz4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCBmbGV4LXJvdyBmbGV4LXdyYXAgYWxpZ24tY2VudGVyIG1hLTAgcGEtMCBtaW51cyI+CiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtYm9keS0yIG14LTIiIHYtaWY9ImV4dF90ZXh0LnRhc2suYW5zd2Vycy5sZW5ndGggPT0gMCIgPk5vIEFuc3dlcnMgZm91bmQuIEFkZCBhbnN3ZXJzIHRvIHF1ZXN0aW9ucy4gPC9wPgogICAgICAgICAgICAgICAgICAgIDxkaXYgdi1mb3I9IihhbnN3ZXIsIGkpIGluIGV4dF90ZXh0LnRhc2suYW5zd2VycyIgOmtleT0iaSArICdhJyIgY2xhc3M9Im1hLTAgcGEtMCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNoaXAgdi1pZj0iYW5zd2VyLnZpc2libGUiIEBjbGljaz0iYW5zd2VySW5mbyhpKSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSJwcmltYXJ5IiBsYWJlbCBjbGFzcz0ibXgtMiBteS0xIHB4LTYgcHktNCBwb2ludGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IGFuc3dlci5uYW1lLnN1YnN0cigxKSB9fQogICAgICAgICAgICAgICAgICAgICAgICA8L3YtY2hpcD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICA8IS0tIFBSRVZJRVcgLS0+CiAgICAgICAgPHYtb3ZlcmxheSBpZD0ibGF0ZXhNYXRoIiA6dmFsdWU9InRhc2tPdmVybGF5IiA6bGlnaHQ9InRydWUiIDpkYXJrPSJmYWxzZSI+CiAgICAgICAgICAgIDx2LXNoZWV0IAogICAgICAgICAgICAgICAgZWxldmF0aW9uPSI0IiB3aWR0aD0iNjUwIgogICAgICAgICAgICAgICAgc3R5bGU9ImhlaWdodDogNjAwcHg7IG92ZXJmbG93LXk6IGF1dG8iCiAgICAgICAgICAgICAgICBjbGFzcz0icGEtNCBtYS0yIGQtZmxleCBmbGV4LWNvbHVtbiBqdXN0aWZ5LWZsZXgtc3RhcnQgYWxpZ24tZmxleC1zdGFydCByb3VuZGVkLWxnIj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHYtYnRuIHBsYWluIGljb24gQGNsaWNrPSJ0YXNrT3ZlcmxheSA9IGZhbHNlIiBjbGFzcz0iY2xvc2UtYnV0dG9uIG10LTQgbXItNiBwYS0wIHNocmluayI+CiAgICAgICAgICAgICAgICAgICAgPHYtaWNvbiBjb2xvcj0iZGFuZ2VyIj5tZGktY2xvc2U8L3YtaWNvbj4KICAgICAgICAgICAgICAgIDwvdi1idG4+CgogICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJteC0yIHBhLTEgdGV4dC1oNSI+VGFzayBwcmV2aWV3IDwvaDQ+CgogICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtYS0yIHBhLTEiPiB7eyBwcmV2aWV3LnRleHQudHJpbSgpIH19IDwvaDM+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXggZmxleC1jb2x1bW4gbWEtMiBwYS0xIiB2LWZvcj0iKHEsIGkpIGluIHByZXZpZXcucXVlc3Rpb25zIiA6a2V5PSIncScgKyBpIj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9Im1hLTEiPiB7eyByZXBsYWNlQW5zd2VycyhxLnRleHQudHJpbSgpKSB9fSA8L2g0PgoKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYS0xIHBhLTEiIHYtZm9yPSIoYSwgaSkgaW4gcS5hbnN3ZXJzIiA6a2V5PSInYScgKyBpIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgdi1mb3I9IihpdGVtLCBpbmRleCkgaW4gYS5jb3JyZWN0IiA6a2V5PSJpbmRleCI+IGEpIHt7aXRlbX19IDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgdi1mb3I9IihpdGVtLCBpbmRleCkgaW4gYS5pbmNvcnJlY3QiIDprZXk9IidpYScgKyBpbmRleCI+IAogICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgU3RyaW5nLmZyb21DaGFyQ29kZSg5OCArIGluZGV4KSArICcpJ319IHt7aXRlbX19IAogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC92LXNoZWV0PgogICAgICAgIDwvdi1vdmVybGF5PgoKICAgICAgICA8L3YtY29sPgogICAgICAgIAogICAgICAgIDwhLS0gUmlnaHQgc2lkZSAtLT4KICAgICAgICA8di1jb2wgY29scz0iMTYiIGNsYXNzPSJteC0yIHBhLTAgZC1mbGV4IGZsZXgtY29sdW1uIGp1c3RpZnktc3BhY2UtYmV0d2VlbiI+CgogICAgICAgIDwhLS0gUXVlc3Rpb25zIHNlY3Rpb24gLS0+CiAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4IGZsZXgtY29sdW1uIGp1c3RpZnktc3RhcnQgZmxleC1ncm93LTAiPgogICAgICAgICAgICA8aDMgY2xhc3M9Im1sLTIgbWItMCI+IFF1ZXN0aW9ucyA8L2gzPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXggZmxleC1jb2x1bW4ganVzdGlmeS1zdGFydCIgc3R5bGU9ImhlaWdodDogMjIwcHg7IG92ZXJmbG93LXk6IGF1dG8iPgogICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJkLWZsZXggZmxleC1yb3cgYWxpZ24tY2VudGVyIiAKICAgICAgICAgICAgICAgICAgICB2LWZvcj0iKHF1ZXN0aW9uLCBpKSBpbiBleHRfdGV4dC50YXNrLnF1ZXN0aW9ucyIgOmtleT0iaSI+CiAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZAogICAgICAgICAgICAgICAgICAgICAgICA6bGFiZWw9IidUYXNrIHF1ZXN0aW9uICMnICsgaSIKICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9ImVxLjogV2hhdCBpcyB0aGUgcmVzdWx0PyBAcmVzIgogICAgICAgICAgICAgICAgICAgICAgICBzb2xvIGhpZGUtZGV0YWlscyBjb2xvcj0iZXJyb3IiCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJteS0xIGQtZmxleCBmbGV4LWdyb3ctMSIKICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iZXh0X3RleHQudGFzay5xdWVzdGlvbnNbaV0udGV4dCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YXBwZW5kPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbiBjb2xvcj0iZXJyb3IiIEBjbGljaz0icmVtb3ZlUXVlc3Rpb24oaSkiPm1kaS1kZWxldGUtZW1wdHk8L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPCEtLSBBZGQgcXVlc3Rpb24gYnV0dG9uIC0tPgogICAgICAgICAgICAgICAgPHYtYnRuIEBjbGljaz0iYWRkUXVlc3Rpb24iIGRlcHJlc3NlZCBjbGFzcz0ibXktMSBuby11cHBlcmNhc2UgYWxpZ24tc2VsZi1zdGFydCI+CiAgICAgICAgICAgICAgICAgICAgPHYtaWNvbj5tZGktcGx1czwvdi1pY29uPiAgCiAgICAgICAgICAgICAgICAgICAgQWRkIFF1ZXN0aW9uIAogICAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4IGZsZXgtcm93IG10LTIgbWItMSBqdXN0aWZ5LXNlbGYtZW5kIGp1c3RpZnktZW5kIj4KICAgICAgICAgICAgPHYtYnRuIGxhcmdlIGNsYXNzPSJweC02IHB5LTIgbXgtMiBuby11cHBlcmNhc2UiIEBjbGljaz0icGFyc2VUZXh0Ij5FdmFsdWF0ZTwvdi1idG4+CiAgICAgICAgICAgIDx2LWJ0biBsYXJnZSBjbGFzcz0icHgtNiBweS0yIG14LTIgbm8tdXBwZXJjYXNlIiBAY2xpY2s9InByZXZpZXdUYXNrIj5QcmV2aWV3PC92LWJ0bj4KICAgICAgICAgICAgPHYtYnRuIGVsZXZhdGlvbj0iMiIgbGFyZ2UgY29sb3I9InByaW1hcnkiCiAgICAgICAgICAgIGNsYXNzPSJweC02IHB5LTIgbXgtMiBuby11cHBlcmNhc2UiIEBjbGljaz0iZ2V0Q2F0ZWdvcmllcygpOyBvdmVybGF5U2F2ZSA9IHRydWUiPiBTYXZlCiAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgIDwhLS0gPHYtYnRuIGNsYXNzPSJteC0xIiBAY2xpY2s9InJlc3RvcmVUZXh0Ij5SZXN0b3JlPC92LWJ0bj4gLS0+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDwvdi1jb2w+CiAgICA8L3YtY29udGFpbmVyPgoKICAgIDwhLS0gTWFrZSB0aGlzIGEgZGlhbG9nLi4udmFyaWFibGUgZGlhbG9nIC0tPgogICAgPHYtb3ZlcmxheSB0YWJpbmRleD0iMCIgQGtleWRvd24uZXNjPSJvdmVybGF5ViA9IGZhbHNlIgogICAgICAgIDp2YWx1ZT0ib3ZlcmxheVYiIDpsaWdodD0idHJ1ZSIgOmRhcms9ImZhbHNlIiB2LWlmPSJleHRfdGV4dC50YXNrLnZhcmlhYmxlcy5sZW5ndGggIT0gMCI+CiAgICAgICAgPHYtc2hlZXQgCiAgICAgICAgICAgIGVsZXZhdGlvbj0iNCIgd2lkdGg9IjUwMCIgCiAgICAgICAgICAgIGNsYXNzPSJwYS00IG1hLTIgbXQtMCBwdC0yIGQtZmxleCBmbGV4LWNvbHVtbiBqdXN0aWZ5LWZsZXgtc3RhcnQgYWxpZ24tZmxleC1zdGFydCByb3VuZGVkLWxnIj4KICAgICAgICAgICAgPHYtZm9ybSB2LW1vZGVsPSJ2YXJpYWJsZU9rIj4KICAgICAgICAgICAgPCEtLSBDbG9zZSBpY29uIC0tPgoKICAgICAgICAgICAgPCEtLSBEZWxldGUgdmFyaWFibGUgCiAgICAgICAgICAgIDx2LWJ0biAKICAgICAgICAgICAgICAgIHYtaWY9ImV4dF90ZXh0LnRhc2sudmFyaWFibGVzW2luZGV4Vl0uYWRkZWQiCiAgICAgICAgICAgICAgICBpY29uIEBjbGljaz0ib3ZlcmxheVYgPSBmYWxzZTsgcmVtb3ZlVmFyaWFibGUoaW5kZXhWKSIKICAgICAgICAgICAgICAgIGNsYXNzPSJjbG9zZS1idXR0b24gbXQtNCBtci0xNCBwYS0wIHNocmluayI+CiAgICAgICAgICAgICAgICA8di1pY29uIGNvbG9yPSJyZWQiPm1kaS1kZWxldGU8L3YtaWNvbj4KICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgLS0+CiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2IHYtaWY9InZhcmlhYmxlLmFkZGVkIiBjbGFzcz0ibWEtMiBtdC0zIGQtZmxleCBqdXN0aWZ5LXNwYWNlLWJldHdlZW4iPgogICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZCA6cnVsZXM9Ilt2ID0+ICh2LnRyaW0oKS5sZW5ndGggIT0gMCkgfHwgJ05hbWUgbXVzdCBoYXZlIGF0bGVhc3QgMSBjaGFyYWN0ZXInLCB2ID0+ICgvXlswLTlhLXpBLVpfXSskLy50ZXN0KHYpKSB8fCAnTmFtZSBtdXN0IGNvbnRhaW4gb25seSBsZXR0ZXJzLCBudW1iZXJzIGFuZCB1bmRlcnNjb3JlcyddIiBvdXRsaW5lZCBsYWJlbD0iTmFtZSIgZGVuc2Ugdi1tb2RlbD0idmFyaWFibGUubmFtZSI+PC92LXRleHQtZmllbGQ+CiAgICAgICAgICAgICAgICA8IS0tIDx2LWJ0biBwbGFpbiBpY29uIEBjbGljaz0ib3ZlcmxheVYgPSBmYWxzZSIgY2xhc3M9Im1sLTIgcGEtMCBzaHJpbmsiPgogICAgICAgICAgICAgICAgICAgIDx2LWljb24gY29sb3I9ImRhbmdlciI+bWRpLWNsb3NlPC92LWljb24+CiAgICAgICAgICAgICAgICA8L3YtYnRuPiAtLT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0ibWEtMiBtdC0zIGQtZmxleCBqdXN0aWZ5LXNwYWNlLWJldHdlZW4iIHYtaWY9IiF2YXJpYWJsZS5hZGRlZCI+IAogICAgICAgICAgICAgICAge3sgdmFyaWFibGUubmFtZS5sZW5ndGggIT0gMCA/IHZhcmlhYmxlLm5hbWUudG9TdHJpbmcoKS5zdWJzdHIoMSkgOiBudWxsfX0gCiAgICAgICAgICAgICAgICA8IS0tIDx2LWJ0biBwbGFpbiBpY29uIEBjbGljaz0ib3ZlcmxheVYgPSBmYWxzZSIgY2xhc3M9Im1sLTIgcGEtMCBzaHJpbmsiPgogICAgICAgICAgICAgICAgICAgIDx2LWljb24gY29sb3I9ImRhbmdlciI+bWRpLWNsb3NlPC92LWljb24+CiAgICAgICAgICAgICAgICA8L3YtYnRuPiAtLT4KICAgICAgICAgICAgPC9oMj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxwIGNsYXNzPSJtYS0yIj4gRGVmaW5pdGlvbiA8L3A+CiAgICAgICAgICAgIDx2LXRleHQtZmllbGQgCiAgICAgICAgICAgICAgICBsYWJlbD0iIiBwbGFjZWhvbGRlcj0iRS5nLjogKCAkYSAqIDIgKSArIDEiIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2LW1vZGVsPSJ2YXJpYWJsZS5kZWZpbml0b24iCiAgICAgICAgICAgICAgICBvdXRsaW5lZCBkZW5zZSBjbGFzcz0ic2hyaW5rIG14LTIiPiAKICAgICAgICAgICAgICAgIHt7IHZhcmlhYmxlLmRlZmluaXRpb24gfX0gCiAgICAgICAgICAgIDwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAKICAgICAgICAgICAgPHAgY2xhc3M9Im1hLTIgbXQtMCI+IFJhbmdlIHt7IHZhcmlhYmxlLnJhbmdlLmZ1bGxSYW5nZSgpIH19IDwvcD4KICAgICAgICAgICAgPHYtcm93IGNsYXNzPSJkLWZsZXggZmxleC1yb3cgZmxleC1ub3dyYXAgcHgtMyI+CiAgICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkIAogICAgICAgICAgICAgICAgICAgIGxhYmVsPSJTdGFydCIgdi1tb2RlbD0idmFyaWFibGUucmFuZ2Uuc3RhcnQiIAogICAgICAgICAgICAgICAgICAgIG91dGxpbmVkIGRlbnNlIGNsYXNzPSJzaHJpbmsgbXgtMiBtdC0zIj4KICAgICAgICAgICAgICAgIDwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZCAKICAgICAgICAgICAgICAgICAgICBsYWJlbD0iRW5kIiB2LW1vZGVsPSJ2YXJpYWJsZS5yYW5nZS5lbmQiIAogICAgICAgICAgICAgICAgICAgIG91dGxpbmVkIGRlbnNlIGNsYXNzPSJzaHJpbmsgbXgtMiBtdC0zIj4KICAgICAgICAgICAgICAgIDwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZCAKICAgICAgICAgICAgICAgICAgICBsYWJlbD0iU3RlcCIgdi1tb2RlbD0idmFyaWFibGUucmFuZ2Uuc3RlcCIKICAgICAgICAgICAgICAgICAgICBvdXRsaW5lZCBkZW5zZSBjbGFzcz0ic2hyaW5rIG14LTIgbXQtMyI+CiAgICAgICAgICAgICAgICA8L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgPC92LXJvdz4KCiAgICAgICAgICAgIDx2LXJvdyBjbGFzcz0iZC1mbGV4IGp1c3RpZnktc2VsZi1lbmQgbXgtMSI+CiAgICAgICAgICAgICAgICA8di1zcGFjZXI+PC92LXNwYWNlcj4KICAgICAgICAgICAgICAgIDx2LWJ0biBjb2xvcj0iYmxhY2siIGNsYXNzPSJteC0yIG1iLTIgbm8tdXBwZXJjYXNlIiBvdXRsaW5lZCB0ZXh0IEBjbGljaz0ib3ZlcmxheVY9IGZhbHNlIj4gQ2FuY2VsIDwvdi1idG4+CiAgICAgICAgICAgICAgICA8di1idG4gY29sb3I9InByaW1hcnkiIDpkaXNhYmxlZD0iIXZhcmlhYmxlT2siIGNsYXNzPSJteC0xIG1iLTIgbm8tdXBwZXJjYXNlIiBAY2xpY2s9InNldFZhcmlhYmxlSW5mbygpIj4gU2F2ZSA8L3YtYnRuPgogICAgICAgICAgICA8L3Ytcm93PgogICAgICAgICAgICA8L3YtZm9ybT4KICAgICAgICA8L3Ytc2hlZXQ+CiAgICA8L3Ytb3ZlcmxheT4KCiAgICA8IS0tIEFuc3dlciBvdmVybGF5IC0tPgogICAgPHYtb3ZlcmxheQogICAgICAgIDpsaWdodD0idHJ1ZSIgOmRhcms9ImZhbHNlIgogICAgICAgIDp2YWx1ZT0ib3ZlcmxheUEiIHYtaWY9ImV4dF90ZXh0LnRhc2suYW5zd2Vycy5sZW5ndGggIT0gMCI+CiAgICAgICAgPHYtc2hlZXQgZWxldmF0aW9uPSI0IiB3aWR0aD0iNTAwIiBoZWlnaHQ9IjgwdmgiCiAgICAgICAgY2xhc3M9InBhLTQgbWEtMiBtdC0wIHB0LTIgZC1mbGV4IGZsZXgtY29sdW1uIGp1c3RpZnktZmxleC1zdGFydCBhbGlnbi1mbGV4LXN0YXJ0IHJvdW5kZWQtbGcgb3ZlcmZsb3cteS1hdXRvIj4KICAgICAgICA8IS0tIENsb3NlIGljb24gLS0+CiAgICAgICAgPGgyIGNsYXNzPSJkLWZsZXgganVzdGlmeS1zcGFjZS1iZXR3ZWVuIG1hLTIgbXQtMyI+IAogICAgICAgICAgICB7eyBleHRfdGV4dC50YXNrLmFuc3dlcnNbaW5kZXhBXS5uYW1lIH19CiAgICAgICAgICAgIDx2LWJ0biBwbGFpbiBpY29uIEBjbGljaz0ib3ZlcmxheUEgPSBmYWxzZSIgY2xhc3M9Im10LTIgcGEtMCBtci1uMiBzaHJpbmsiPgogICAgICAgICAgICAgICAgPHYtaWNvbiBjb2xvcj0iZGFuZ2VyIj5tZGktY2xvc2U8L3YtaWNvbj4KICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICA8L2gyPgoKICAgICAgICA8cCBjbGFzcz0ibWEtMiBtdC0wIj4gUmFuZ2Uge3sgZXh0X3RleHQudGFzay5hbnN3ZXJzW2luZGV4QV0ucmFuZ2UuZnVsbFJhbmdlKCkgfX0gPC9wPgogICAgICAgIDx2LXJvdyBjbGFzcz0iZC1mbGV4IGZsZXgtcm93IGZsZXgtbm93cmFwIHB4LTMgc2hyaW5rIj4KICAgICAgICAgICAgPHYtdGV4dC1maWVsZCAKICAgICAgICAgICAgICAgIGxhYmVsPSJTdGFydCIgdi1tb2RlbD0iZXh0X3RleHQudGFzay5hbnN3ZXJzW2luZGV4QV0ucmFuZ2Uuc3RhcnQiIAogICAgICAgICAgICAgICAgb3V0bGluZWQgZGVuc2UgY2xhc3M9InNocmluayBteC0yIG10LTMiPgogICAgICAgICAgICA8L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgPHYtdGV4dC1maWVsZCAKICAgICAgICAgICAgICAgIGxhYmVsPSJFbmQiIHYtbW9kZWw9ImV4dF90ZXh0LnRhc2suYW5zd2Vyc1tpbmRleEFdLnJhbmdlLmVuZCIgCiAgICAgICAgICAgICAgICBvdXRsaW5lZCBkZW5zZSBjbGFzcz0ic2hyaW5rIG14LTIgbXQtMyI+CiAgICAgICAgICAgIDwvdi10ZXh0LWZpZWxkPgogICAgICAgIDwvdi1yb3c+CgogICAgICAgIDxwIGNsYXNzPSJtYS0yIG10LTAiPkNvcnJlY3Q8L3A+CiAgICAgICAgPGRpdiAKICAgICAgICAgICAgY2xhc3M9ImQtZmxleCBmbGV4LXJvdyIgCiAgICAgICAgICAgIHYtZm9yPSIoZWwsIGkpIGluIGV4dF90ZXh0LnRhc2suYW5zd2Vyc1tpbmRleEFdLmNvcnJlY3QiIDprZXk9IidlbF9jJyArIGkiPgogICAgICAgICAgICA8di10ZXh0LWZpZWxkIAogICAgICAgICAgICAgICAgbGFiZWw9IiIgCiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iRS5nLjogKCAkYSAqIDIgKSArIDEiIAogICAgICAgICAgICAgICAgdi1tb2RlbD0iZXh0X3RleHQudGFzay5hbnN3ZXJzW2luZGV4QV0uY29ycmVjdFtpXSIgCiAgICAgICAgICAgICAgICBvdXRsaW5lZCBkZW5zZSBjbGFzcz0ibXgtMiBteS0wIj4gCiAgICAgICAgICAgICAgICB7eyBlbCB9fQogICAgICAgICAgICA8L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgPHYtYnRuCiAgICAgICAgICAgICAgICBAY2xpY2s9InJlbW92ZUNvcnJlY3QoaSkiIAogICAgICAgICAgICAgICAgaWNvbiBwbGFpbiBjb2xvcj0icmVkIiBjbGFzcz0ibXgtMiI+CiAgICAgICAgICAgICAgICA8di1pY29uPm1kaS1kZWxldGUtZW1wdHk8L3YtaWNvbj4KICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8di1idG4gZGVwcmVzc2VkIGNsYXNzPSJteC0yIiBAY2xpY2s9ImFkZENvcnJlY3QiPgogICAgICAgICAgICA8di1pY29uPm1kaS1wbHVzPC92LWljb24+CiAgICAgICAgICAgIEFkZCBjb3JyZWN0IGFuc3dlcgogICAgICAgIDwvdi1idG4+CgogICAgICAgIAogICAgICAgIDxwIGNsYXNzPSJtYS0yIj5JbmNvcnJlY3Q8L3A+CiAgICAgICAgPGRpdiAKICAgICAgICAgICAgY2xhc3M9ImQtZmxleCBmbGV4LXJvdyIgCiAgICAgICAgICAgIHYtZm9yPSIoZWwsIGkpIGluIGV4dF90ZXh0LnRhc2suYW5zd2Vyc1tpbmRleEFdLmluY29ycmVjdCIgOmtleT0iJ2VsX2ljJyArIGkiPgogICAgICAgICAgICA8di10ZXh0LWZpZWxkIAogICAgICAgICAgICAgICAgbGFiZWw9IiIgCiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iRS5nLjogKCAkYSAqIDIgKSArIDEiIAogICAgICAgICAgICAgICAgdi1tb2RlbD0iZXh0X3RleHQudGFzay5hbnN3ZXJzW2luZGV4QV0uaW5jb3JyZWN0W2ldIiAKICAgICAgICAgICAgICAgIG91dGxpbmVkIGRlbnNlIGNsYXNzPSJteC0yIG15LTAiPiAKICAgICAgICAgICAgICAgIHt7IGV4dF90ZXh0LnRhc2suYW5zd2Vyc1tpbmRleEFdLmluY29ycmVjdCB9fQogICAgICAgICAgICA8L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgPHYtYnRuIAogICAgICAgICAgICAgICAgQGNsaWNrPSJyZW1vdmVJbmNvcnJlY3QoaSkiCiAgICAgICAgICAgICAgICBpY29uIHBsYWluIGNvbG9yPSJyZWQiIGNsYXNzPSJteC0yIj4KICAgICAgICAgICAgICAgIDx2LWljb24+bWRpLWRlbGV0ZS1lbXB0eTwvdi1pY29uPgogICAgICAgICAgICA8L3YtYnRuPgogICAgICAgIDwvZGl2PgogICAgICAgIDx2LWJ0biBkZXByZXNzZWQgY2xhc3M9Im14LTIiIEBjbGljaz0iYWRkSW5jb3JyZWN0Ij4KICAgICAgICAgICAgPHYtaWNvbj5tZGktcGx1czwvdi1pY29uPgogICAgICAgICAgICBBZGQgaW5jb3JyZWN0IGFuc3dlcgogICAgICAgIDwvdi1idG4+CiAgICAgICAgCiAgICAgICAgPHYtcm93IGNsYXNzPSJkLWZsZXgganVzdGlmeS1zZWxmLWVuZCBteC0xIj4KICAgICAgICAgICAgPHYtc3BhY2VyPjwvdi1zcGFjZXI+CiAgICAgICAgICAgIDx2LWJ0biBjb2xvcj0iYmxhY2siIGNsYXNzPSJteC0yIG15LTQgbXQtNiIgb3V0bGluZWQgdGV4dCBAY2xpY2s9Im92ZXJsYXlBPSBmYWxzZSI+IENhbmNlbCA8L3YtYnRuPgogICAgICAgICAgICA8di1idG4gZGFyayBjb2xvcj0icHJpbWFyeSIgY2xhc3M9Im14LTEgbXktNCBtdC02IiBAY2xpY2s9IlRPRE87IG92ZXJsYXlTYXZlID0gZmFsc2UiPiBTYXZlIDwvdi1idG4+CiAgICAgICAgPC92LXJvdz4KCiAgICAgICAgPC92LXNoZWV0PgogICAgPC92LW92ZXJsYXk+CgogICAgPCEtLSBBbnN3ZXIgdHlwZSBvcHRpb25zIGRpYWxvZyAtLT4KICAgIDx2LWRpYWxvZyB2LW1vZGVsPSJvdmVybGF5U2F2ZSIgd2lkdGg9IjQ1MCIgOnJldGFpbi1mb2N1cz0iZmFsc2UiPgogICAgICAgIDx2LWNhcmQgY2xhc3M9ImQtZmxleCBmbGV4LWNvbHVtbiByb3VuZGVkLWxnIHB0LTIiPgogICAgICAgICAgICA8cCBjbGFzcz0icGItNCBteS0yIGZvbnQtd2VpZ2h0LWJvbGQgdGV4dC1oNSBhbGlnbi1zZWxmLWNlbnRlciI+IFRhc2sgZGV0YWlsczwvcD4KCiAgICAgICAgICAgIDwhLS0gU2V0IHRhc2sgbmFtZSAtLT4KICAgICAgICAgICAgPHYtdGV4dC1maWVsZCAKICAgICAgICAgICAgICAgIGNsYXNzPSJweC00IiB2LW1vZGVsPSJ0YXNrTmFtZSIgb3V0bGluZWQgbGFiZWw9IlRhc2sgbmFtZSIgcGxhY2Vob2xkZXI9IkVudGVyIHRhc2sgbmFtZSI+CiAgICAgICAgICAgIDwvdi10ZXh0LWZpZWxkPgoKICAgICAgICAgICAgPCEtLSBTZWxlY3QgZ3JhZGUgLS0+CiAgICAgICAgICAgIDx2LXNlbGVjdCAKICAgICAgICAgICAgICAgIGNsYXNzPSJweC00IiA6aXRlbXM9IiRzdG9yZS5zdGF0ZS50ZXN0LmdyYWRlcyIgdi1tb2RlbD0idGFza0dyYWRlIiBvdXRsaW5lZCBsYWJlbD0iR3JhZGUiPgogICAgICAgICAgICA8L3Ytc2VsZWN0PgoKICAgICAgICAgICAgPCEtLSBTZXQgY2F0ZWdvcmllcyB0byB0YXNrIC0tPgogICAgICAgICAgICA8di1jb21ib2JveCBjbGFzcz0icHgtNCIgbGFiZWw9IkNhdGVnb3JpZXMiIHYtbW9kZWw9InNlbGVjdGVkVGFza0NhdGVnb3JpZXMiIAogICAgICAgICAgICAgICAgOml0ZW1zPSJ0YXNrQ2F0ZWdvcmllcyIgbXVsdGlwbGUgY2hpcHMgb3V0bGluZWQ+CiAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OnNlbGVjdGlvbj0iZGF0YSI+CiAgICAgICAgICAgICAgICAgICAgPHYtY2hpcCBjb2xvcj0icHJpbWFyeSIgY2xhc3M9InBhLTIiIHYtYmluZD0iZGF0YS5hdHRycyI+CiAgICAgICAgICAgICAgICAgICAge3sgZGF0YS5pdGVtIH19CiAgICAgICAgICAgICAgICAgICAgPC92LWNoaXA+CiAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICA8L3YtY29tYm9ib3g+CgogICAgICAgICAgICA8di1kaXZpZGVyPjwvdi1kaXZpZGVyPgoKICAgICAgICAgICAgPHYtY2FyZC1hY3Rpb25zPgogICAgICAgICAgICAgICAgPHYtc3BhY2VyPjwvdi1zcGFjZXI+CiAgICAgICAgICAgICAgICA8di1idG4gY29sb3I9ImJsYWNrIiBvdXRsaW5lZCB0ZXh0IEBjbGljaz0ib3ZlcmxheVNhdmU9IGZhbHNlIj4gQ2FuY2VsIDwvdi1idG4+CiAgICAgICAgICAgICAgICA8di1idG4gZGFyayBjb2xvcj0icHJpbWFyeSIgQGNsaWNrPSJzYXZlVGV4dCgpOyBvdmVybGF5U2F2ZSA9IGZhbHNlIj4gU2F2ZSA8L3YtYnRuPgogICAgICAgICAgICA8L3YtY2FyZC1hY3Rpb25zPgogICAgICAgICAgICAKICAgICAgICA8L3YtY2FyZD4KICAgIDwvdi1kaWFsb2c+CgogICAgPCEtLSBUYXNrIGNyZWF0aW9uIGV4cGxhbmF0aW9uIGRpYWxvZyAtLT4KICAgIDx2LWRpYWxvZyB2LW1vZGVsPSJoZWxwRGlhbG9nIiB3aWR0aD0iODB2dyIgOnJldGFpbi1mb2N1cz0iZmFsc2UiPgogICAgICAgIDx2LWNhcmQgY2xhc3M9ImQtZmxleCBmbGV4LWNvbHVtbiByb3VuZGVkLWxnIHB0LTIiPgogICAgICAgICAgICA8di1jYXJkLXRpdGxlIGNsYXNzPSJ0ZXh0LWg1IGQtZmxleCBqdXN0aWZ5LXNwYWNlLWJldHdlZW4iPiAKICAgICAgICAgICAgICAgIEhvdyB0byB3cml0ZSB0YXNrcz8gCiAgICAgICAgICAgICAgICA8di1idG4gcGxhaW4gaWNvbiBAY2xpY2s9ImhlbHBEaWFsb2cgPSBmYWxzZSIgY2xhc3M9InBhLTAgbXItbjIgc2hyaW5rIj4KICAgICAgICAgICAgICAgIDx2LWljb24gY29sb3I9ImRhbmdlciI+bWRpLWNsb3NlPC92LWljb24+CiAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgIDwvdi1jYXJkLXRpdGxlPgogICAgICAgICAgICA8di1jYXJkLXRleHQ+IFRhc2sgY3JlYXRpb24gY2FuIGJlIGRpdmlkZWQgaW50byBmb3VyIHBhcnRzLiBFYWNoIHBhcnQgaXMgZXhwbGFpbmVkIGJlbG93IGFuZCBjYW4gYmUgb2JzZXJ2ZWQgaW4gdGhlIGV4YW1wbGUgdGFza3MuIDxicj4KICAgICAgICAgICAgVGhlIGV4YW1wbGUgdGFza3MgY2FuIGJlIGZvdW5kIGluIHRoZSA8c3BhbiBjbGFzcz0iZm9udC13ZWlnaHQtYm9sZCI+WW91ciB0YXNrczwvc3Bhbj4gcGFnZS48L3YtY2FyZC10ZXh0PgogICAgICAgICAgICA8di1jb250YWluZXIgY2xhc3M9InB5LTAgbXktMCI+CiAgICAgICAgICAgICAgICA8di1yb3cgY2xhc3M9InB5LTAgbXktMCI+CiAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjYiIGNsYXNzPSJweS0wIG15LTAiPgogICAgICAgICAgICAgICAgICAgICAgICA8di1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGV4dC11bmRlcmxpbmUgdGV4dC1ib2R5LTEiPjEuIFRhc2sgdGV4dCA8L3NwYW4+ICA8YnI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBZb3Ugc3RhcnQgYnkgd3JpdGluZyB0aGUgdGV4dCB0aGF0IGRlc2NyaWJlcyB0aGUgcHJvYmxlbSwgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnaXZlcyBpbnN0cnVjdGlvbnMgYW5kIHByb3ZpZGVzIGNvbnRleHQuIDxicj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEl0IGNhbiBjb250YWluIGFueSBhbW91bnQgb2YgY2hhcmFjdGVycyAoaW5jbHVkaW5nIHplcm8pIGFuZCA8c3BhbiBjbGFzcz0iZm9udC13ZWlnaHQtYm9sZCI+VmFyaWFibGVzPC9zcGFuPi4gPGJyPgogICAgICAgICAgICAgICAgICAgICAgICA8L3YtY2FyZC10ZXh0PgogICAgICAgICAgICAgICAgICAgICAgICA8di10ZXh0YXJlYSByZWFkb25seSB0ZXh0LW5hcnJvdyBzcGVsbGNoZWNrPSJmYWxzZSIgYmFja2dyb3VuZC1jb2xvcj0id2hpdGUiIGNvbG9yPSJibGFjayIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJKYW1pZSBoYXMgYSBiaWcgaG91c2UgYW5kIGEgYmFybi4gSW4gaGlzIGJhcm4gaGUgaGFzICR4IGhvcnNlcyBhbmQgJHkgY293cy4gSGUgc2VsbHMgdHdvIGNvd3MgYW5kIG9uZSBob3JzZS4nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InRleHQtaDMgcGItMiBteC00IiBzb2xvIG5vLXJlc2l6ZSBoaWRlLWRldGFpbHMgcm93cz0iNCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdi10ZXh0YXJlYT4KICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSI2IiBjbGFzcz0icHktMCBteS0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtY2FyZC10ZXh0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtdW5kZXJsaW5lIHRleHQtYm9keS0xIj4yLiBRdWVzdGlvbnM8L3NwYW4+IDxicj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoZW4geW91IGNvbnRpbnVlIGJ5IHdyaXRpbmcgcXVlc3Rpb25zIHRvIHdoaWNoIHlvdSBleHBlY3QgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5b3VyIHN0dWRlbnRzIHRvIGtub3cgdGhlIGFuc3dlci4gPGJyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgQSB0YXNrIGNhbiBoYXZlIGFuIHVubGltaXRlZCBudW1iZXIgb2YgcXVlc3Rpb25zLiA8YnI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBRdWVzdGlvbnMgY2FuIGNvbnRhaW4gYW55IGFtb3VudCBvZiBjaGFyYWN0ZXJzLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJmb250LXdlaWdodC1ib2xkIj5WYXJpYWJsZXM8L3NwYW4+IGFuZCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJmb250LXdlaWdodC1ib2xkIj5tdXN0IGNvbnRhaW4gb25lIG9yIG1vcmUgQW5zd2Vyczwvc3Bhbj4uIDxicj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQgcmVhZG9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iSG93IG1hbnkgaG9yc2VzIGRvZXMgSmFtaWUgaGF2ZT8gQGhvcnNlcyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb2xvIGhpZGUtZGV0YWlscyBjb2xvcj0iZXJyb3IiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im15LTEgZC1mbGV4IGZsZXgtZ3Jvdy0xIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmFwcGVuZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbiBjb2xvcj0iZXJyb3IiPm1kaS1kZWxldGUtZW1wdHk8L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LXRleHQtZmllbGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiIGNsYXNzPSJweS0wIG15LTAiPgogICAgICAgICAgICAgICAgICAgICAgICA8di1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGV4dC11bmRlcmxpbmUgdGV4dC1ib2R5LTEiPjMuIFZhcmlhYmxlcyA8L3NwYW4+ICA8YnI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBZnRlciB3cml0aW5nIGRvd24geW91ciBxdWVzdGlvbnMgaXQncyB0aW1lIHRvIGRlZmluZSBWYXJpYWJsZXMuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBWYXJpYWJsZXMgcmVwcmVzZW50IHRoZSBjb3JlIG9mIHRhc2sgY3JlYXRpb24uIDxicj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEEgVmFyaWFibGUgaXMgaWRlbnRpZmllZCB3aXRoIHRoZSA8c3BhbiBjbGFzcz0iZm9udC13ZWlnaHQtYm9sZCI+JDwvc3Bhbj4gKGRvbGxhciBzaWduKSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0aW5nIGNoYXJhY3RlciBhbmQgY2FuIGJlIGZvbGxvd2VkIGJ5IGxldHRlcnMsIG51bWJlcnMgYW5kIHVuZGVyc2NvcmVzLiA8YnI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBJdCBhY3RzIGFzIGEgcGxhY2Vob2xkZXIgZm9yIGFuIGFjdHVhbCB2YWx1ZS4gPGJyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgQWxsIHRoZXNlIHJlcHJlc2VudCB2YWxpZCBWYXJpYWJsZXM6IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImZvbnQtd2VpZ2h0LWJvbGQiPiAkeCwgJHkxLCAkbmV3X3ZhciwgJGxvbmdfdmFyaWFibGVfbmFtZTEyMywgLi4uPC9zcGFuPiA8YnI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGZXcgaW1wb3J0YW50IHRoaW5ncyB0byBrbm93IGFib3V0IDxzcGFuIGNsYXNzPSJmb250LXdlaWdodC1ib2xkIj4gVmFyaWFibGVzOiA8L3NwYW4+IDxicj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPSJ0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZSI+RWFjaCBvY2N1cnJlbmNlPC9zcGFuPiBvZiBhIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImZvbnQtd2VpZ2h0LWJvbGQiPlZhcmlhYmxlPC9zcGFuPiBpbiB0aGUgdGFzayB0ZXh0IG9yIHF1ZXN0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT0idGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmUiPndpbGwgYmUgcmVwbGFjZWQgYnkgYW4gYWN0dWFsIHZhbHVlPC9zcGFuPiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4gdGhlIHRhc2sgaXMgdXNlZCBpbiBhIHRlc3QgbGF0ZXIgb24uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGV4dC11bmRlcmxpbmUiPlZhcmlhYmxlczwvc3Bhbj4gdGhhdCBhcmUgdXNlZCA8c3BhbiBjbGFzcz0idGV4dC11bmRlcmxpbmUiPiBpbiB0aGUgdGFzayB0ZXh0IGFyZSBhdXRvbWF0aWNhbGx5IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkZWQgaW50byB0aGUgbGlzdCBvZiBWYXJpYWJsZXM8L3NwYW4+IGFuZCB0aGF0IGlzIHdoeSBpdCdzIHJlY29tbWVuZGVkIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gc3RhcnQgYnkgZGVmaW5pbmcgdGhlIHRhc2sgdGV4dCBmaXJzdC4gPGJyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9ImZvbnQtc3R5bGU6IGl0YWxpYyI+RXhhbXBsZTogSWYgVGFzayB0ZXh0ID0gIkphbWllIGhhcyAkeCBob3JzZXMiIHRoZW4gVmFyaWFibGVzID0gIiR4Ijwvc3Bhbj4gPGJyPjxicj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFlvdSBjYW4gY29uZmlndXJlIHdoYXQgdmFsdWVzIHdpbGwgYmUgc3VzYnN0aXR1dGVkIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGEgZ2l2ZW4gdmFyaWFibGUgYnkgY2xpY2tpbmcgb24gYSA8di1jaGlwIGxhYmVsIGNvbG9yPSJwcmltYXJ5Ij4gVmFyaWFibGUgPC92LWNoaXA+IHVuZGVyIHRoZSBWYXJpYWJsZXMgc2VjdGlvbiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWNoIG9wZW5zIGEgZGlhbG9nIHdoZXJlIHlvdSBjYW4gc2V0IHRoZSBmb2xsb3dpbmcgcHJvcGVydGllcy4gPGJyPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXJvdz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSI2IiBjbGFzcz0iZC1mbGV4IGp1c3RpZnktY2VudGVyIGFsaWduLWNlbnRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1zaGVldCBlbGV2YXRpb249IjMiIHdpZHRoPSI0MDAiIGNsYXNzPSJwYS00IG1hLTIgbXQtMCBwdC0yIGQtZmxleCBmbGV4LWNvbHVtbiBqdXN0aWZ5LWZsZXgtc3RhcnQgYWxpZ24tZmxleC1zdGFydCByb3VuZGVkLWxnIj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJtYS0yIG10LTMiPiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmFyaWFibGUgbmFtZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Im1hLTIiPiBEZWZpbml0aW9uIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD0iIiBwbGFjZWhvbGRlcj0iRS5nLjogKCAkeCAqIDIgKSArIDEiIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRsaW5lZCBkZW5zZSBjbGFzcz0ic2hyaW5rIG14LTIiPiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibWEtMiBtdC0wIj4gUmFuZ2UgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXJvdyBjbGFzcz0iZC1mbGV4IGZsZXgtcm93IGZsZXgtbm93cmFwIHB4LTMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkIHJlYWRvbmx5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD0iU3RhcnQiIHBsYWNlaG9sZGVyPSIxIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0bGluZWQgZGVuc2UgY2xhc3M9InNocmluayBteC0yIG10LTMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZCByZWFkb25seQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9IkVuZCIgcGxhY2Vob2xkZXI9IjEwMCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dGxpbmVkIGRlbnNlIGNsYXNzPSJzaHJpbmsgbXgtMiBtdC0zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LXRleHQtZmllbGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQgcmVhZG9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPSJTdGVwIiBwbGFjZWhvbGRlcj0iRS5nLjogMTAwLCAxLCAwLjEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRsaW5lZCBkZW5zZSBjbGFzcz0ic2hyaW5rIG14LTIgbXQtMyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Ytc2hlZXQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjYiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJmb250LXdlaWdodC1ib2xkIHRleHQtdW5kZXJsaW5lIj5EZWZpbml0aW9uPC9zcGFuPiAtIGEgcHJlZGVmaW5lZCB2YWx1ZSBvciBleHByZXNzaW9uIHRvIGJlIGNhbGN1bGF0ZWQuIDxicj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEV4cHJlc3Npb25zIGNhbiBjb250YWluIG90aGVyIFZhcmlhYmxlcy48YnI+ICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEV4YW1wbGU6IFdlIGhhdmUgYSB2YXJpYWJsZSBuYW1lZCAkeCwgaWYgd2Ugc2V0IGl0cyBkZWZpbml0b24gdG86IDxicj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+IjIiIC0gZWFjaCBvY2N1cnJlbmNlIG9mICR4IGluIGEgdGV4dCB3aWxsIGJlIHJlcGxhY2VkIGJ5IHRoZSB2YWx1ZSAiMiIgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+IiR5ICsgMiIgLSBlYWNoIG9jY3VycmVuY2Ugb2YgJHggaW4gYSB0ZXh0IHdpbGwgYmUgcmVwbGFjZWQgYnkgdGhlIHZhbHVlIHdoaWNoIHdpbGwgYmUgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnN0aXR1dGVkIGZvciB0aGUgdmFyaWFibGUgJHkgcGx1cyAyLCB0aGF0IG1lYW5zIGlmICR5IGlzIDIsICR4IHdpbGwgYmUgcmVwbGFjZWQgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ5IHRoZSB2YWx1ZSA0IDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPiJzaW4oJHopICsgMiIgLSBlYWNoIG9jY3VycmVuY2Ugb2YgJHggd2lsbCBiZSByZXBsYWNlZCBieSB0aGUgc2ludXMgdmFsdWUgb2YgJHogKyAyPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZm9udC13ZWlnaHQtYm9sZCB0ZXh0LXVuZGVybGluZSI+UmFuZ2U8L3NwYW4+IC0gYSByYW5kb21seSBzZWxlY3RlZCBudW1iZXIgd2l0aGluIHRoZSBzcGVjaWZpZWQgcmFuZ2UuIDxicj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJhbmdlIGlzIGRlZmluZWQgYnkgYSBTdGFydCwgRW5kIGFuZCBTdGVwIHZhbHVlLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhlIFN0YXJ0IGFuZCBFbmQgdmFsdWVzIGRlZmluZSB0aGUgbGltaXRzIG9mIHRoZSByYW5nZS4gCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaGUgU3RlcCB2YWx1ZSBkZWZpbmVzIHRoZSBwcmVjaXNpb24gb2YgdGhlIHJlc3VsdGluZyBudW1iZXIuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT0iZm9udC1zdHlsZTogaXRhbGljIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEV4YW1wbGU6IFNldHRpbmcgdGhlIGZvbGxvd2luZyBjb25maWd1cmF0aW9uICgxLCAxMCwgMC4xKShzdGFydCwgZW5kLCBzdGVwKSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbGwgeWllbGQgbnVtYmVycyBpbiB0aGUgcmFuZ2UgMSwgMTAgKGluY2x1ZGVkKSByb3VuZGVkIHRvIG5lYXJlc3QgZGVjaW1hbCB2YWx1ZSB3aXRoIHRoZSBzcGVjaWZpZWQgcHJlY2lzaW9uLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgKDEuMSwgMi4zLCA1LjAsIDMuOCwgLi4uKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LXJvdz4KICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNhcmQtdGV4dD4KICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgY2xhc3M9InB5LTAgbXktMCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNhcmQtdGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXh0LXVuZGVybGluZSB0ZXh0LWJvZHktMSI+NC4gQW5zd2VycyA8L3NwYW4+ICA8YnI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBZnRlciBkZWZpbmluZyB0aGUgbmVjZXNzYXJ5IHZhcmlhYmxlcyB5b3UgY2FuIG1vdmUgb250byBkZWZpbmluZyBBbnN3ZXJzLiA8YnI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBbnN3ZXJzIGFyZSBpZGVudGlmaWVkIGJ5IHRoZSA8c3BhbiBjbGFzcz0iZm9udC13ZWlnaHQtYm9sZCI+QDwvc3Bhbj4gKGF0KSBzdGFydGluZyBjaGFyYWN0ZXIsIHdoaWNoIGNhbiBiZSBmb2xsb3dlZCBieSBsZXR0ZXJzLCBudW1iZXJzIGFuZCB1bmRlcnNjb3JlcyAoc2FtZSBhcyBWYXJpYWJsZXMpLiA8YnI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBbGwgdGhlc2UgcmVwcmVzZW50IHZhbGlkIEFuc3dlcnM6IDxzcGFuIGNsYXNzPSJmb250LXdlaWdodC1ib2xkIj4gQGFuc3dlciwgQGhvcnNlX2NvdW50LCBAcmVzdWx0MSwgLi4uIDwvc3Bhbj4gPGJyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgSXQgc2VydmUgYXMgYSB3YXkgdG8gaWRlbnRpZnkgd2hpY2ggYW5zd2VyIG9wdGlvbnMgc2hvdWxkIGJlbG9uZyB0byBhIGdpdmVuIHF1ZXN0aW9uLiA8YnI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbiB0aGUgYWN0dWFsIHRhc2ssIHRoZSBBbnN3ZXIgaXMgbm90IHZpc2libGUgaW4gdGhlIHRleHQuIDxicj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFuIEFuc3dlciBzaG91bGQgYWx3YXlzIGJlIHVzZWQgaW4gYSBxdWVzdGlvbi4gQWZ0ZXIgc3BlY2lmeWluZyBhbiBBbnN3ZXIgaW4gYSBxdWVzdGlvbiBpdCBpcyBhZGRlZCB1bmRlciB0aGUgQW5zd2VycyBzZWN0aW9uLiA8YnI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBCeSBjbGlja2luZyBvbiBhbiA8di1jaGlwIGxhYmVsIGNvbG9yPSJwcmltYXJ5Ij4gQW5zd2VyIDwvdi1jaGlwPiB5b3Ugb3BlbiBhIGRpYWxvZyB3aXRoIHRoZSBmb2xsb3dpbmcgb3B0aW9ucy4gPGJyPjxicj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1yb3c+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iNiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImZvbnQtd2VpZ2h0LWJvbGQgdGV4dC11bmRlcmxpbmUiPlJhbmdlPC9zcGFuPiAtIGRlZmluZXMgdGhlIGxpbWl0cyBvZiB0aGUgZ2VuZXJhdGVkIGNvcnJlY3QgYW5zd2VyLiA8YnI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBbGwgZ2VuZXJhdGVkIGNvcnJlY3QgYW5zd2VycyBtdXN0IGNvbmZpbmUgaW50byB0aGUgZGVmaW5lZCBsaW1pdHMuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBXaGVuIGxlZnQgZW1wdHksIG5vIHJlc3RyaWN0aW9ucyB3aWxsIGFwcGx5IHRvIHRoZSBnZW5lcmF0ZWQgYW5zd2Vycy48YnI+PGJyPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJmb250LXdlaWdodC1ib2xkIHRleHQtdW5kZXJsaW5lIj5Db3JyZWN0PC9zcGFuPjxicj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEluIHRoaXMgc2VjdGlvbiB5b3UgZGVmaW5lIHRoZSB2YWx1ZSBvciBleHByZXNzaW9uIHRoYXQgcmVwcmVzZW50cyB0aGUgY29ycmVjdCBhbnN3ZXIgb3IgYW5zd2Vycy4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBleHByZXNzaW9uIHNob3VsZCBjb3JyZXNwb25kIHRvIHRoZSBlcXVhdGlvbiB0aGF0IHlpZWxkcyB0aGUgY29ycmVjdCBhbnN3ZXIgdG8gdGhlIHF1ZXN0aW9uIGFza2VkLjxicj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFlvdSBjYW4gdXNlIFZhcmlhYmxlcyB0byBidWlsZCB0aGUgZXhwcmVzc2lvbiwgb3IgdXNlIHN0YXRpYyB2YWx1ZXMuPGJyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9ImZvbnQtc3R5bGU6IGl0YWxpYyI+IEZvbGxvd2luZyB0aGUgZXhhbXBsZSBwcm9ibGVtLCB0aGUgZXF1YXRpb24gJHggLSAxLCB3b3VsZCB5aWVsZCB0aGUgY29ycmVjdCBhbnN3ZXIgb3B0aW9uIHRvIHRoZSBxdWVzdGlvbiAnSG93IG1hbnkgaG9yc2VzIGRvZXMgSmFtaWUgaGF2ZT8nPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyPjxicj4KCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImZvbnQtd2VpZ2h0LWJvbGQgdGV4dC11bmRlcmxpbmUiPkluY29ycmVjdDwvc3Bhbj48YnI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbiB0aGlzIHNlY3Rpb24geW91IGRlZmluZSB0aGUgdmFsdWVzIG9yIGV4cHJlc3Npb25zIHRoYXQgcmVwcmVzZW50IHRoZSBpbmNvcnJlY3QgYW5zd2Vycy4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBleHByZXNzaW9ucyBjYW4gaW5jbHVkZSBlcXVhdGlvbnMgdGhhdCB5aWVsZCBhbiBhbnN3ZXIgd2l0aCBhbiBlcnJvciB0aGUgc3R1ZGVudCBjb3VsZCBoYXZlIG1hZGUuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBZb3UgY2FuIHVzZSBWYXJpYWJsZXMgdG8gYnVpbGQgdGhlIGV4cHJlc3Npb24sIG9yIHVzZSBzdGF0aWMgdmFsdWVzLjxicj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPSJmb250LXN0eWxlOiBpdGFsaWMiPiBGb2xsb3dpbmcgdGhlIGV4YW1wbGUgcHJvYmxlbSwgdGhlIGVxdWF0aW9uICR4IC0gMiwgd291bGQgeWllbGQgYW4gaW5jb3JyZWN0IGFuc3dlciBvcHRpb24gdG8gdGhlIHF1ZXN0aW9uICdIb3cgbWFueSBob3JzZXMgZG9lcyBKYW1pZSBoYXZlPycuICdTaW11bGF0aW5nJyBhIGxlc3MgYXRlbnRpdmUgc3R1ZGVudCB0aGF0IG1peGVzIHVwIHRoZSBudW1iZXIgb2Ygc29sZCBob3JzZXMgd2l0aCB0aGUgbnVtYmVyIG9mIHNvbGQgY293cy48YnI+PGJyPiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0YXRpYyB2YWx1ZXMgY2FuIGJlIHVzZWQgdG8gY3JlYXRlIHRhc2tzIHdpdGggcXVlc3Rpb25zIHRoYXQgZm9jdXMgb24gdGVzdGluZyB0aGUgc3R1ZGVudHMga25vd2xlZGdlIGFib3V0IGNlcnRhaW4gZmFjdHMgb3IgZGVmaW5pdGlvbnMuIDxicj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRhc2sgJ0V4YW1wbGUyIC0gU3RhdGljJyBkZW1vbnN0cmF0ZXMgc3VjaCBhIHRhc2suCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSI2IiBjbGFzcz0iZC1mbGV4IGp1c3RpZnktY2VudGVyIGFsaWduLWNlbnRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1zaGVldCBlbGV2YXRpb249IjMiIHdpZHRoPSI1MDAiIGhlaWdodD0iNTAwcHgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InBhLTQgbWEtMiBtdC0wIHB0LTIgZC1mbGV4IGZsZXgtY29sdW1uIGp1c3RpZnktZmxleC1zdGFydCBhbGlnbi1mbGV4LXN0YXJ0IHJvdW5kZWQtbGcgb3ZlcmZsb3cteS1hdXRvIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9Im1hLTIgbXQtMyI+IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBbnN3ZXIgbmFtZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDI+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJtYS0yIG10LTAiPiBSYW5nZSA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtcm93IGNsYXNzPSJkLWZsZXggZmxleC1yb3cgZmxleC1ub3dyYXAgcHgtMyBzaHJpbmsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkIHJlYWRvbmx5IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9IlN0YXJ0IiBwbGFjZWhvbGRlcj0iMTAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRsaW5lZCBkZW5zZSBjbGFzcz0ic2hyaW5rIG14LTIgbXQtMyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkIHJlYWRvbmx5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD0iRW5kIiBwbGFjZWhvbGRlcj0iMTAwIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0bGluZWQgZGVuc2UgY2xhc3M9InNocmluayBteC0yIG10LTMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Ytcm93PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibWEtMiBtdC0wIj5Db3JyZWN0PC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCBmbGV4LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD0iIiBwbGFjZWhvbGRlcj0iJHggLSAxIiBvdXRsaW5lZCBkZW5zZSBjbGFzcz0ibXgtMiBteS0wIj4gCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1idG4gaWNvbiBwbGFpbiBjb2xvcj0icmVkIiBjbGFzcz0ibXgtMiI+PHYtaWNvbj5tZGktZGVsZXRlLWVtcHR5PC92LWljb24+PC92LWJ0bj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1idG4gZGVwcmVzc2VkIGNsYXNzPSJteC0yIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbj5tZGktcGx1czwvdi1pY29uPkFkZCBjb3JyZWN0IGFuc3dlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1idG4+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJtYS0yIj5JbmNvcnJlY3Q8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImQtZmxleCBmbGV4LXJvdyIgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtZm9yPSIoZWwsIGkpIGluIFsnJHggLSAyJywgJ0UuZy46ICR4ICsgMiwgUHl0aGFnb3JhcyddIiA6a2V5PSInZWxfaWMnICsgaSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD0iIiByZWFkb25seQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnBsYWNlaG9sZGVyPSJlbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dGxpbmVkIGRlbnNlIGNsYXNzPSJteC0yIG15LTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtYnRuIGljb24gcGxhaW4gY29sb3I9InJlZCIgY2xhc3M9Im14LTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbj5tZGktZGVsZXRlLWVtcHR5PC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtYnRuIGRlcHJlc3NlZCBjbGFzcz0ibXgtMiIgQGNsaWNrPSJhZGRJbmNvcnJlY3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uPm1kaS1wbHVzPC92LWljb24+IEFkZCBpbmNvcnJlY3QgYW5zd2VyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Ytc2hlZXQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LXJvdz4KICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNhcmQtdGV4dD4KICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgPC92LXJvdz4KICAgICAgICAgICAgPC92LWNvbnRhaW5lcj4KICAgICAgICAgICAgPHYtZGl2aWRlcj48L3YtZGl2aWRlcj4KICAgICAgICAgICAgPHYtY2FyZC1hY3Rpb25zPgogICAgICAgICAgICAgICAgPHYtc3BhY2VyPjwvdi1zcGFjZXI+CiAgICAgICAgICAgICAgICA8di1idG4gZGFyayBjbGFzcz0ibm8tdXBwZXJjYXNlIiBjb2xvcj0icHJpbWFyeSIgQGNsaWNrPSJoZWxwRGlhbG9nID0gZmFsc2UiPiBDbG9zZSA8L3YtYnRuPgogICAgICAgICAgICA8L3YtY2FyZC1hY3Rpb25zPgogICAgICAgIDwvdi1jYXJkPgogICAgPC92LWRpYWxvZz4KCjwvdi1jb250YWluZXI+Cg=="},null]}