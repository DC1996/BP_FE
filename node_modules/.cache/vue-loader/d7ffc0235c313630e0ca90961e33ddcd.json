{"remainingRequest":"/home/dc/Documents/BP/vue-bp-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dc/Documents/BP/vue-bp-web/src/components/modifyTestPage.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/dc/Documents/BP/vue-bp-web/src/components/modifyTestPage.vue","mtime":1648203294048},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/cache-loader/dist/cjs.js","mtime":1642114936856},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/babel-loader/lib/index.js","mtime":1642114938312},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/cache-loader/dist/cjs.js","mtime":1642114936856},{"path":"/home/dc/Documents/BP/vue-bp-web/node_modules/vue-loader/lib/index.js","mtime":1642114938760}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBUYXNrRGF0YVNlcnZpY2UgZnJvbSAiLi4vc2VydmljZXMvdGFza0RhdGFTZXJ2aWNlIjsKaW1wb3J0IENhdGVnb3J5RGF0YVNlcnZpY2UgZnJvbSAiLi4vc2VydmljZXMvY2F0ZWdvcnlEYXRhU2VydmljZSI7CmltcG9ydCBHZW5lcmF0b3JTZXJ2aWNlIGZyb20gIi4uL3NlcnZpY2VzL2dlbmVyYXRvclNlcnZpY2UiOwppbXBvcnQgeyBwYXJzZU1hdGhMYW5nIH0gZnJvbSAiLi4vbXlmaWxlcy90YXNrSGFuZGxlciI7CgppbXBvcnQgeyBpbml0TWF0aEpheCwgcmVuZGVyQnlNYXRoamF4IH0gZnJvbSAnbWF0aGpheC12dWUnOwppbXBvcnQgVGVzdERhdGFTZXJ2aWNlIGZyb20gJy4uL3NlcnZpY2VzL3Rlc3REYXRhU2VydmljZSc7CgpleHBvcnQgZGVmYXVsdCB7CiAgICBkYXRhKCkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIC8vIHN0ZXBwZXIgY29tcGxldGlvbiBhbmQgbGlzdCBpdGVtcyBvbiBlYWNoIHBhZ2UKICAgICAgICAgICAgZTE6IDEsCiAgICAgICAgICAgIHNlbGVjdGVkR3JhZGU6IFtmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZV0sCiAgICAgICAgICAgIHNlbGVjdGVkQ2F0ZWdvcnk6IFtmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZV0sCiAgICAgICAgICAgIHNlbGVjdGVkVGFzazogW2ZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlXSwKICAgICAgICAgICAgc2VsZWN0ZWRUYXNrTnVtYmVyOiAtMSwKICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIHRhc2sgaGFuZGxpbmcKICAgICAgICAgICAgdGFza3M6IFtdLAogICAgICAgICAgICBjb25jcmV0ZVRhc2tzOiBbXSwKICAgICAgICAgICAgY2F0ZWdvcmllczogW10sCgogICAgICAgICAgICAvLyBhbnN3ZXIgdHlwZXMgYW5kIHJlbmRlcmluZwogICAgICAgICAgICBhbnN3ZXJUeXBlczogWyAndGV4dCcsICdyYWRpbycsICdzZWxlY3QnLCAnY2hlY2tib3gnIF0sCiAgICAgICAgICAgIGFuc3dlck9wdGlvbnM6IFtdLAogICAgICAgICAgICBzZWxlY3RlZEFuc3dlclR5cGU6ICd0ZXh0JywKICAgICAgICAgICAgc2V0QW5zd2VyT3B0aW9uRGlhbG9nOiBmYWxzZSwKCiAgICAgICAgICAgIC8vIHJlbW92ZSB0YXNrIGRpYWxvZwogICAgICAgICAgICByZW1vdmVEaWFsb2c6IGZhbHNlLAogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHBsYWNlaG9sZGVyTW9kZWw6IFswLDAsMCwwLDAsMF0sCgogICAgICAgICAgICB0ZXN0TmFtZTogJ1Rlc3QgbmFtZScsCiAgICAgICAgfQogICAgfSwKICAgIG1ldGhvZHM6IHsKICAgICAgICBzZXRUZXN0TmFtZShldmVudCkgewogICAgICAgICAgICB0aGlzLnRlc3ROYW1lID0gZXZlbnQudGFyZ2V0LmlubmVySFRNTCgpOwogICAgICAgIH0sCgogICAgICAgIC8vIHNldCBBbnN3ZXIgVHlwZSBvcHRpb24KICAgICAgICBzZXRBbnN3ZXJPcHRpb24oaSwgb3B0aW9uKSB7CiAgICAgICAgICB0aGlzLmFuc3dlck9wdGlvbnMuc3BsaWNlKGksIDEsIHRoaXMuYW5zd2VyVHlwZXNbb3B0aW9uXSk7CiAgICAgICAgICB0aGlzLnNldEFuc3dlck9wdGlvbkRpYWxvZyA9IGZhbHNlOwogICAgICAgICAgdGhpcy5zZWxlY3RlZEFuc3dlclR5cGUgPSAndGV4dCc7CiAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmFuc3dlck9wdGlvbnNbaV0pCgogICAgICAgICAgaW5pdE1hdGhKYXgoe30pCgogICAgICAgICAgZnVuY3Rpb24gb25NYXRoSmF4UmVhZHkoKSB7CiAgICAgICAgICAgIGNvbnN0IGVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImFuc3dlcnMiKTsKICAgICAgICAgICAgcmVuZGVyQnlNYXRoamF4KGVsKTsKICAgICAgICAgIH0KCiAgICAgICAgICBpbml0TWF0aEpheCh7fSwgb25NYXRoSmF4UmVhZHkpOwogICAgICAgIH0sCgogICAgICAgIC8vIHJlbW92ZSBzZWxlY3RlZCB0YXNrCiAgICAgICAgcmVtb3ZlVGFzayhpKSB7CiAgICAgICAgICB0aGlzLnJlbW92ZURpYWxvZyA9IGZhbHNlOwogICAgICAgICAgdGhpcy5jb25jcmV0ZVRhc2tzLnNwbGljZShpLCAxKTsKICAgICAgICB9LAoKICAgICAgICAvLyBjaG9vc2UgZnJvbSBpdGVtcyBpbiB0aGUgbGlzdAogICAgICAgIHNldFNlbGVjdGVkKHNlbGVjdGlvbiwgaSkgewogICAgICAgICAgICBzZWxlY3Rpb24uc3BsaWNlKGksIDEsICFzZWxlY3Rpb25baV0pOwogICAgICAgIH0sCgogICAgICAgIC8vIHNldHVwIG1hcHBpbmcgb2YgdGFza3MKICAgICAgICBnZXREaXNwbGF5VGFzayh0YXNrKSB7CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBpZDogdGFzay5pZCwKICAgICAgICAgICAgICAgIG5hbWU6IHRhc2submFtZSwKICAgICAgICAgICAgICAgIGNvbnRlbnQ6IHRhc2suY29udGVudCwKICAgICAgICAgICAgICAgIGxhc3RfbW9kOiB0YXNrLnVwZGF0ZWRBdCwKICAgICAgICAgICAgICAgIHJlbmRlck9wdGlvbjogdGFzay50ZXN0VGFza3MucmVuZGVyT3B0aW9uLAogICAgICAgICAgICB9OwogICAgICAgIH0sCgogICAgICAgIC8vIHNldHVwIG1hcHBpbmcgb2YgY2F0ZWdvcmllcwogICAgICAgIGdldERpc3BsYXlDYXRlZ29yeShjYXRlZ29yeSkgewogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgaWQ6IGNhdGVnb3J5LmlkLAogICAgICAgICAgICAgICAgbmFtZTogY2F0ZWdvcnkubmFtZQogICAgICAgICAgICB9OwogICAgICAgIH0sCgogICAgICAgIGFzeW5jIHJldHJpZXZlVGVzdEFuZFRhc2tzKCkgewogICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IFRlc3REYXRhU2VydmljZS5nZXQodGhpcy4kcm91dGUucGFyYW1zLmlkKTsKCiAgICAgICAgICAgIHRoaXMudGFza3MgPSByZXNwb25zZS5kYXRhLnRhc2tzLm1hcCh0aGlzLmdldERpc3BsYXlUYXNrKTsKCiAgICAgICAgICAgIC8vIEdlbmVyYXRlIHByZXZpZXcgZm9yIGVhY2ggdGFzayB0aGF0IHdhcyBsb2FkZWQKICAgICAgICAgICAgICB0aGlzLnRhc2tzLmZvckVhY2godGFzayA9PiB7CiAgICAgICAgICAgICAgICBsZXQgYWJzdHJhY3RUYXNrID0gcGFyc2VNYXRoTGFuZyh0YXNrLmNvbnRlbnQpOwoKICAgICAgICAgICAgICAgIEdlbmVyYXRvclNlcnZpY2UuZ2VuZXJhdGUoe2NvbnRlbnQ6IGFic3RyYWN0VGFza30pLnRoZW4oKHJlcykgPT4gewogICAgICAgICAgICAgICAgICAvLyBTYXZlIGlkIG9mIHRhc2sgYW5kIGFkZCB0byBjb25jcmV0ZVRhc2tzIGFycmF5CiAgICAgICAgICAgICAgICAgIHRoaXMuY29uY3JldGVUYXNrcy5wdXNoKHtpZDogdGFzay5pZCwgY29udGVudDogcmVzLmRhdGEuY29udGVudH0pOwogICAgICAgICAgICAgICAgICB0aGlzLmFuc3dlck9wdGlvbnMucHVzaCh0YXNrLnJlbmRlck9wdGlvbik7CgogICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh0YXNrLnJlbmRlck9wdGlvbik7CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIH0pOwogICAgICAgIH0sCgogICAgICAgIC8vIGdldCBDYXRlZ29yaWVzIGZyb20gZGF0YWJhc2UKICAgICAgICByZXRyaWV2ZUNhdGVnb3JpZXMoKSB7CiAgICAgICAgICBDYXRlZ29yeURhdGFTZXJ2aWNlLmdldEFsbCgpCiAgICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4gewogICAgICAgICAgICAgIHRoaXMuY2F0ZWdvcmllcyA9IHJlc3BvbnNlLmRhdGEubWFwKHRoaXMuZ2V0RGlzcGxheUNhdGVnb3J5KTsKICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZS5kYXRhKTsKICAgICAgICAgICAgfSkKICAgICAgICAgICAgLmNhdGNoKChlKSA9PiB7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coZSk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0sCgogICAgICAgIC8vIENyZWF0ZSBuZXcgdGVzdCBhbmQgYWRkIHRhc2tzIHRoYXQgdGhlIHVzZXIgc2VsZWN0ZWQKICAgICAgICBjcmVhdGVBbmRTYXZlVGVzdCgpIHsKICAgICAgICAgIFRlc3REYXRhU2VydmljZS5jcmVhdGUoe25hbWU6ICJUZXN0IG5hbWUifSkudGhlbigocmVzcG9uc2UpID0+IHsKICAgICAgICAgICAgbGV0IHRlc3RJZCA9IHJlc3BvbnNlLmRhdGEuaWQ7CgogICAgICAgICAgICAvLyBEZWxldGUgdGFza3MgaW4gZGIKICAgICAgICAgICAgVGVzdERhdGFTZXJ2aWNlLmRlbGV0ZVRhc2tzKCkudGhlbigoKSA9PiB7CiAgICAgICAgICAgICAgICAvLyBBZGQgbmV3IHRhc2tzCiAgICAgICAgICAgICAgICB0aGlzLmNvbmNyZXRlVGFza3MuZm9yRWFjaCgodGFzaykgPT4gewogICAgICAgICAgICAgICAgICAgIFRlc3REYXRhU2VydmljZS5hZGRUYXNrKHt0ZXN0SWQ6IHRlc3RJZCwgdGFza0lkOiB0YXNrLmlkfSkKICAgICAgICAgICAgICAgICAgICAudGhlbigocmVzKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlcyk7IAogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRyb3V0ZXIucHVzaCh7IG5hbWU6ICJ5b3VyVGVzdHMiIH0pOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSk7CiAgICAgICAgfSwKICAgIH0sCgogICAgLy8gVGhpcyBmdW5jdGlvbiBydW5zIGJlZm9yZSB0aGUgVUkgbG9hZHMKICAgIGJlZm9yZU1vdW50KCkgewogICAgICAgIC8vIExvYWQgY2F0ZWdvcmllcyBhbmQgdGFza3MgZnJvbSB0aGUgZGF0YWJhc2UKICAgICAgICB0aGlzLnJldHJpZXZlQ2F0ZWdvcmllcygpOwogICAgICAgIHRoaXMucmV0cmlldmVUZXN0QW5kVGFza3MoKTsKICAgIH0sCiAgICBzZXR1cCgpIHsKICAgICAgICAKICAgIH0sCn0K"},{"version":3,"sources":["modifyTestPage.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkKA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"modifyTestPage.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <!-- See preview of each task, modify render options -->\n    <v-container class=\"d-flex flex-column\">\n        <!-- Test name -->\n        <p class=\"text-h4 align-self-center mt-2\" @blur=\"setTestName($event)\" contenteditable=\"true\" > {{ testName }} </p>\n\n        <v-card hover outlined class=\"my-2 mx-6\" v-for=\"(task, t_index) in concreteTasks\" :key=\"t_index\">\n        \n        <v-card-title class=\"d-flex justify-space-between\"> \n            Task #{{ t_index + 1 }} \n        <!-- buttons in top right corner on card -->\n        <v-card-actions>\n            <!-- Edit answer rendering type button -->\n            <v-tooltip bottom>\n                <template v-slot:activator=\"{ on, attrs }\">\n                    <v-btn @click=\"selectedTaskNumber = t_index; setAnswerOptionDialog = true\" icon v-bind=\"attrs\" v-on=\"on\">\n                        <v-icon color=\"primary\"> mdi-tune </v-icon>\n                    </v-btn>\n                </template>\n                <span class=\"font-weight-light\">Edit answer type</span>\n            </v-tooltip>\n            <!-- Edit task button -->\n            <v-tooltip bottom>\n            <template v-slot:activator=\"{ on, attrs }\">\n                <v-btn @click=\"modifyTask(task)\" icon v-bind=\"attrs\" v-on=\"on\">\n                <v-icon color=\"var(--main-text-color)\">\n                    mdi-pencil-outline\n                </v-icon>\n                </v-btn>\n            </template>\n            <span class=\"font-weight-light\">Edit task</span>\n            </v-tooltip>\n            <!-- change task answer type -->\n            <v-tooltip bottom>\n            <template v-slot:activator=\"{ on, attrs }\">\n                <v-btn \n                @click.stop=\"selectedTaskNumber = t_index; removeDialog = true\" \n                icon v-bind=\"attrs\" v-on=\"on\">\n                <v-icon color=\"error\">\n                    mdi-close-circle-outline\n                </v-icon>\n                </v-btn>\n            </template>\n            <span class=\"font-weight-light\">Remove task</span>\n            </v-tooltip>\n        </v-card-actions>\n        </v-card-title>\n        \n        <v-card-subtitle class=\"mt-1 text-body-1\"> <p> {{ task.content.text }} </p> </v-card-subtitle>\n        \n        <v-card-text>\n            <div \n            class=\"d-flex flex-column justify-center align-start\"  \n            v-for=\"(q, q_i) in task.content.questions\" :key=\"q_i\">\n\n            <!-- Question -->\n            <div class=\"d-flex flex-row justify-flex-start align-center mb-2\">\n                <p class=\"font-weight-light align-self-center ma-0 pl-2 text-body-1\"> \n                    <span class=\"font-weight-medium\"> Question #{{ q_i+1 }} </span>\n                    : {{ q.text }}\n                </p>\n            </div>\n\n            <!-- Answers -->\n            <!-- type == 'select' -->\n            <div class=\"d-flex flex-row justify-space-between mb-1\" v-if=\"answerOptions[t_index] == 'select'\"> \n                <div class=\"d-flex flex-column py-1 px-2\" v-for=\"(answer, index) in q.answers\" :key=\"index\">\n                    <v-select :items=\"answer.correct.concat(answer.incorrect)\" :label=\"answer.name\" outlined dense></v-select>\n                </div>\n            </div>\n\n            <!-- type == 'radio' -->\n            <div class=\"d-flex flex-row justify-space-between mb-1\" v-if=\"answerOptions[t_index] == 'radio'\">  \n                <div class=\"d-flex flex-column py-1 px-2\" v-for=\"(answer, a_index) in q.answers\" :key=\"a_index\">\n                <p> {{ answer.name }} </p>\n                <v-radio-group>\n                    <v-radio class=\"py-1\"\n                    v-for=\"(value, i) in answer.correct.concat(answer.incorrect)\"\n                    :key=\"value\" :label=\"value.toString()\" :value=\"i\" dense>\n                    </v-radio>\n                </v-radio-group>\n                </div>\n            </div>\n\n            <!-- type == 'checkbox' -->\n            <div class=\"d-flex flex-row justify-space-between mb-1\" v-if=\"answerOptions[t_index] == 'checkbox'\"> \n                <div class=\"d-flex flex-column py-1 px-2\" v-for=\"(answer, index) in q.answers\" :key=\"index\">\n                <p> {{ answer.name }} </p>\n                    <v-checkbox class=\"pa-0 ma-0\" v-for=\"(value, i) in answer.correct.concat(answer.incorrect)\"\n                    :key=\"value\" :label=\"value.toString()\" :value=\"i\" dense>\n                    </v-checkbox>\n                </div>\n            </div>\n\n            <!-- type == 'text' -->\n            <div class=\"d-flex flex-row justify-space-between mb-1\" v-if=\"answerOptions[t_index] == 'text'\"> \n                <div class=\"dflex flex-column py-1 px-2\" v-for=\"(answer, index) in q.answers\" :key=\"index\">\n                    <v-text-field\n                    :label=\"answer.name\"\n                    outlined dense hide-details\n                    ></v-text-field>\n                </div>\n            </div>\n\n            </div>\n        </v-card-text>\n\n        </v-card>\n\n        <v-row class=\"d-flex justify-center align-center pa-2 px-6 mt-2\">\n        <v-btn outlined class=\"my-2 mb-4 mx-2 align-self-end\" text> Cancel </v-btn>\n        <v-btn class=\"my-2 mb-4 mx-2 align-self-end\" color=\"primary\" @click=\"createAndSaveTest()\"> Finish & Save</v-btn>\n    </v-row>\n\n    <v-dialog v-model=\"removeDialog\" width=\"350\" :retain-focus=\"false\">\n            <v-card>\n                <v-card-title class=\"text-h5 lighten-2\"> Remove Task #{{selectedTaskNumber+1}} from test </v-card-title>\n\n                <v-card-text> Are you sure you want to remove this task? </v-card-text>\n\n                <v-divider></v-divider>\n\n                <v-card-actions>\n                    <v-spacer></v-spacer>\n                    <v-btn color=\"black\" outlined text @click=\"removeDialog = false\"> Cancel </v-btn>\n                    <v-btn dark color=\"red\" @click=\"removeTask(selectedTaskNumber)\"> Delete </v-btn>\n                </v-card-actions>\n                \n            </v-card>\n        </v-dialog>\n\n\n        <!-- Answer type options dialog -->\n        <v-dialog v-model=\"setAnswerOptionDialog\" width=\"500\" :retain-focus=\"false\">\n            <v-card>\n                <v-card-title class=\"text-h5 lighten-2\"> Task #{{selectedTaskNumber+1}} answer options </v-card-title>\n\n                <v-card-text> \n                <p>Select answer type</p>\n                <v-slider \n                    v-model=\"selectedAnswerType\" \n                    :tick-labels=\"answerTypes\" :max=\"3\"\n                    step=\"1\" ticks=\"always\" tick-size=\"6\"\n                    >\n                </v-slider>\n                </v-card-text>\n\n                <v-divider></v-divider>\n\n                <v-card-actions>\n                    <v-spacer></v-spacer>\n                    <v-btn color=\"black\" outlined text @click=\"setAnswerOptionDialog = false\"> Cancel </v-btn>\n                    <v-btn dark color=\"primary\" @click=\"setAnswerOption(selectedTaskNumber, selectedAnswerType)\"> Save </v-btn>\n                </v-card-actions>\n                \n            </v-card>\n        </v-dialog>\n\n    </v-container>\n</template>\n\n<script>\nimport TaskDataService from \"../services/taskDataService\";\nimport CategoryDataService from \"../services/categoryDataService\";\nimport GeneratorService from \"../services/generatorService\";\nimport { parseMathLang } from \"../myfiles/taskHandler\";\n\nimport { initMathJax, renderByMathjax } from 'mathjax-vue';\nimport TestDataService from '../services/testDataService';\n\nexport default {\n    data() {\n        return {\n            // stepper completion and list items on each page\n            e1: 1,\n            selectedGrade: [false,false,false,false,false,false,false,false,false,false],\n            selectedCategory: [false,false,false,false,false,false,false,false,false,false],\n            selectedTask: [false,false,false,false,false,false,false,false,false,false],\n            selectedTaskNumber: -1,\n            \n            // task handling\n            tasks: [],\n            concreteTasks: [],\n            categories: [],\n\n            // answer types and rendering\n            answerTypes: [ 'text', 'radio', 'select', 'checkbox' ],\n            answerOptions: [],\n            selectedAnswerType: 'text',\n            setAnswerOptionDialog: false,\n\n            // remove task dialog\n            removeDialog: false,\n            \n            \n            placeholderModel: [0,0,0,0,0,0],\n\n            testName: 'Test name',\n        }\n    },\n    methods: {\n        setTestName(event) {\n            this.testName = event.target.innerHTML();\n        },\n\n        // set Answer Type option\n        setAnswerOption(i, option) {\n          this.answerOptions.splice(i, 1, this.answerTypes[option]);\n          this.setAnswerOptionDialog = false;\n          this.selectedAnswerType = 'text';\n          console.log(this.answerOptions[i])\n\n          initMathJax({})\n\n          function onMathJaxReady() {\n            const el = document.getElementById(\"answers\");\n            renderByMathjax(el);\n          }\n\n          initMathJax({}, onMathJaxReady);\n        },\n\n        // remove selected task\n        removeTask(i) {\n          this.removeDialog = false;\n          this.concreteTasks.splice(i, 1);\n        },\n\n        // choose from items in the list\n        setSelected(selection, i) {\n            selection.splice(i, 1, !selection[i]);\n        },\n\n        // setup mapping of tasks\n        getDisplayTask(task) {\n            return {\n                id: task.id,\n                name: task.name,\n                content: task.content,\n                last_mod: task.updatedAt,\n                renderOption: task.testTasks.renderOption,\n            };\n        },\n\n        // setup mapping of categories\n        getDisplayCategory(category) {\n            return {\n                id: category.id,\n                name: category.name\n            };\n        },\n\n        async retrieveTestAndTasks() {\n            const response = await TestDataService.get(this.$route.params.id);\n\n            this.tasks = response.data.tasks.map(this.getDisplayTask);\n\n            // Generate preview for each task that was loaded\n              this.tasks.forEach(task => {\n                let abstractTask = parseMathLang(task.content);\n\n                GeneratorService.generate({content: abstractTask}).then((res) => {\n                  // Save id of task and add to concreteTasks array\n                  this.concreteTasks.push({id: task.id, content: res.data.content});\n                  this.answerOptions.push(task.renderOption);\n\n                  console.log(task.renderOption);\n                })\n              });\n        },\n\n        // get Categories from database\n        retrieveCategories() {\n          CategoryDataService.getAll()\n            .then((response) => {\n              this.categories = response.data.map(this.getDisplayCategory);\n              console.log(response.data);\n            })\n            .catch((e) => {\n              console.log(e);\n            });\n        },\n\n        // Create new test and add tasks that the user selected\n        createAndSaveTest() {\n          TestDataService.create({name: \"Test name\"}).then((response) => {\n            let testId = response.data.id;\n\n            // Delete tasks in db\n            TestDataService.deleteTasks().then(() => {\n                // Add new tasks\n                this.concreteTasks.forEach((task) => {\n                    TestDataService.addTask({testId: testId, taskId: task.id})\n                    .then((res) => {\n                        console.log(res); \n                        this.$router.push({ name: \"yourTests\" });\n                    });\n                });\n            });\n          });\n        },\n    },\n\n    // This function runs before the UI loads\n    beforeMount() {\n        // Load categories and tasks from the database\n        this.retrieveCategories();\n        this.retrieveTestAndTasks();\n    },\n    setup() {\n        \n    },\n}\n</script>"]}]}